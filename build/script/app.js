"use strict";var _typeof2="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function e(t,n,r){function o(a,u){if(!n[a]){if(!t[a]){var s="function"==typeof require&&require;if(!u&&s)return s(a,!0);if(i)return i(a,!0);throw new Error("Cannot find module '"+a+"'")}var f=n[a]={exports:{}};t[a][0].call(f.exports,function(e){var n=t[a][1][e];return o(n||e)},f,f.exports,e,t,n,r)}return n[a].exports}for(var i="function"==typeof require&&require,a=0;a<r.length;a++)o(r[a]);return o}({1:[function(e,t,n){(function(e,t,r,o,i,a,u,s,f){var l="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";!function(e){function t(e){var t=e.charCodeAt(0);return t===r||t===s?62:t===o||t===f?63:t<i?-1:t<i+10?t-i+26+26:t<u+26?t-u:t<a+26?t-a+26:void 0}var n="undefined"!=typeof Uint8Array?Uint8Array:Array,r="+".charCodeAt(0),o="/".charCodeAt(0),i="0".charCodeAt(0),a="a".charCodeAt(0),u="A".charCodeAt(0),s="-".charCodeAt(0),f="_".charCodeAt(0);e.toByteArray=function(e){function r(e){f[c++]=e}var o,i,a,u,s,f;if(e.length%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var l=e.length;s="="===e.charAt(l-2)?2:"="===e.charAt(l-1)?1:0,f=new n(3*e.length/4-s),a=s>0?e.length-4:e.length;var c=0;for(o=0,i=0;o<a;o+=4,i+=3)r((16711680&(u=t(e.charAt(o))<<18|t(e.charAt(o+1))<<12|t(e.charAt(o+2))<<6|t(e.charAt(o+3))))>>16),r((65280&u)>>8),r(255&u);return 2===s?r(255&(u=t(e.charAt(o))<<2|t(e.charAt(o+1))>>4)):1===s&&(r((u=t(e.charAt(o))<<10|t(e.charAt(o+1))<<4|t(e.charAt(o+2))>>2)>>8&255),r(255&u)),f},e.fromByteArray=function(e){function t(e){return l.charAt(e)}var n,r,o,i=e.length%3,a="";for(n=0,o=e.length-i;n<o;n+=3)a+=function(e){return t(e>>18&63)+t(e>>12&63)+t(e>>6&63)+t(63&e)}(r=(e[n]<<16)+(e[n+1]<<8)+e[n+2]);switch(i){case 1:a+=t((r=e[e.length-1])>>2),a+=t(r<<4&63),a+="==";break;case 2:a+=t((r=(e[e.length-2]<<8)+e[e.length-1])>>10),a+=t(r>>4&63),a+=t(r<<2&63),a+="="}return a}}(void 0===n?(void 0).base64js={}:n)}).call(this,e("e/U+97"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\base64-js\\lib\\b64.js","/..\\..\\node_modules\\base64-js\\lib")},{buffer:2,"e/U+97":4}],2:[function(e,t,n){(function(t,r,o,i,a,u,s,f,l){function o(e,t,n){if(!(this instanceof o))return new o(e,t,n);var r=void 0===e?"undefined":Q(e);if("base64"===t&&"string"===r)for(e=M(e);e.length%4!=0;)e+="=";var i;if("number"===r)i=j(e);else if("string"===r)i=o.byteLength(e,t);else{if("object"!==r)throw new Error("First argument needs to be a number, array or string.");i=j(e.length)}var a;o._useTypedArrays?a=o._augment(new Uint8Array(i)):((a=this).length=i,a._isBuffer=!0);var u;if(o._useTypedArrays&&"number"==typeof e.byteLength)a._set(e);else if(O(e))for(u=0;u<i;u++)o.isBuffer(e)?a[u]=e.readUInt8(u):a[u]=e[u];else if("string"===r)a.write(e,0,t);else if("number"===r&&!o._useTypedArrays&&!n)for(u=0;u<i;u++)a[u]=0;return a}function c(e,t,n,r){n=Number(n)||0;var i=e.length-n;r?(r=Number(r))>i&&(r=i):r=i;var a=t.length;K(a%2==0,"Invalid hex string"),r>a/2&&(r=a/2);for(var u=0;u<r;u++){var s=parseInt(t.substr(2*u,2),16);K(!isNaN(s),"Invalid hex string"),e[n+u]=s}return o._charsWritten=2*u,u}function d(e,t,n,r){return o._charsWritten=V(N(t),e,n,r)}function h(e,t,n,r){return o._charsWritten=V(R(t),e,n,r)}function y(e,t,n,r){return h(e,t,n,r)}function m(e,t,n,r){return o._charsWritten=V(J(t),e,n,r)}function p(e,t,n,r){return o._charsWritten=V(W(t),e,n,r)}function v(e,t,n){return 0===t&&n===e.length?Z.fromByteArray(e):Z.fromByteArray(e.slice(t,n))}function g(e,t,n){var r="",o="";n=Math.min(e.length,n);for(var i=t;i<n;i++)e[i]<=127?(r+=X(o)+String.fromCharCode(e[i]),o=""):o+="%"+e[i].toString(16);return r+X(o)}function b(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;o++)r+=String.fromCharCode(e[o]);return r}function w(e,t,n){return b(e,t,n)}function E(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);for(var o="",i=t;i<n;i++)o+=q(e[i]);return o}function B(e,t,n){for(var r=e.slice(t,n),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function D(e,t,n,r){r||(K("boolean"==typeof n,"missing or invalid endian"),K(void 0!==t&&null!==t,"missing offset"),K(t+1<e.length,"Trying to read beyond buffer length"));var o=e.length;if(!(t>=o)){var i;return n?(i=e[t],t+1<o&&(i|=e[t+1]<<8)):(i=e[t]<<8,t+1<o&&(i|=e[t+1])),i}}function k(e,t,n,r){r||(K("boolean"==typeof n,"missing or invalid endian"),K(void 0!==t&&null!==t,"missing offset"),K(t+3<e.length,"Trying to read beyond buffer length"));var o=e.length;if(!(t>=o)){var i;return n?(t+2<o&&(i=e[t+2]<<16),t+1<o&&(i|=e[t+1]<<8),i|=e[t],t+3<o&&(i+=e[t+3]<<24>>>0)):(t+1<o&&(i=e[t+1]<<16),t+2<o&&(i|=e[t+2]<<8),t+3<o&&(i|=e[t+3]),i+=e[t]<<24>>>0),i}}function I(e,t,n,r){if(r||(K("boolean"==typeof n,"missing or invalid endian"),K(void 0!==t&&null!==t,"missing offset"),K(t+1<e.length,"Trying to read beyond buffer length")),!(t>=e.length)){var o=D(e,t,n,!0);return 32768&o?-1*(65535-o+1):o}}function U(e,t,n,r){if(r||(K("boolean"==typeof n,"missing or invalid endian"),K(void 0!==t&&null!==t,"missing offset"),K(t+3<e.length,"Trying to read beyond buffer length")),!(t>=e.length)){var o=k(e,t,n,!0);return 2147483648&o?-1*(4294967295-o+1):o}}function L(e,t,n,r){return r||(K("boolean"==typeof n,"missing or invalid endian"),K(t+3<e.length,"Trying to read beyond buffer length")),$.read(e,t,n,23,4)}function _(e,t,n,r){return r||(K("boolean"==typeof n,"missing or invalid endian"),K(t+7<e.length,"Trying to read beyond buffer length")),$.read(e,t,n,52,8)}function H(e,t,n,r,o){o||(K(void 0!==t&&null!==t,"missing value"),K("boolean"==typeof r,"missing or invalid endian"),K(void 0!==n&&null!==n,"missing offset"),K(n+1<e.length,"trying to write beyond buffer length"),Y(t,65535));var i=e.length;if(!(n>=i))for(var a=0,u=Math.min(i-n,2);a<u;a++)e[n+a]=(t&255<<8*(r?a:1-a))>>>8*(r?a:1-a)}function T(e,t,n,r,o){o||(K(void 0!==t&&null!==t,"missing value"),K("boolean"==typeof r,"missing or invalid endian"),K(void 0!==n&&null!==n,"missing offset"),K(n+3<e.length,"trying to write beyond buffer length"),Y(t,4294967295));var i=e.length;if(!(n>=i))for(var a=0,u=Math.min(i-n,4);a<u;a++)e[n+a]=t>>>8*(r?a:3-a)&255}function S(e,t,n,r,o){o||(K(void 0!==t&&null!==t,"missing value"),K("boolean"==typeof r,"missing or invalid endian"),K(void 0!==n&&null!==n,"missing offset"),K(n+1<e.length,"Trying to write beyond buffer length"),z(t,32767,-32768)),n>=e.length||(t>=0?H(e,t,n,r,o):H(e,65535+t+1,n,r,o))}function F(e,t,n,r,o){o||(K(void 0!==t&&null!==t,"missing value"),K("boolean"==typeof r,"missing or invalid endian"),K(void 0!==n&&null!==n,"missing offset"),K(n+3<e.length,"Trying to write beyond buffer length"),z(t,2147483647,-2147483648)),n>=e.length||(t>=0?T(e,t,n,r,o):T(e,4294967295+t+1,n,r,o))}function A(e,t,n,r,o){o||(K(void 0!==t&&null!==t,"missing value"),K("boolean"==typeof r,"missing or invalid endian"),K(void 0!==n&&null!==n,"missing offset"),K(n+3<e.length,"Trying to write beyond buffer length"),G(t,3.4028234663852886e38,-3.4028234663852886e38)),n>=e.length||$.write(e,t,n,r,23,4)}function P(e,t,n,r,o){o||(K(void 0!==t&&null!==t,"missing value"),K("boolean"==typeof r,"missing or invalid endian"),K(void 0!==n&&null!==n,"missing offset"),K(n+7<e.length,"Trying to write beyond buffer length"),G(t,1.7976931348623157e308,-1.7976931348623157e308)),n>=e.length||$.write(e,t,n,r,52,8)}function M(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}function C(e,t,n){return"number"!=typeof e?n:(e=~~e)>=t?t:e>=0?e:(e+=t)>=0?e:0}function j(e){return(e=~~Math.ceil(+e))<0?0:e}function x(e){return(Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)})(e)}function O(e){return x(e)||o.isBuffer(e)||e&&"object"===(void 0===e?"undefined":Q(e))&&"number"==typeof e.length}function q(e){return e<16?"0"+e.toString(16):e.toString(16)}function N(e){for(var t=[],n=0;n<e.length;n++){var r=e.charCodeAt(n);if(r<=127)t.push(e.charCodeAt(n));else{var o=n;r>=55296&&r<=57343&&n++;for(var i=encodeURIComponent(e.slice(o,n+1)).substr(1).split("%"),a=0;a<i.length;a++)t.push(parseInt(i[a],16))}}return t}function R(e){for(var t=[],n=0;n<e.length;n++)t.push(255&e.charCodeAt(n));return t}function W(e){for(var t,n,r,o=[],i=0;i<e.length;i++)n=(t=e.charCodeAt(i))>>8,r=t%256,o.push(r),o.push(n);return o}function J(e){return Z.toByteArray(e)}function V(e,t,n,r){for(var o=0;o<r&&!(o+n>=t.length||o>=e.length);o++)t[o+n]=e[o];return o}function X(e){try{return decodeURIComponent(e)}catch(e){return String.fromCharCode(65533)}}function Y(e,t){K("number"==typeof e,"cannot write a non-number as a number"),K(e>=0,"specified a negative value for writing an unsigned value"),K(e<=t,"value is larger than maximum value for type"),K(Math.floor(e)===e,"value has a fractional component")}function z(e,t,n){K("number"==typeof e,"cannot write a non-number as a number"),K(e<=t,"value larger than maximum allowed value"),K(e>=n,"value smaller than minimum allowed value"),K(Math.floor(e)===e,"value has a fractional component")}function G(e,t,n){K("number"==typeof e,"cannot write a non-number as a number"),K(e<=t,"value larger than maximum allowed value"),K(e>=n,"value smaller than minimum allowed value")}function K(e,t){if(!e)throw new Error(t||"Failed assertion")}var Q="function"==typeof Symbol&&"symbol"===_typeof2(Symbol.iterator)?function(e){return void 0===e?"undefined":_typeof2(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":void 0===e?"undefined":_typeof2(e)},Z=e("base64-js"),$=e("ieee754");n.Buffer=o,n.SlowBuffer=o,n.INSPECT_MAX_BYTES=50,o.poolSize=8192,o._useTypedArrays=function(){try{var e=new ArrayBuffer(0),t=new Uint8Array(e);return t.foo=function(){return 42},42===t.foo()&&"function"==typeof t.subarray}catch(e){return!1}}(),o.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"raw":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},o.isBuffer=function(e){return!(null===e||void 0===e||!e._isBuffer)},o.byteLength=function(e,t){var n;switch(e+="",t||"utf8"){case"hex":n=e.length/2;break;case"utf8":case"utf-8":n=N(e).length;break;case"ascii":case"binary":case"raw":n=e.length;break;case"base64":n=J(e).length;break;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":n=2*e.length;break;default:throw new Error("Unknown encoding")}return n},o.concat=function(e,t){if(K(x(e),"Usage: Buffer.concat(list, [totalLength])\nlist should be an Array."),0===e.length)return new o(0);if(1===e.length)return e[0];var n;if("number"!=typeof t)for(t=0,n=0;n<e.length;n++)t+=e[n].length;var r=new o(t),i=0;for(n=0;n<e.length;n++){var a=e[n];a.copy(r,i),i+=a.length}return r},o.prototype.write=function(e,t,n,r){if(isFinite(t))isFinite(n)||(r=n,n=void 0);else{var o=r;r=t,t=n,n=o}t=Number(t)||0;var i=this.length-t;n?(n=Number(n))>i&&(n=i):n=i;var a;switch(r=String(r||"utf8").toLowerCase()){case"hex":a=c(this,e,t,n);break;case"utf8":case"utf-8":a=d(this,e,t,n);break;case"ascii":a=h(this,e,t,n);break;case"binary":a=y(this,e,t,n);break;case"base64":a=m(this,e,t,n);break;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":a=p(this,e,t,n);break;default:throw new Error("Unknown encoding")}return a},o.prototype.toString=function(e,t,n){var r=this;if(e=String(e||"utf8").toLowerCase(),t=Number(t)||0,(n=void 0!==n?Number(n):n=r.length)===t)return"";var o;switch(e){case"hex":o=E(r,t,n);break;case"utf8":case"utf-8":o=g(r,t,n);break;case"ascii":o=b(r,t,n);break;case"binary":o=w(r,t,n);break;case"base64":o=v(r,t,n);break;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":o=B(r,t,n);break;default:throw new Error("Unknown encoding")}return o},o.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}},o.prototype.copy=function(e,t,n,r){var i=this;if(n||(n=0),r||0===r||(r=this.length),t||(t=0),r!==n&&0!==e.length&&0!==i.length){K(r>=n,"sourceEnd < sourceStart"),K(t>=0&&t<e.length,"targetStart out of bounds"),K(n>=0&&n<i.length,"sourceStart out of bounds"),K(r>=0&&r<=i.length,"sourceEnd out of bounds"),r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var a=r-n;if(a<100||!o._useTypedArrays)for(var u=0;u<a;u++)e[u+t]=this[u+n];else e._set(this.subarray(n,n+a),t)}},o.prototype.slice=function(e,t){var n=this.length;if(e=C(e,n,0),t=C(t,n,n),o._useTypedArrays)return o._augment(this.subarray(e,t));for(var r=t-e,i=new o(r,void 0,!0),a=0;a<r;a++)i[a]=this[a+e];return i},o.prototype.get=function(e){return console.log(".get() is deprecated. Access using array indexes instead."),this.readUInt8(e)},o.prototype.set=function(e,t){return console.log(".set() is deprecated. Access using array indexes instead."),this.writeUInt8(e,t)},o.prototype.readUInt8=function(e,t){if(t||(K(void 0!==e&&null!==e,"missing offset"),K(e<this.length,"Trying to read beyond buffer length")),!(e>=this.length))return this[e]},o.prototype.readUInt16LE=function(e,t){return D(this,e,!0,t)},o.prototype.readUInt16BE=function(e,t){return D(this,e,!1,t)},o.prototype.readUInt32LE=function(e,t){return k(this,e,!0,t)},o.prototype.readUInt32BE=function(e,t){return k(this,e,!1,t)},o.prototype.readInt8=function(e,t){if(t||(K(void 0!==e&&null!==e,"missing offset"),K(e<this.length,"Trying to read beyond buffer length")),!(e>=this.length))return 128&this[e]?-1*(255-this[e]+1):this[e]},o.prototype.readInt16LE=function(e,t){return I(this,e,!0,t)},o.prototype.readInt16BE=function(e,t){return I(this,e,!1,t)},o.prototype.readInt32LE=function(e,t){return U(this,e,!0,t)},o.prototype.readInt32BE=function(e,t){return U(this,e,!1,t)},o.prototype.readFloatLE=function(e,t){return L(this,e,!0,t)},o.prototype.readFloatBE=function(e,t){return L(this,e,!1,t)},o.prototype.readDoubleLE=function(e,t){return _(this,e,!0,t)},o.prototype.readDoubleBE=function(e,t){return _(this,e,!1,t)},o.prototype.writeUInt8=function(e,t,n){n||(K(void 0!==e&&null!==e,"missing value"),K(void 0!==t&&null!==t,"missing offset"),K(t<this.length,"trying to write beyond buffer length"),Y(e,255)),t>=this.length||(this[t]=e)},o.prototype.writeUInt16LE=function(e,t,n){H(this,e,t,!0,n)},o.prototype.writeUInt16BE=function(e,t,n){H(this,e,t,!1,n)},o.prototype.writeUInt32LE=function(e,t,n){T(this,e,t,!0,n)},o.prototype.writeUInt32BE=function(e,t,n){T(this,e,t,!1,n)},o.prototype.writeInt8=function(e,t,n){n||(K(void 0!==e&&null!==e,"missing value"),K(void 0!==t&&null!==t,"missing offset"),K(t<this.length,"Trying to write beyond buffer length"),z(e,127,-128)),t>=this.length||(e>=0?this.writeUInt8(e,t,n):this.writeUInt8(255+e+1,t,n))},o.prototype.writeInt16LE=function(e,t,n){S(this,e,t,!0,n)},o.prototype.writeInt16BE=function(e,t,n){S(this,e,t,!1,n)},o.prototype.writeInt32LE=function(e,t,n){F(this,e,t,!0,n)},o.prototype.writeInt32BE=function(e,t,n){F(this,e,t,!1,n)},o.prototype.writeFloatLE=function(e,t,n){A(this,e,t,!0,n)},o.prototype.writeFloatBE=function(e,t,n){A(this,e,t,!1,n)},o.prototype.writeDoubleLE=function(e,t,n){P(this,e,t,!0,n)},o.prototype.writeDoubleBE=function(e,t,n){P(this,e,t,!1,n)},o.prototype.fill=function(e,t,n){if(e||(e=0),t||(t=0),n||(n=this.length),"string"==typeof e&&(e=e.charCodeAt(0)),K("number"==typeof e&&!isNaN(e),"value is not a number"),K(n>=t,"end < start"),n!==t&&0!==this.length){K(t>=0&&t<this.length,"start out of bounds"),K(n>=0&&n<=this.length,"end out of bounds");for(var r=t;r<n;r++)this[r]=e}},o.prototype.inspect=function(){for(var e=[],t=this.length,r=0;r<t;r++)if(e[r]=q(this[r]),r===n.INSPECT_MAX_BYTES){e[r+1]="...";break}return"<Buffer "+e.join(" ")+">"},o.prototype.toArrayBuffer=function(){if("undefined"!=typeof Uint8Array){if(o._useTypedArrays)return new o(this).buffer;for(var e=new Uint8Array(this.length),t=0,n=e.length;t<n;t+=1)e[t]=this[t];return e.buffer}throw new Error("Buffer.toArrayBuffer not supported in this browser")};var ee=o.prototype;o._augment=function(e){return e._isBuffer=!0,e._get=e.get,e._set=e.set,e.get=ee.get,e.set=ee.set,e.write=ee.write,e.toString=ee.toString,e.toLocaleString=ee.toString,e.toJSON=ee.toJSON,e.copy=ee.copy,e.slice=ee.slice,e.readUInt8=ee.readUInt8,e.readUInt16LE=ee.readUInt16LE,e.readUInt16BE=ee.readUInt16BE,e.readUInt32LE=ee.readUInt32LE,e.readUInt32BE=ee.readUInt32BE,e.readInt8=ee.readInt8,e.readInt16LE=ee.readInt16LE,e.readInt16BE=ee.readInt16BE,e.readInt32LE=ee.readInt32LE,e.readInt32BE=ee.readInt32BE,e.readFloatLE=ee.readFloatLE,e.readFloatBE=ee.readFloatBE,e.readDoubleLE=ee.readDoubleLE,e.readDoubleBE=ee.readDoubleBE,e.writeUInt8=ee.writeUInt8,e.writeUInt16LE=ee.writeUInt16LE,e.writeUInt16BE=ee.writeUInt16BE,e.writeUInt32LE=ee.writeUInt32LE,e.writeUInt32BE=ee.writeUInt32BE,e.writeInt8=ee.writeInt8,e.writeInt16LE=ee.writeInt16LE,e.writeInt16BE=ee.writeInt16BE,e.writeInt32LE=ee.writeInt32LE,e.writeInt32BE=ee.writeInt32BE,e.writeFloatLE=ee.writeFloatLE,e.writeFloatBE=ee.writeFloatBE,e.writeDoubleLE=ee.writeDoubleLE,e.writeDoubleBE=ee.writeDoubleBE,e.fill=ee.fill,e.inspect=ee.inspect,e.toArrayBuffer=ee.toArrayBuffer,e}}).call(this,e("e/U+97"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\buffer\\index.js","/..\\..\\node_modules\\buffer")},{"base64-js":1,buffer:2,"e/U+97":4,ieee754:3}],3:[function(e,t,n){(function(e,t,r,o,i,a,u,s,f){n.read=function(e,t,n,r,o){var i,a,u=8*o-r-1,s=(1<<u)-1,f=s>>1,l=-7,c=n?o-1:0,d=n?-1:1,h=e[t+c];for(c+=d,i=h&(1<<-l)-1,h>>=-l,l+=u;l>0;i=256*i+e[t+c],c+=d,l-=8);for(a=i&(1<<-l)-1,i>>=-l,l+=r;l>0;a=256*a+e[t+c],c+=d,l-=8);if(0===i)i=1-f;else{if(i===s)return a?NaN:1/0*(h?-1:1);a+=Math.pow(2,r),i-=f}return(h?-1:1)*a*Math.pow(2,i-r)},n.write=function(e,t,n,r,o,i){var a,u,s,f=8*i-o-1,l=(1<<f)-1,c=l>>1,d=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,h=r?0:i-1,y=r?1:-1,m=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(u=isNaN(t)?1:0,a=l):(a=Math.floor(Math.log(t)/Math.LN2),t*(s=Math.pow(2,-a))<1&&(a--,s*=2),(t+=a+c>=1?d/s:d*Math.pow(2,1-c))*s>=2&&(a++,s/=2),a+c>=l?(u=0,a=l):a+c>=1?(u=(t*s-1)*Math.pow(2,o),a+=c):(u=t*Math.pow(2,c-1)*Math.pow(2,o),a=0));o>=8;e[n+h]=255&u,h+=y,u/=256,o-=8);for(a=a<<o|u,f+=o;f>0;e[n+h]=255&a,h+=y,a/=256,f-=8);e[n+h-y]|=128*m}}).call(this,e("e/U+97"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\ieee754\\index.js","/..\\..\\node_modules\\ieee754")},{buffer:2,"e/U+97":4}],4:[function(e,t,n){(function(e,n,r,o,i,a,u,s,f){function l(){}(e=t.exports={}).nextTick=function(){var e="undefined"!=typeof window&&window.setImmediate,t="undefined"!=typeof window&&window.postMessage&&window.addEventListener;if(e)return function(e){return window.setImmediate(e)};if(t){var n=[];return window.addEventListener("message",function(e){var t=e.source;t!==window&&null!==t||"process-tick"!==e.data||(e.stopPropagation(),n.length>0&&n.shift()())},!0),function(e){n.push(e),window.postMessage("process-tick","*")}}return function(e){setTimeout(e,0)}}(),e.title="browser",e.browser=!0,e.env={},e.argv=[],e.on=l,e.addListener=l,e.once=l,e.off=l,e.removeListener=l,e.removeAllListeners=l,e.emit=l,e.binding=function(e){throw new Error("process.binding is not supported")},e.cwd=function(){return"/"},e.chdir=function(e){throw new Error("process.chdir is not supported")}}).call(this,e("e/U+97"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\process\\browser.js","/..\\..\\node_modules\\process")},{buffer:2,"e/U+97":4}],5:[function(e,t,n){(function(e,t,r,o,i,a,u,s,f){function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),d=function(){function e(){l(this,e)}return c(e,[{key:"createEmployees",value:function(){var e=1;return[{id:e++,name:"Столпнер Андрей Сергеевич",position:"Front-end developer",countDaysHoli:24},{id:e++,name:"Столпнер Сергей Сергеевич",position:"System Administrator",countDaysHoli:24},{id:e++,name:"Сукора Станислав Игоревич",position:"Back-end developer",countDaysHoli:24},{id:e++,name:"Довгаль Алексей Владимирович",position:"Front-end developer",countDaysHoli:24},{id:e++,name:"Иванов Иван Иванович",position:"Front-end developer",countDaysHoli:24},{id:e++,name:"Паныш Илья Владимирович",position:"Back-end developer",countDaysHoli:24}]}}]),e}();n.default=d}).call(this,e("e/U+97"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/DemoData.js","/")},{buffer:2,"e/U+97":4}],6:[function(e,t,n){(function(t,r,o,i,a,u,s,f,l){function c(e){return e&&e.__esModule?e:{default:e}}function d(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var h=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),y=c(e("./../utils/DB")),m=c(e("./../utils/BusinessRequirements")),p=new y.default,v=new m.default,g=document.querySelector(".workPlace"),b=function(){function e(){d(this,e),this.arrDate=[],this.arrEmployees=[],this.currentEmployee=[],this.currentDate=[],this.diffBetweenOldDate=0}return h(e,[{key:"init",value:function(){var e=this,t=location.hash.split("&");p.fetch("holidays").then(function(n){e.arrDate=n;var r=t[0].slice(4);e.currentDate=n.filter(function(e){return e.idHoli===+r}),e.diffBetweenOldDate=v.toCountDiffBetweenDates(e.currentDate[0].dateFrom,e.currentDate[0].dateTo)}).then(function(){return p.fetch("employees")}).then(function(n){e.arrEmployees=n;var r=t[1].slice(8);e.currentEmployee=n.filter(function(e){return e.id===+r})}).then(function(){return e.renderPage()})}},{key:"renderPage",value:function(){g.innerHTML='\n        <div class="container">\n        <div class="form-group">\n            <label><b>'+this.currentEmployee[0].name+'</b></label><br>\n            <label for="dateFrom">Дата начало отпуска: </label>\n            <input type="date" name="calendar" class="dateFrom form-control" id="dateFrom">\n            <label for="dateTo">Дата конца отпуска</label>\n            <input type="date" name="calendar" class="dateTo form-control" id="dateTo">\n            <div class="info"></div>\n            <input class="submitHoliday btn btn-outline-primary" type="submit" value="Submit">\n        </div>\n    </div>\n          ',this.addHandlerEvent()}},{key:"addHandlerEvent",value:function(){document.querySelector(".submitHoliday").addEventListener("click",this.checkingData.bind(this))}},{key:"checkingData",value:function(){var e=this,t=document.querySelector(".info"),n=document.querySelector(".dateFrom"),r=document.querySelector(".dateTo"),o=this.currentEmployee[0].countDaysHoli+this.diffBetweenOldDate,i=this.currentEmployee[0].id,a=this.currentEmployee[0].position;Promise.resolve().then(function(){e.arrDate.forEach(function(t,n){t.idHoli===e.currentDate[0].idHoli&&e.arrDate.splice(n,1)})}).then(function(){return v.checkingData(o,n.value,r.value,i,a,e.arrDate)}).then(function(){return t.innerHTML='<div class="alert alert-success" role="alert">Счастливого Вам отдыха</div>'}).then(function(){return e.addEmployeeAfterCheckingValid(i,n.value,r.value)}).then(function(){return p.fetch("employees")}).then(function(t){var o=v.toCountDiffBetweenDates(n.value,r.value);t.forEach(function(t,n){t.id===i&&(t.countDaysHoli=t.countDaysHoli+e.diffBetweenOldDate-o)}),p.setItem("employees",t)}).catch(function(e){t.innerHTML='<div class="alert alert-danger" role="alert">'+e+"</div>"})}},{key:"addEmployeeAfterCheckingValid",value:function(e,t,n){var r={idHoli:this.arrDate.length+1,id:e,dateFrom:t,dateTo:n};this.arrDate.push(r),p.setItem("holidays",this.arrDate)}}]),e}();n.default=b}).call(this,e("e/U+97"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/components\\EditHolidaysPage.js","/components")},{"./../utils/BusinessRequirements":14,"./../utils/DB":15,buffer:2,"e/U+97":4}],7:[function(e,t,n){(function(t,r,o,i,a,u,s,f,l){function c(e){return e&&e.__esModule?e:{default:e}}function d(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var h=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),y=c(e("./../utils/DB")),m=c(e("./../utils/BusinessRequirements")),p=new y.default,v=new m.default,g=document.querySelector(".workPlace"),b=function(){function e(){d(this,e)}return h(e,[{key:"renderPage",value:function(){var e=this;p.fetch("employees").then(function(t){var n='<select class="form-control" id="exampleFormControlSelect1">';t.forEach(function(e){n+="<option>"+e.name+"</option>"},e),g.innerHTML='\n      <div class="container">\n      <div class="form-group">\n          <label for="exampleFormControlSelect1">Выбор сотрудника</label>\n          '+n+'\n          </select>\n          <label for="dateFrom">Дата начало отпуска: </label>\n          <input type="date" name="calendar" class="dateFrom form-control" id="dateFrom">\n          <label for="dateTo">Дата конца отпуска</label>\n          <input type="date" name="calendar" class="dateTo form-control" id="dateTo">\n          <div class="info"></div>\n          <input class="submitHoliday btn btn-outline-primary" type="submit" value="Submit">\n      </div>\n  </div>\n        ',e.addHandlerEvent()})}},{key:"addHandlerEvent",value:function(){document.querySelector(".submitHoliday").addEventListener("click",this.checkingData.bind(this))}},{key:"checkingData",value:function(){var e=this,t=void 0,n=void 0,r=void 0,o=document.querySelector(".info"),i=document.querySelector(".dateFrom"),a=document.querySelector(".dateTo"),u=document.querySelector("#exampleFormControlSelect1"),s=u.options[u.selectedIndex].value;p.fetch("employees").then(function(e){e.forEach(function(e){if(e.name===s)return n=e.id,r=e.position,t=e.countDaysHoli})}).then(function(){return v.checkingData(t,i.value,a.value,n,r)}).then(function(){return o.innerHTML='<div class="alert alert-success" role="alert">Счастливого Вам отдыха</div>'}).then(function(){return e.addEmployeeAfterCheckingValid(n,i.value,a.value)}).then(function(){return p.fetch("employees")}).then(function(e){var t=v.toCountDiffBetweenDates(i.value,a.value);e.forEach(function(e,r){e.id===n&&(e.countDaysHoli=e.countDaysHoli-t)}),p.setItem("employees",e)}).catch(function(e){o.innerHTML='<div class="alert alert-danger" role="alert">'+e+"</div>"})}},{key:"addEmployeeAfterCheckingValid",value:function(e,t,n){p.fetch("holidays").then(function(r){var o={idHoli:r.length+1,id:e,dateFrom:t,dateTo:n};r.push(o),p.setItem("holidays",r)}).catch(function(){var r=[{idHoli:1,id:e,dateFrom:t,dateTo:n}];p.setItem("holidays",r)})}}]),e}();n.default=b}).call(this,e("e/U+97"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/components\\HolidaysPage.js","/components")},{"./../utils/BusinessRequirements":14,"./../utils/DB":15,buffer:2,"e/U+97":4}],8:[function(e,t,n){(function(t,r,o,i,a,u,s,f,l){function c(e){return e&&e.__esModule?e:{default:e}}function d(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var h=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),y=c(e("./../utils/DB")),m=c(e("./SortArr")),p=c(e("./../utils/BusinessRequirements")),v=new m.default,g=new y.default,b=new p.default,w=document.querySelector(".workPlace"),E=function(){function e(){d(this,e),this.arrDate=[],this.arrEmloyees=[]}return h(e,[{key:"init",value:function(){var e=this;g.fetch("holidays").then(function(t){return e.arrDate=t}).then(function(){return g.fetch("employees")}).then(function(t){return e.arrEmloyees=t}).then(function(){return e.renderPage()})}},{key:"renderPage",value:function(){var e=this,t="<tbody>";this.arrDate.forEach(function(n){e.arrEmloyees.forEach(function(e){if(e.id===n.id){var r=void 0,o=void 0,i=void 0,a=new Date,u=new Date(n.dateFrom),s=new Date(n.dateTo);a<u?(r="upcoming",o='<button type="button" class="editDate id_'+n.idHoli+" idEmplo_"+e.id+' btn btn-light">Изменить даты</button>',i='<button type="button" class="delData id_'+n.idHoli+" dateFrom_"+n.dateFrom+" dateTo_"+n.dateTo+" idEmplo_"+e.id+' btn btn-light">Удалить</button>'):r=a>=u&&a<=s?"present":"past",t+='\n              <tr class="'+r+'">\n                <th scope="row">'+e.id+"</th>\n                <td>"+e.name+"</td>\n                <td>"+e.position+"</td>\n                <td>"+n.dateFrom+(o||"")+(i||"")+"</td>\n                <td>"+n.dateTo+"</td>\n              </tr>\n              "}})}),w.innerHTML='\n          <table class="table table-striped">\n          <thead>\n              <tr>\n                  <th>#</th>\n                  <th>ФИО <i class="sortByFioDescending fa fa-caret-down" aria-hidden="true"></i>\n                  <i class="sortByFioАscending fa fa-caret-up" aria-hidden="true"></i>\n                  </th>\n                  <th>Должность</th>\n                  <th>Дата Начало <i class="sortByDateFromDescending fa fa-caret-down" aria-hidden="true"></i>\n                  <i class="sortByDateFromАscending fa fa-caret-up" aria-hidden="true"></i></th>\n                  <th>Дата Конца</th>\n              </tr>\n          </thead>\n          '+t+"\n          </tbody>\n          </table>\n          ",this.addHandlerEvent()}},{key:"showError",value:function(){w.innerHTML=' <div class="alert alert-warning" role="alert">\n    Нехватает данных! Добавьте отпуск для сотрудников (кнопочка выше)\n    </div>;'}},{key:"addHandlerEvent",value:function(){function e(e,t){return function(){var e=v.sort(u.arrDate,t,u.arrEmloyees);u.arrDate=e,u.renderPage()}}var t=this,n=document.querySelector(".sortByFioАscending"),r=document.querySelector(".sortByFioDescending"),o=document.querySelector(".sortByDateFromАscending"),i=document.querySelector(".sortByDateFromDescending"),a=document.querySelector("table");n.addEventListener("click",e(0,"sortByFioАscending")),r.addEventListener("click",e(0,"sortByFioDescending")),o.addEventListener("click",e(0,"sortByDateFromАscending")),i.addEventListener("click",e(0,"sortByDateFromDescending")),a.addEventListener("click",function(e){"BUTTON"==e.target.tagName&&("editDate"===e.target.classList[0]?t.eventEditeBtn(e):t.eventRemoveBtn(e))});var u=this}},{key:"eventRemoveBtn",value:function(e){var t=this,n=e.target.classList[1].slice(3),r=e.target.classList[2].slice(9),o=e.target.classList[3].slice(7),i=b.toCountDiffBetweenDates(r,o),a=e.target.classList[4].slice(8);g.fetch("holidays").then(function(e){return e.forEach(function(t,r){t.idHoli==n&&e.splice(r,1)}),e}).then(function(e){g.setItem("holidays",e),t.arrDate=e}).then(function(){return g.fetch("employees")}).then(function(e){return e.forEach(function(e){e.id==a&&(e.countDaysHoli+=i)}),e}).then(function(e){g.setItem("employees",e),t.arrEmloyees=e}).then(function(){return t.renderPage()})}},{key:"eventEditeBtn",value:function(e){location.hash=e.target.classList[1]+"&"+e.target.classList[2]}}]),e}();n.default=E}).call(this,e("e/U+97"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/components\\IndexPage.js","/components")},{"./../utils/BusinessRequirements":14,"./../utils/DB":15,"./SortArr":9,buffer:2,"e/U+97":4}],9:[function(e,t,n){(function(e,t,r,o,i,a,u,s,f){function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),d=function(){function e(){l(this,e),this.arrEmployees=[],this.arrDate=[]}return c(e,[{key:"sort",value:function(e,t,n){return this.arrDate=e,this.arrEmployees=n,"sortByFioАscending"===t?e.sort(this.sortByFioАscending.bind(this)):"sortByFioDescending"===t?e.sort(this.sortByFioDescending.bind(this)):"sortByDateFromАscending"===t?e.sort(this.sortByDateFromАscending):"sortByDateToDescending"===t?e.sort(this.sortByDateToDescending):e.sort(this.sortByDateFromDescending),e}},{key:"getUserById",value:function(e,t){return t.find(function(t){return e===t.id})}},{key:"sortByFioАscending",value:function(e,t){return e=this.getUserById(e.id,this.arrEmployees),t=this.getUserById(t.id,this.arrEmployees),e.name>t.name?1:e.name<t.name?-1:void 0}},{key:"sortByFioDescending",value:function(e,t){return e=this.getUserById(e.id,this.arrEmployees),t=this.getUserById(t.id,this.arrEmployees),e.name<t.name?1:e.name>t.name?-1:void 0}},{key:"sortByDateFromАscending",value:function(e,t){return e.dateFrom>t.dateFrom?1:e.dateFrom<t.dateFrom?-1:void 0}},{key:"sortByDateToDescending",value:function(e,t){return e.dateTo<t.dateTo?1:e.dateTo>t.dateTo?-1:void 0}},{key:"sortByDateFromDescending",value:function(e,t){return e.dateFrom<t.dateFrom?1:e.dateFrom>t.dateFrom?-1:void 0}}]),e}();n.default=d}).call(this,e("e/U+97"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/components\\SortArr.js","/components")},{buffer:2,"e/U+97":4}],10:[function(e,t,n){(function(t,n,r,o,i,a,u,s,f){var l=function(e){return e&&e.__esModule?e:{default:e}}(e("./utils/Router")),c=e("./routes/index"),d=e("./routes/addHolidays"),h=e("./routes/editHoliday"),y=[c.index,d.addHolidays,h.editHoliday];new l.default({routes:y})}).call(this,e("e/U+97"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/fake_e72e7e07.js","/")},{"./routes/addHolidays":11,"./routes/editHoliday":12,"./routes/index":13,"./utils/Router":16,buffer:2,"e/U+97":4}],11:[function(e,t,n){(function(t,r,o,i,a,u,s,f,l){Object.defineProperty(n,"__esModule",{value:!0}),n.addHolidays=void 0;var c=new(function(e){return e&&e.__esModule?e:{default:e}}(e("./../components/HolidaysPage")).default),d={name:"addHolidays",match:function(e){return"addHolidays"==e},onBeforeEnter:function(){},onEnter:function(){var e=document.querySelector(".addHolidays");e.removeEventListener("click",function(){location.hash="addHolidays"}),e.innerHTML="Назад",e.addEventListener("click",function(){location.hash=""}),c.renderPage()},onLeave:function(){}};n.addHolidays=d}).call(this,e("e/U+97"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/routes\\addHolidays.js","/routes")},{"./../components/HolidaysPage":7,buffer:2,"e/U+97":4}],12:[function(e,t,n){(function(t,r,o,i,a,u,s,f,l){Object.defineProperty(n,"__esModule",{value:!0}),n.editHoliday=void 0;var c=new(function(e){return e&&e.__esModule?e:{default:e}}(e("./../components/EditHolidaysPage")).default),d={name:"editHoliday",match:function(e){return e===e},onBeforeEnter:function(){},onEnter:function(){var e=document.querySelector(".addHolidays");e.removeEventListener("click",function(){location.hash="addHolidays"}),e.innerHTML="Назад",e.addEventListener("click",function(){location.hash=""}),c.init()},onLeave:function(){}};n.editHoliday=d}).call(this,e("e/U+97"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/routes\\editHoliday.js","/routes")},{"./../components/EditHolidaysPage":6,buffer:2,"e/U+97":4}],13:[function(e,t,n){(function(t,r,o,i,a,u,s,f,l){function c(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(n,"__esModule",{value:!0}),n.index=void 0;var d=c(e("./../components/IndexPage")),h=c(e("./../utils/DB")),y=c(e("./../DemoData")),m=new d.default,p=new h.default,v=new y.default,g={name:"index",match:"",onBeforeEnter:function(){},onEnter:function(){var e=document.querySelector(".addHolidays");e.innerHTML="Добавить отпуск сотруднику",e.addEventListener("click",function(){location.hash="addHolidays"}),p.fetch("employees").catch(function(){return p.setItem("employees",v.createEmployees())}),p.fetch("holidays").then(function(){return m.init()}).catch(function(){return m.showError()})},onLeave:function(){}};n.index=g}).call(this,e("e/U+97"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/routes\\index.js","/routes")},{"./../DemoData":5,"./../components/IndexPage":8,"./../utils/DB":15,buffer:2,"e/U+97":4}],14:[function(e,t,n){(function(t,r,o,i,a,u,s,f,l){function c(e){return e&&e.__esModule?e:{default:e}}function d(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var h=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),y=c(e("./DB")),m=c(e("./../components/SortArr")),p=new y.default,v=new m.default,g=function(){function e(){d(this,e),this.arrEmployees=[],this.arrDate=[]}return h(e,[{key:"checkingData",value:function(e,t,n,r,o,i){var a=this;return t&&n?Promise.resolve().then(function(){return a.toCountDiffBetweenDates(t,n)}).then(function(t){return a.checkingMaxCountDay(e,t)}).then(function(e){return a.checkingMinDaysOnHoliday(e)}).then(function(e){return a.checkingMaxDaysOnHoliday(e)}).then(function(){return a.filterByPosition(r,o,i)}).then(function(){return a.filterByDateRange(t,n)}).then(function(e){return a.chackingCountEmployeeInHoli(e)}).then(function(){return a.filterById(r)}).then(function(e){return a.chackingDateWithCurrent(e,t)}).then(function(e){return v.sort(e,"sortByDateToDescending")}).then(function(e){return e.find(function(e){if(e.dateTo<=t)return!0})}).then(function(e){if(!e)return Promise.resolve();var n=a.toCountDiffBetweenDates(e.dateFrom,e.dateTo),r=a.toCountDiffBetweenDates(e.dateTo,t);return a.checkingRangeDates(r,n)}):Promise.reject("Выберите дату")}},{key:"checkingMaxCountDay",value:function(e,t){return e<=1?Promise.reject("Данный сотрудник неможет больше выходить в отпуск в данном году"):t>e?Promise.reject("Период отпуска составляет "+t+" дн., а у данного сотрудника осталось "+e+" дн."):Promise.resolve(t)}},{key:"checkingMinDaysOnHoliday",value:function(e){return e<2?Promise.reject("Выбранный диапазон дат не соответсвуют правилу (минимальное кол. дней в отпуске = 2)"):Promise.resolve(e)}},{key:"checkingMaxDaysOnHoliday",value:function(e){return e>15?Promise.reject("Выбранный диапазон дат не соответсвуют правилу (максимальное кол. дней в отпуске = 15), а выбранно "+e+" дн."):Promise.resolve(e)}},{key:"chackingCountEmployeeInHoli",value:function(e){return 100*(e.length+1)/this.arrEmployees.length>50?Promise.reject("По данной специальности нельзя уходить в отпуск (в отпуске имеют право находиться не более 50% сотрудников одной должности)"):Promise.resolve()}},{key:"chackingDateWithCurrent",value:function(e,t){return e.find(function(e){if(e.dateFrom==t)return!0})?Promise.reject("Данные даты уже имеются"):Promise.resolve(e)}},{key:"checkingRangeDates",value:function(e,t){if((t+=2)>e){var n=t-e;return Promise.reject("Выбранный диапазон дат не соответсвуют правилу (минимальный период между периодами отпуска равен размеру прошлого отпуска), Вы еще должны проработать "+n+" дн.")}}},{key:"filterByPosition",value:function(e,t,n){var r=this;return Promise.resolve().then(function(){return p.fetch("holidays")}).catch(function(){return[]}).then(function(e){return r.arrDate=n||e}).then(function(){return p.fetch("employees")}).then(function(e){return r.arrEmployees=e}).then(function(){r.arrEmployees=r.filterUserByPositiom(t,r.arrEmployees),r.arrDate=r.arrDate.filter(function(e){var t=v.getUserById(e.id,r.arrEmployees);if(t&&e.id===t.id)return e.id})})}},{key:"filterByDateRange",value:function(e){return this.arrDate.filter(function(t){return e>=t.dateFrom&&e<=t.dateTo})}},{key:"filterById",value:function(e){var t=this;return Promise.resolve().then(function(){return t.arrDate.filter(function(t){if(t.id===e)return t.id})})}},{key:"filterUserByPositiom",value:function(e,t){return t.filter(function(t){return e===t.position})}},{key:"toCountDiffBetweenDates",value:function(e,t){return e=new Date(e),((t=new Date(t))-e)/1e3/60/60/24+1}}]),e}();n.default=g}).call(this,e("e/U+97"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/utils\\BusinessRequirements.js","/utils")},{"./../components/SortArr":9,"./DB":15,buffer:2,"e/U+97":4}],15:[function(e,t,n){(function(e,t,r,o,i,a,u,s,f){function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),d=function(){function e(){l(this,e)}return c(e,[{key:"setItem",value:function(e,t){return Promise.resolve(localStorage.setItem(e,JSON.stringify(t)))}},{key:"fetch",value:function(e){var t=JSON.parse(localStorage.getItem(e));return t?Promise.resolve(t):Promise.reject()}}]),e}();n.default=d}).call(this,e("e/U+97"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/utils\\DB.js","/utils")},{buffer:2,"e/U+97":4}],16:[function(e,t,n){(function(e,t,r,o,i,a,u,s,f){Object.defineProperty(n,"__esModule",{value:!0});var l=function(e,t){this.routes=e.routes,this.eventBus=t,this.init()};l.prototype={init:function(){var e=this;window.addEventListener("hashchange",function(t){return e.handleUrl(t.oldURL.split("#")[1]||"",t.newURL.split("#")[1])}),this.handleUrl(void 0,window.location.hash.slice(1))},getParam:function(e,t){return(e.match(t.match)||[])[1]},handleUrl:function(e,t){var n=this,r=this.routes.find(function(e){return"string"==typeof e.match?(t=t.split("?")[0])===e.match:"function"==typeof e.match?e.match(t):e.match instanceof RegExp?t.match(e.match):void 0});if(void 0!==e)var o=this.routes.find(function(t){return"string"==typeof t.match?e===t.match:"function"==typeof t.match?t.match(e):t.match instanceof RegExp?e.match(t.match):void 0});var i=this.getParam(t,r);Promise.resolve().then(function(){return o&&o.onLeave&&o.onLeave(e.split("=")[1])}).then(function(){return r&&r.onBeforeEnter&&r.onBeforeEnter(i)}).then(function(){return r&&r.onEnter&&r.onEnter(n.eventBus,i)})}},n.default=l}).call(this,e("e/U+97"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/utils\\Router.js","/utils")},{buffer:2,"e/U+97":4}]},{},[10]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6L1VzZXJzL2FuZHJlL0Rlc2t0b3AvanMtLXRlc3QtYWRmb3JtL25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJDOi9Vc2Vycy9hbmRyZS9EZXNrdG9wL2pzLS10ZXN0LWFkZm9ybS9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2xpYi9iNjQuanMiLCJDOi9Vc2Vycy9hbmRyZS9EZXNrdG9wL2pzLS10ZXN0LWFkZm9ybS9ub2RlX21vZHVsZXMvYnVmZmVyL2luZGV4LmpzIiwiQzovVXNlcnMvYW5kcmUvRGVza3RvcC9qcy0tdGVzdC1hZGZvcm0vbm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanMiLCJDOi9Vc2Vycy9hbmRyZS9EZXNrdG9wL2pzLS10ZXN0LWFkZm9ybS9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwiQzovVXNlcnMvYW5kcmUvRGVza3RvcC9qcy0tdGVzdC1hZGZvcm0vc3JjL3NjcmlwdC9EZW1vRGF0YS5qcyIsIkM6L1VzZXJzL2FuZHJlL0Rlc2t0b3AvanMtLXRlc3QtYWRmb3JtL3NyYy9zY3JpcHQvY29tcG9uZW50cy9FZGl0SG9saWRheXNQYWdlLmpzIiwiQzovVXNlcnMvYW5kcmUvRGVza3RvcC9qcy0tdGVzdC1hZGZvcm0vc3JjL3NjcmlwdC9jb21wb25lbnRzL0hvbGlkYXlzUGFnZS5qcyIsIkM6L1VzZXJzL2FuZHJlL0Rlc2t0b3AvanMtLXRlc3QtYWRmb3JtL3NyYy9zY3JpcHQvY29tcG9uZW50cy9JbmRleFBhZ2UuanMiLCJDOi9Vc2Vycy9hbmRyZS9EZXNrdG9wL2pzLS10ZXN0LWFkZm9ybS9zcmMvc2NyaXB0L2NvbXBvbmVudHMvU29ydEFyci5qcyIsIkM6L1VzZXJzL2FuZHJlL0Rlc2t0b3AvanMtLXRlc3QtYWRmb3JtL3NyYy9zY3JpcHQvZmFrZV9lNzJlN2UwNy5qcyIsIkM6L1VzZXJzL2FuZHJlL0Rlc2t0b3AvanMtLXRlc3QtYWRmb3JtL3NyYy9zY3JpcHQvcm91dGVzL2FkZEhvbGlkYXlzLmpzIiwiQzovVXNlcnMvYW5kcmUvRGVza3RvcC9qcy0tdGVzdC1hZGZvcm0vc3JjL3NjcmlwdC9yb3V0ZXMvZWRpdEhvbGlkYXkuanMiLCJDOi9Vc2Vycy9hbmRyZS9EZXNrdG9wL2pzLS10ZXN0LWFkZm9ybS9zcmMvc2NyaXB0L3JvdXRlcy9pbmRleC5qcyIsIkM6L1VzZXJzL2FuZHJlL0Rlc2t0b3AvanMtLXRlc3QtYWRmb3JtL3NyYy9zY3JpcHQvdXRpbHMvQnVzaW5lc3NSZXF1aXJlbWVudHMuanMiLCJDOi9Vc2Vycy9hbmRyZS9EZXNrdG9wL2pzLS10ZXN0LWFkZm9ybS9zcmMvc2NyaXB0L3V0aWxzL0RCLmpzIiwiQzovVXNlcnMvYW5kcmUvRGVza3RvcC9qcy0tdGVzdC1hZGZvcm0vc3JjL3NjcmlwdC91dGlscy9Sb3V0ZXIuanMiXSwibmFtZXMiOlsiZSIsInQiLCJuIiwiciIsInByb2Nlc3MiLCJnbG9iYWwiLCJCdWZmZXIiLCJfX2FyZ3VtZW50MCIsIl9fYXJndW1lbnQxIiwiX19hcmd1bWVudDIiLCJfX2FyZ3VtZW50MyIsIl9fZmlsZW5hbWUiLCJfX2Rpcm5hbWUiLCJsb29rdXAiLCJleHBvcnRzIiwiVVBQRVIiLCJBcnJheSIsInYiLCJhcnIiLCJsZW5ndGgiLCJwbGFjZUhvbGRlcnMiLCJudW0iLCJpIiwidGVtcCIsImV4dHJhQnl0ZXMiLCJvdXRwdXQiLCJzdWJqZWN0IiwiZW5jb2RpbmciLCJub1plcm8iLCJidWYiLCJ0aGlzIiwiX2hleFdyaXRlIiwic3RyaW5nIiwib2Zmc2V0IiwicmVtYWluaW5nIiwiYnl0ZSIsIl91dGY4V3JpdGUiLCJfYXNjaWlXcml0ZSIsIl9iaW5hcnlXcml0ZSIsIl9iYXNlNjRXcml0ZSIsIl91dGYxNmxlV3JpdGUiLCJfYmFzZTY0U2xpY2UiLCJzdGFydCIsImVuZCIsIl91dGY4U2xpY2UiLCJ0bXAiLCJfYXNjaWlTbGljZSIsInJldCIsIl9iaW5hcnlTbGljZSIsIl9oZXhTbGljZSIsImxlbiIsIm91dCIsIl91dGYxNmxlU2xpY2UiLCJyZXMiLCJfcmVhZFVJbnQxNiIsImxpdHRsZUVuZGlhbiIsIm5vQXNzZXJ0IiwidmFsIiwiX3JlYWRVSW50MzIiLCJfcmVhZEludDE2IiwiX3JlYWRJbnQzMiIsIl9yZWFkRmxvYXQiLCJfcmVhZERvdWJsZSIsIl93cml0ZVVJbnQxNiIsInZhbHVlIiwiX3dyaXRlVUludDMyIiwiX3dyaXRlSW50MTYiLCJfd3JpdGVJbnQzMiIsIl93cml0ZUZsb2F0IiwiX3dyaXRlRG91YmxlIiwic3RyaW5ndHJpbSIsInN0ciIsInRyaW0iLCJjbGFtcCIsImluZGV4IiwiZGVmYXVsdFZhbHVlIiwiY29lcmNlIiwiaXNBcnJheSIsImlzQXJyYXlpc2giLCJ0b0hleCIsInV0ZjhUb0J5dGVzIiwiYnl0ZUFycmF5IiwiYXNjaWlUb0J5dGVzIiwidXRmMTZsZVRvQnl0ZXMiLCJsbyIsImhpIiwiYmFzZTY0VG9CeXRlcyIsImJsaXRCdWZmZXIiLCJzcmMiLCJkc3QiLCJkZWNvZGVVdGY4Q2hhciIsInZlcmlmdWludCIsIm1heCIsInZlcmlmc2ludCIsIm1pbiIsInZlcmlmSUVFRTc1NCIsImFzc2VydCIsInRlc3QiLCJtZXNzYWdlIiwiX3R5cGVvZiIsIlN5bWJvbCIsIl90eXBlb2YyIiwiaXRlcmF0b3IiLCJvYmoiLCJiYXNlNjQiLCJyZXF1aXJlIiwiaWVlZTc1NCIsIlNsb3dCdWZmZXIiLCJJTlNQRUNUX01BWF9CWVRFUyIsInBvb2xTaXplIiwiX3VzZVR5cGVkQXJyYXlzIiwiaXNFbmNvZGluZyIsInRvTG93ZXJDYXNlIiwiaXNCdWZmZXIiLCJiIiwiX2lzQnVmZmVyIiwiYnl0ZUxlbmd0aCIsImNvbmNhdCIsImxpc3QiLCJ0b3RhbExlbmd0aCIsInBvcyIsInByb3RvdHlwZSIsIndyaXRlIiwidW5kZWZpbmVkIiwic3dhcCIsInRvU3RyaW5nIiwidG9KU09OIiwiY29weSIsInRhcmdldCIsInRhcmdldF9zdGFydCIsInNsaWNlIiwibmV3QnVmIiwiZ2V0Iiwic2V0IiwicmVhZFVJbnQ4IiwicmVhZFVJbnQxNkxFIiwicmVhZFVJbnQxNkJFIiwicmVhZFVJbnQzMkxFIiwicmVhZFVJbnQzMkJFIiwicmVhZEludDgiLCJyZWFkSW50MTZMRSIsInJlYWRJbnQxNkJFIiwicmVhZEludDMyTEUiLCJyZWFkSW50MzJCRSIsInJlYWRGbG9hdExFIiwicmVhZEZsb2F0QkUiLCJyZWFkRG91YmxlTEUiLCJyZWFkRG91YmxlQkUiLCJ3cml0ZVVJbnQ4Iiwid3JpdGVVSW50MTZMRSIsIndyaXRlVUludDE2QkUiLCJ3cml0ZVVJbnQzMkxFIiwid3JpdGVVSW50MzJCRSIsIndyaXRlSW50OCIsIndyaXRlSW50MTZMRSIsIndyaXRlSW50MTZCRSIsIndyaXRlSW50MzJMRSIsIndyaXRlSW50MzJCRSIsIndyaXRlRmxvYXRMRSIsIndyaXRlRmxvYXRCRSIsIndyaXRlRG91YmxlTEUiLCJ3cml0ZURvdWJsZUJFIiwiZmlsbCIsImluc3BlY3QiLCJ0b0FycmF5QnVmZmVyIiwiYnVmZmVyIiwiQlAiLCJfYXVnbWVudCIsInJlYWQiLCJpc0xFIiwibUxlbiIsIm5CeXRlcyIsIm0iLCJkIiwibkJpdHMiLCJlTGVuIiwiZUJpYXMiLCJJbmZpbml0eSIsImMiLCJlTWF4IiwiTE4yIiwibm9vcCIsIm1vZHVsZSIsIm5leHRUaWNrIiwic2V0SW1tZWRpYXRlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImYiLCJzb3VyY2UiLCJzdG9wUHJvcGFnYXRpb24iLCJzaGlmdCIsImZuIiwidGl0bGUiLCJicm93c2VyIiwiZW52IiwiYXJndiIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwiYmluZGluZyIsIm5hbWUiLCJjd2QiLCJjaGRpciIsImRpciIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIl9jcmVhdGVDbGFzcyIsIkRlbW9EYXRhIiwiY291bnQiLCJkZWZhdWx0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9EQjIiLCJfQnVzaW5lc3NSZXF1aXJlbWVudHMyIiwiZGIiLCJiciIsInBsYWNlUmVuZGVyIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiRWRpdEhvbGlkYXlzUGFnZSIsImFyckRhdGUiLCJpZEhvbGkiLCJkYXRlVG8iLCJhcnJFbXBsb3llZXMiLCJpZEVtcGxveWVlIiwicmVuZGVyUGFnZSIsImFkZEhhbmRsZXJFdmVudCIsImRpZmZCZXR3ZWVuT2xkRGF0ZSIsImlkIiwicG9zaXRpb24iLCJkaWZmQmV0d2VlbkRhdGUiLCJkYXRlRnJvbSIsImhvbGlkYXkiLCJIb2xpZGF5c1BhZ2UiLCJfdGhpcyIsImNvdW50RGF5c0hvbGkiLCJwb3NpdGlvbkVtcGxveWVlIiwiZGF0YSIsIl9Tb3J0QXJyMiIsInNvcnRBcnIiLCJJbmRleFBhZ2UiLCJhcnJFbWxveWVlcyIsIkRhdGUiLCJzb3J0ZWRBcnIiLCJldiIsImRpZmZCZXR3ZWVuRGF0ZXMiLCJuZXdBcnIiLCJTb3J0QXJyIiwic29ydEJ5RGF0ZUZyb23QkHNjZW5kaW5nIiwic29ydEJ5RGF0ZVRvRGVzY2VuZGluZyIsInNvcnRCeURhdGVGcm9tRGVzY2VuZGluZyIsIl9Sb3V0ZXIyIiwiX2luZGV4IiwiX2FkZEhvbGlkYXlzIiwiX2VkaXRIb2xpZGF5Iiwicm91dGVzIiwiYWRkSG9saWRheXMiLCJlZGl0SG9saWRheSIsImhvbGlkYXlzUGFnZSIsImVkaXRIb2xpZGF5c1BhZ2UiLCJ0ZXh0IiwiaW5pdCIsIl9JbmRleFBhZ2UyIiwiX0RlbW9EYXRhMiIsImluZGV4UGFnZSIsImRlbW9EYXRhIiwiY3JlYXRlRW1wbG95ZWVzIiwic2hvd0Vycm9yIiwiQnVzaW5lc3NSZXF1aXJlbWVudHMiLCJmaWx0ZXJlZEFyciIsInJlc29sdmUiLCJkaWZmQmV0d2VlbkRhdGVMYXN0SG9saSIsImRpZmZCZXR3ZWVuRGF0ZXNXaXRoTEgiLCJEQiIsImtleSIsInJlamVjdCIsIlJvdXRlciIsIm9wdGlvbnMiLCJldmVudEJ1cyIsIm1hdGNoIiwibmV3Um91dGUiLCJvbGRSb3V0ZSIsImN1cnJlbnRSb3V0ZSIsImN1cnJlbnRQYXJhbSJdLCJtYXBwaW5ncyI6InFPQUFBLFNBQUFBLEVBQUFDLEVBQUFDLEVBQUFDLGtZQUFBLHNCQ0FBLFNBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEdBR0EsSUFBQUMsRUFDQSxvRUFDQSxTQUFBQyxvQ0FlQSwrREFJQSxZQUNBQyxhQUNBLDBEQWpCQUMsdUJBRUEsb0JBQ0Esb0JBQ0Esb0JBQ0Esb0JBQ0Esb0JBQ0Esb0JBQ0Esa0RBb0NBQyxnQkF2QkFDLGtDQUdBLDBEQVFBQyxxREFDQSx1QkFHQUMsc0JBR0FELGFBRUEsb0hBT0EsT0FDQSxpQkFDQSxLQUNBLHNCQUtBLDJDQURBLDBFQUdBLE1BQ0EsT0FDQSxRQUdBRCw2REFZQUcsT0FSQUMsRUFJQUMsRUFDQUosYUFKQSxJQUVBLDRGQVNBLG9DQUtBLFdBS0FLLFFBQ0EscUJBQ0EsS0FDQSxhQUNBLE9BQ0EsS0FDQSxXQUNBLHdDQUNBLEtBQ0EsY0FDQSxjQUNBLE9BQ0EsV0FJQUMsR0E3R0EsaUNBa0hBWCwwU0N2SEEsU0FBQVYsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0F1REEsU0FBQU4sRUFBQW9CLEVBQUFDLEVBQUFDLDRDQUVBQSxrQ0FFQUYseUNBS0FBLHFCQUVBLFFBS0FQLHVHQUVBLDJFQUVBVSxnREFHQVYsUUFHQVcsYUFDQVgsZUFDQSxPQUdBRyw2REFHQUkseUVBSUFKLG9DQUdBSyxxRUFHQSxTQUlBRSxFQXlGQSxTQUFBRSxFQUFBRixFQUFBRyxFQUFBQyxFQUFBZCxnQkFFQSxpQkFDQWMsY0FJQWQsVUFFQWUsS0FKQUEsVUFTQWYsZ0JBQ0Esa0NBR0EsdUJBRUEsZ0NBQ0EsZ0JBQ0EsNkJBQ0FnQix5QkFFQSxJQUNBYixFQUVBLFNBQUFjLEVBQUFQLEVBQUFHLEVBQUFDLEVBQUFkLHFDQUVBQSxHQUdBLFNBQUFrQixFQUFBUixFQUFBRyxFQUFBQyxFQUFBZCxxQ0FFQUEsR0FHQSxTQUFBbUIsRUFBQVQsRUFBQUcsRUFBQUMsRUFBQWQsa0JBRUFBLEdBRUEsU0FBQW9CLEVBQUFWLEVBQUFHLEVBQUFDLEVBQUFkLHFDQUVBQSxHQUdBLFNBQUFxQixFQUFBWCxFQUFBRyxFQUFBQyxFQUFBZCxxQ0FFQUEsR0E2SUEsU0FBQXNCLEVBQUFaLEVBQUFhLEVBQUFDLDhDQUdBZCw2QkFFQWMsSUFHQSxTQUFBQyxFQUFBZixFQUFBYSxFQUFBQyxTQUVBLEtBQ0EsdUJBQ0FBLGdFQUlBckIsTUFDQSx5QkFFQSxlQUlBdUIsR0FFQSxTQUFBQyxFQUFBakIsRUFBQWEsRUFBQUMsU0FFQSx1QkFDQUEsZ0RBR0FyQixXQUNBeUIsRUFFQSxTQUFBQyxFQUFBbkIsRUFBQWEsRUFBQUMsZ0JBRUFBLEdBRUEsU0FBQU0sRUFBQXBCLEVBQUFhLEVBQUFDLFdBRUF4QixxQkFFQSxzQkFDQStCLGFBRUEsc0JBRUE1QixXQUVBNkIsRUFFQSxTQUFBQyxFQUFBdkIsRUFBQWEsRUFBQUMsdUJBRUFBLEtBQ0EsbURBRUEsbUJBRUFVLEVBMENBLFNBQUFDLEVBQUF6QixFQUFBSSxFQUFBc0IsRUFBQUMsNkJBR0Esb0RBQ0EsaUNBQ0EsZ0RBR0FyQyx1QkFHQXNDLGdCQUVBeEIsc0JBQ0EsYUFFQSxpQkFDQSxLQUVBd0IsR0FVQSxTQUFBQyxFQUFBN0IsRUFBQUksRUFBQXNCLEVBQUFDLDZCQUdBLG9EQUNBLGlDQUNBLGdEQUdBckMsdUJBR0FzQyw4QkFFQSx1QkFDQSxRQUNBeEIsMkJBQ0EsdUJBRUEsdUJBQ0Esa0JBQ0Esa0JBQ0EsR0FFQXdCLEdBc0JBLFNBQUFFLEVBQUE5QixFQUFBSSxFQUFBc0IsRUFBQUMsZ0NBR0Esb0RBQ0EsaUNBQ0EsK0NBR0FyQyx3QkFHQSxVQUNBLHVCQUNBc0MsR0FVQSxTQUFBRyxFQUFBL0IsRUFBQUksRUFBQXNCLEVBQUFDLGdDQUdBLG9EQUNBLGlDQUNBLCtDQUdBckMsd0JBR0EsVUFDQSxpQ0FDQXNDLEdBVUEsU0FBQUksRUFBQWhDLEVBQUFJLEVBQUFzQixFQUFBQyxvQ0FHQSw0Q0FDQSx3REFHQSxHQVVBLFNBQUFNLEVBQUFqQyxFQUFBSSxFQUFBc0IsRUFBQUMsb0NBR0EsNENBQ0Esd0RBR0EsR0F1QkEsU0FBQU8sRUFBQWxDLEVBQUFtQyxFQUFBL0IsRUFBQXNCLEVBQUFDLDhCQUdBLHVDQUNBLG9EQUNBLGlDQUNBLDRDQUNBLGdCQUdBckMsc0ZBSUEsWUFXQSxTQUFBOEMsRUFBQXBDLEVBQUFtQyxFQUFBL0IsRUFBQXNCLEVBQUFDLDhCQUdBLHVDQUNBLG9EQUNBLGlDQUNBLDRDQUNBLHFCQUdBckMsK0VBSUEsSUF3QkEsU0FBQStDLEVBQUFyQyxFQUFBbUMsRUFBQS9CLEVBQUFzQixFQUFBQyw4QkFHQSx1Q0FDQSxvREFDQSxpQ0FDQSxtREFDQSxhQUdBckMsNkNBR0FxQyxJQVVBLFNBQUFXLEVBQUF0QyxFQUFBbUMsRUFBQS9CLEVBQUFzQixFQUFBQyw4QkFHQSx1Q0FDQSxvREFDQSxpQ0FDQSx3REFDQSxrQkFHQXJDLGtEQUdBcUMsSUFVQSxTQUFBWSxFQUFBdkMsRUFBQW1DLEVBQUEvQixFQUFBc0IsRUFBQUMsOEJBR0EsdUNBQ0Esb0RBQ0EsaUNBQ0EsbUVBQ0EsNkJBR0FyQywyQkFHQSxHQVVBLFNBQUFrRCxFQUFBeEMsRUFBQW1DLEVBQUEvQixFQUFBc0IsRUFBQUMsOEJBR0EsdUNBQ0Esb0RBQ0EsaUNBQ0Esb0VBQ0EsOEJBR0FyQywyQkFHQSxHQXNFQSxTQUFBbUQsRUFBQUMsbUJBRUFDLDhCQUNBLElBNERBLFNBQUFDLEVBQUFDLEVBQUF4QixFQUFBeUIsNEJBRUFBLGFBRUF6QixPQUNBd0IsTUFDQXhCLE1BQ0F3QixFQUNBLEVBRUEsU0FBQUUsRUFBQXpELHlCQUtBQSxRQUNBQSxFQUVBLFNBQUEwRCxFQUFBbkQsMkNBR0EsdURBQ0FBLEdBRUEsU0FBQW9ELEVBQUFwRCw0RUFFQSwwQkFFQSxTQUFBcUQsRUFBQTdFLDhCQUVBLGVBQ0EsSUFFQSxTQUFBOEUsRUFBQVQsbUNBR0Esb0JBQ0FqRCx5Q0FDQSxPQUNBQSxzQkFDQUEsaUVBQ0EsNkNBRUEsYUFJQTJELEVBRUEsU0FBQUMsRUFBQVgsMENBS0EsNEJBRUFVLEVBRUEsU0FBQUUsRUFBQVosZUFFQWEsNENBR0E5RCxLQUNBLE1BQ0EsV0FDQThELFVBQ0FDLFVBR0FKLEVBRUEsU0FBQUssRUFBQWYsd0JBRUFBLEdBRUEsU0FBQWdCLEVBQUFDLEVBQUFDLEVBQUF4RCxFQUFBZCwrREFLQUcsVUFFQUEsRUFFQSxTQUFBb0UsRUFBQW5CLGlDQUdBQSwrQ0FVQSxTQUFBb0IsRUFBQTNCLEVBQUE0Qix3QkFFQSxnREFDQSxtRUFDQSxtRUFDQSxvQ0FFQSxTQUFBQyxFQUFBN0IsRUFBQTRCLEVBQUFFLHdCQUVBLGdEQUNBLGtEQUNBLGdFQUNBLG9DQUVBLFNBQUFDLEVBQUEvQixFQUFBNEIsRUFBQUUsd0JBRUEsZ0RBQ0Esa0RBQ0EsNENBRUEsU0FBQUUsRUFBQUMsRUFBQUMsNEJBRUEsb0JBcGhDQSxJQUFBQyxFQUFBLG1CQUFBQyxRQUFBLFdBQUFDLFNBQUFELE9BQUFFLFVBQUEsU0FBQUMseUxBU0FDLEVBQUFDLEVBQUEsYUFDQUMsRUFBQUQsRUFDQSxXQUNBM0YsRUFBQVIsT0FBQUEsRUFDQVEsRUFBQTZGLFdBQUFyRyxFQUNBUSxFQUFBOEYsa0JBQUEsR0FDQXRHLEVBQUF1RyxTQUNBLEtBTUF2RyxFQUFBd0csZ0JBQUEscUNBUUEsb0JBQ0FqRixrQ0FFQSxnRUFJQSxHQWZBLEdBbUZBdkIsRUFBQXlHLFdBQUEsU0FBQXBGLG9CQUVBcUYsbUJBQ0EsVUFDQSxXQUNBLFlBQ0EsWUFDQSxhQUNBLGFBQ0EsVUFDQSxXQUNBLFlBQ0EsY0FDQSxrQkFDQSxFQUNBLGVBQ0EsSUFHQTFHLEVBQUEyRyxTQUFBLFNBQUFDLG9DQUVBQyxZQUVBN0csRUFBQThHLFdBQUEsU0FBQTdDLEVBQUE1QyxPQUVBb0IsWUFDQSxNQUNBLFlBQ0EsaUJBQ0EsRUFDQSxVQUNBLFdBQ0EsZUFDQTVCLE9BQ0EsVUFDQSxZQUNBLGFBQ0EsVUFDQUEsT0FDQSxVQUNBLGdCQUNBQSxPQUNBLFVBQ0EsV0FDQSxZQUNBLGNBQ0EsYUFDQSxXQUNBLE1BQ0Esd0JBQ0EsMkJBRUE0QixHQUVBekMsRUFBQStHLE9BQUEsU0FBQUMsRUFBQUMsOEdBS0EsNEJBRUEsT0FHQWpHLDhCQUVBLDZCQUVBSCxtQkFJQW9HLEtBQ0EseUJBQ0EsU0FDQWpHLFlBQ0FrRyxRQUNBckcsY0FFQVUsR0F5REF2QixFQUFBbUgsVUFBQUMsTUFBQSxTQUFBMUYsRUFBQUMsRUFBQWQsRUFBQVEsa0NBTUFSLFNBQ0F3RyxPQUVBLE9BRUFoRyxJQUNBTSxJQUNBZCxJQUNBeUcsZUFHQSxvQkFDQTNGLGNBSUFkLFVBRUFlLEtBSkFBLE1BU0FhLDZCQUZBaUUsbUJBSUEsbUJBQ0E3RixHQUNBLFVBQ0EsV0FDQSxxQkFDQUEsR0FDQSxVQUNBLHFCQUNBQSxHQUNBLFVBQ0Esc0JBQ0FBLEdBQ0EsVUFDQSxzQkFDQUEsR0FDQSxVQUNBLFdBQ0EsWUFDQSxjQUNBLHdCQUNBQSxHQUNBLE1BQ0Esd0JBQ0EsMkJBRUE0QixHQUVBekMsRUFBQW1ILFVBQUFJLFNBQUEsU0FBQWxHLEVBQUFlLEVBQUFDLFNBRUFiLDRCQUVBa0YsMkJBQ0EsOEJBQ0E3RixrQkFHQSxPQUVBNEIsU0FDQXBCLE9BQ0EsY0FDQWdCLEdBQ0EsVUFDQSxXQUNBLGdCQUNBQSxHQUNBLFVBQ0EsZ0JBQ0FBLEdBQ0EsVUFDQSxpQkFDQUEsR0FDQSxVQUNBLGlCQUNBQSxHQUNBLFVBQ0EsV0FDQSxZQUNBLGNBQ0EsbUJBQ0FBLEdBQ0EsTUFDQSx3QkFDQSwyQkFFQUksR0FFQXpDLEVBQUFtSCxVQUFBSyxPQUFBLHVCQUdBLHlEQUNBLEtBSUF4SCxFQUFBbUgsVUFBQU0sS0FBQSxTQUFBQyxFQUFBQyxFQUFBdkYsRUFBQUMsU0FFQWIsY0FFQSxxQkFDQVgsY0FDQSw2Q0FPQSw4Q0FDQSxnREFDQSxpREFDQSxrREFHQUEsc0NBQ0F1QixXQUVBQSxpRUFJQUEsb0NBR0F1RixLQStEQTNILEVBQUFtSCxVQUFBUyxNQUFBLFNBQUF4RixFQUFBQyxjQUVBeEIsa0JBQ0EsV0FDQStCLHVEQUdBUCxnQkFFQUQsb0JBQ0EsMkJBRUFBLFVBRUF5RixHQUlBN0gsRUFBQW1ILFVBQUFXLElBQUEsU0FBQW5HLHNCQUVBLDRFQUNBQSxJQUdBM0IsRUFBQW1ILFVBQUFZLElBQUEsU0FBQXBILEVBQUFnQixzQkFFQSwrRUFDQUEsSUFFQTNCLEVBQUFtSCxVQUFBYSxVQUFBLFNBQUFyRyxFQUFBdUIsaUNBR0Esa0NBQ0Esc0VBS0F2QixJQXVCQTNCLEVBQUFtSCxVQUFBYyxhQUFBLFNBQUF0RyxFQUFBdUIsc0JBRUFBLElBRUFsRCxFQUFBbUgsVUFBQWUsYUFBQSxTQUFBdkcsRUFBQXVCLHNCQUVBQSxJQTJCQWxELEVBQUFtSCxVQUFBZ0IsYUFBQSxTQUFBeEcsRUFBQXVCLHNCQUVBQSxJQUVBbEQsRUFBQW1ILFVBQUFpQixhQUFBLFNBQUF6RyxFQUFBdUIsc0JBRUFBLElBRUFsRCxFQUFBbUgsVUFBQWtCLFNBQUEsU0FBQTFHLEVBQUF1QixpQ0FHQSxrQ0FDQSxpRUFLQSxvQ0FDQXZCLElBaUJBM0IsRUFBQW1ILFVBQUFtQixZQUFBLFNBQUEzRyxFQUFBdUIsc0JBRUFBLElBRUFsRCxFQUFBbUgsVUFBQW9CLFlBQUEsU0FBQTVHLEVBQUF1QixzQkFFQUEsSUFpQkFsRCxFQUFBbUgsVUFBQXFCLFlBQUEsU0FBQTdHLEVBQUF1QixzQkFFQUEsSUFFQWxELEVBQUFtSCxVQUFBc0IsWUFBQSxTQUFBOUcsRUFBQXVCLHNCQUVBQSxJQVdBbEQsRUFBQW1ILFVBQUF1QixZQUFBLFNBQUEvRyxFQUFBdUIsc0JBRUFBLElBRUFsRCxFQUFBbUgsVUFBQXdCLFlBQUEsU0FBQWhILEVBQUF1QixzQkFFQUEsSUFXQWxELEVBQUFtSCxVQUFBeUIsYUFBQSxTQUFBakgsRUFBQXVCLHNCQUVBQSxJQUVBbEQsRUFBQW1ILFVBQUEwQixhQUFBLFNBQUFsSCxFQUFBdUIsc0JBRUFBLElBRUFsRCxFQUFBbUgsVUFBQTJCLFdBQUEsU0FBQXBGLEVBQUEvQixFQUFBdUIsOEJBR0Esd0NBQ0Esa0NBQ0EsNENBQ0EsK0JBS0FRLElBbUJBMUQsRUFBQW1ILFVBQUE0QixjQUFBLFNBQUFyRixFQUFBL0IsRUFBQXVCLGlCQUVBQSxJQUVBbEQsRUFBQW1ILFVBQUE2QixjQUFBLFNBQUF0RixFQUFBL0IsRUFBQXVCLGlCQUVBQSxJQW1CQWxELEVBQUFtSCxVQUFBOEIsY0FBQSxTQUFBdkYsRUFBQS9CLEVBQUF1QixpQkFFQUEsSUFFQWxELEVBQUFtSCxVQUFBK0IsY0FBQSxTQUFBeEYsRUFBQS9CLEVBQUF1QixpQkFFQUEsSUFFQWxELEVBQUFtSCxVQUFBZ0MsVUFBQSxTQUFBekYsRUFBQS9CLEVBQUF1Qiw4QkFHQSx3Q0FDQSxrQ0FDQSxpREFDQSw2RUFLQUEsS0FpQkFsRCxFQUFBbUgsVUFBQWlDLGFBQUEsU0FBQTFGLEVBQUEvQixFQUFBdUIsaUJBRUFBLElBRUFsRCxFQUFBbUgsVUFBQWtDLGFBQUEsU0FBQTNGLEVBQUEvQixFQUFBdUIsaUJBRUFBLElBaUJBbEQsRUFBQW1ILFVBQUFtQyxhQUFBLFNBQUE1RixFQUFBL0IsRUFBQXVCLGlCQUVBQSxJQUVBbEQsRUFBQW1ILFVBQUFvQyxhQUFBLFNBQUE3RixFQUFBL0IsRUFBQXVCLGlCQUVBQSxJQWlCQWxELEVBQUFtSCxVQUFBcUMsYUFBQSxTQUFBOUYsRUFBQS9CLEVBQUF1QixpQkFFQUEsSUFFQWxELEVBQUFtSCxVQUFBc0MsYUFBQSxTQUFBL0YsRUFBQS9CLEVBQUF1QixpQkFFQUEsSUFpQkFsRCxFQUFBbUgsVUFBQXVDLGNBQUEsU0FBQWhHLEVBQUEvQixFQUFBdUIsaUJBRUFBLElBRUFsRCxFQUFBbUgsVUFBQXdDLGNBQUEsU0FBQWpHLEVBQUEvQixFQUFBdUIsaUJBRUFBLElBR0FsRCxFQUFBbUgsVUFBQXlDLEtBQUEsU0FBQWxHLEVBQUF0QixFQUFBQyxZQUVBLFNBQ0EsY0FDQXhCLDRDQUdBLG9DQUdBLGdDQUNBLDZEQU1BLDhDQUNBLGlEQUdBNkMsSUFHQTFELEVBQUFtSCxVQUFBMEMsUUFBQSwrQkFHQWhKLGtDQUVBRyw0QkFDQSxRQUNBLE1BQ0EsbUNBR0EsS0FNQWhCLEVBQUFtSCxVQUFBMkMsY0FBQSw2Q0FFQSx5Q0FFQUMscUNBRUFsSiwwQ0FFQUcsWUFDQStJLHVCQUdBLHVEQVdBLElBQUFDLEdBQUFoSyxFQUNBbUgsVUFJQW5ILEVBQUFpSyxTQUFBLFNBQUFySix1QkFFQSxXQUdBa0gsYUFDQUMsYUFHQUQsYUFDQUMsZUFFQVgsb0JBQ0FHLDZCQUNBQSxxQkFDQUMsaUJBQ0FDLGdCQUNBRyxxQkFDQUksNEJBQ0FDLCtCQUNBQywrQkFDQUMsK0JBQ0FDLDJCQUNBQywwQkFDQUMsNkJBQ0FDLDZCQUNBQyw2QkFDQUMsNkJBQ0FDLDZCQUNBQyw4QkFDQUMsK0JBQ0FDLDZCQUNBQyw4QkFDQUMsaUNBQ0FDLGlDQUNBQyxpQ0FDQUMsNkJBQ0FDLDRCQUNBQywrQkFDQUMsK0JBQ0FDLCtCQUNBQywrQkFDQUMsK0JBQ0FDLGdDQUNBQyxpQ0FDQUMsd0JBQ0FDLGtCQUNBQywyQkFDQUMsY0FFQWxKLG9UQzU1QkEsU0FBQWQsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FHQUUsRUFBQTBKLEtBQUEsU0FBQUgsRUFBQXBJLEVBQUF3SSxFQUFBQyxFQUFBQyxTQUVBQyxVQUNBLFdBQ0EsT0FDQSxLQUNBLFVBQ0EsU0FDQSxRQUNBdEosVUFFQXVKLGNBRUEsT0FDQUMsS0FDQUMsZ0RBR0EsT0FDQUQsS0FDQUosNkNBSUFNLDZCQUVBQyxFQUFBQSx5QkFFQVAsTUFDQU0sZ0NBRUFOLElBRUE1SixFQUFBNEcsTUFBQSxTQUFBMkMsRUFBQXJHLEVBQUEvQixFQUFBd0ksRUFBQUMsRUFBQUMsV0FFQU8sVUFDQSxXQUNBLE9BQ0EsMkNBQ0EsVUFDQSxTQUNBLHdCQUNBLGlCQUVBbEgsbUNBR0EsSUFDQW1ILGtDQUVBQyw4QkFFQXBMLE9BQ0EsZ0JBR0FrTCxpQkFFQUYsV0FHQWhMLE9BQ0EsYUFJQSxJQUNBbUwsZ0NBRUFULE1BQ0FNLG1DQUVBTixLQUNBLG1EQU1BRSxLQUNBRiwrQ0FHQSxrU0N0RkEsU0FBQXRLLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEdBOENBLFNBQUF5SyxNQXpDQWpMLEVBQUFrTCxFQUFBeEssWUFFQXlLLFNBQUEsb0RBRUFDLHNFQUNBQyxvRUFJQUMsU0FJQSx1RUFHQUMseURBRUFDLGdDQUVBQyxPQUNBQyxNQUdBLHNCQUdBQSxxQ0FDQSxzQ0FLQSxJQS9CQSxHQWtDQTFMLEVBQUEyTCxNQUFBLFVBQ0EzTCxFQUFBNEwsU0FBQSxFQUNBNUwsRUFBQTZMLE9BQ0E3TCxFQUFBOEwsUUFJQTlMLEVBQUErTCxHQUFBZCxFQUNBakwsRUFBQWdNLFlBQUFmLEVBQ0FqTCxFQUFBaU0sS0FBQWhCLEVBQ0FqTCxFQUFBa00sSUFBQWpCLEVBQ0FqTCxFQUFBbU0sZUFBQWxCLEVBQ0FqTCxFQUFBb00sbUJBQUFuQixFQUNBakwsRUFBQXFNLEtBQ0FwQixFQUNBakwsRUFBQXNNLFFBQUEsU0FBQUMsbUJBRUEscUNBR0F2TSxFQUFBd00sSUFBQSxpQkFFQSxLQUNBeE0sRUFBQXlNLE1BQUEsU0FBQUMsbUJBRUEsZ1VDbEVBLFNBQUExTSxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQVNBLFNBQUFtTSxFQUFBQyxFQUFBQyxpRkFOQUMsT0FBQUMsZUFBQXJNLEVBQUEscUJBRUEsSUFFQSxJQUFBc00sRUFBQSxnUEFBQSxHQUlBQyxFQUFBLCtCQUdBQSxvQkFJQSx5Q0FFQSxhQUVBQyxTQUNBLHFDQUNBLG9DQUNBLFFBRUFBLFNBQ0EscUNBQ0EscUNBQ0EsUUFFQUEsU0FDQSxxQ0FDQSxtQ0FDQSxRQUVBQSxTQUNBLHdDQUNBLG9DQUNBLFFBRUFBLFNBQ0EsZ0NBQ0Esb0NBQ0EsUUFFQUEsU0FDQSxtQ0FDQSxtQ0FDQSxTQU1BRCxFQTdDQSxHQStDQXZNLEVBQUF5TSxRQUNBRixvT0MzREEsU0FBQWpOLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEdBaUJBLFNBQUE0TSxFQUFBakgsd0NBRUEsU0FBQXdHLEVBQUFDLEVBQUFDLGlGQWhCQUMsT0FBQUMsZUFBQXJNLEVBQUEscUJBRUEsSUFFQSxJQUFBc00sRUFBQSxnUEFBQSxHQUlBSyxFQUFBRCxFQUZBL0csRUFDQSxrQkFLQWlILEVBQUFGLEVBRkEvRyxFQUNBLG9DQU9Ba0gsRUFBQSxJQUFBRixFQUFBRixRQUNBSyxFQUFBLElBQUFGLEVBQUFILFFBQ0FNLEVBQUFDLFNBQUFDLGNBQ0EsY0FDQUMsRUFBQSwrQkFHQUEsNEdBTUEsbUJBSUEsOEJBRUFsTSwyQkFFQSxvREFFQW1NLG1CQUNBLHlEQUVBQyw4RkFFQUMseUNBR0EsK0NBRUFDLG1CQUNBLHlEQUVBQywrQkFJQUMsc0JBSUEscUtBRUEseWZBQ0FDLHlCQUdBLDRIQUVBek0sY0FHQSxzQ0FFQUEsOEJBRUEsa0NBQ0Esc0NBQ0Esd0RBQ0EwTSw2Q0FDQUMsNkJBQ0FDLGtJQUlBLHFFQUtBVCw4Q0FFQSxrSkFFQWpLLHdDQUVBLDBFQUVBQSwrRkFHQTJLLDJCQUdBek4scUZBRUEsa0JBSUEsd0ZBR0EsS0FDQW1OLFdBQ0FPLFNBQ0FULHFCQUVBVSw2QkFDQVosYUFJQUQsRUF0R0EsR0F3R0FsTixFQUFBeU0sUUFDQVMsMFRDbElBLFNBQUE1TixFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQWlCQSxTQUFBNE0sRUFBQWpILHdDQUVBLFNBQUF3RyxFQUFBQyxFQUFBQyxpRkFoQkFDLE9BQUFDLGVBQUFyTSxFQUFBLHFCQUVBLElBRUEsSUFBQXNNLEVBQUEsZ1BBQUEsR0FJQUssRUFBQUQsRUFGQS9HLEVBQ0Esa0JBS0FpSCxFQUFBRixFQUZBL0csRUFDQSxvQ0FPQWtILEVBQUEsSUFBQUYsRUFBQUYsUUFDQUssRUFBQSxJQUFBRixFQUFBSCxRQUNBTSxFQUFBQyxTQUFBQyxjQUNBLGNBQ0FlLEVBQUEsK0JBR0FBLG9CQUlBLG9DQUVBaE4saURBR0EsMEdBRUEsYUFDQWlOLDBLQUNBLHllQUNBUiwyQkFJQSw0SEFFQXpNLGNBR0Esc0NBRUFBLHlEQUtBLGtDQUNBLHNDQUNBLG9DQUNBLDJEQUNBa0MsMkZBSUF5SyxPQUNBQyxhQUNBTSw0RUFJQUMsd0NBRUEsa0pBRUFqTCx3Q0FFQSwwRUFFQUEsMEVBR0EySywyQkFHQXpOLHFGQUVBLGtCQUlBLGtIQUlBLEtBQ0FtTixXQUNBTyxTQUNBVCxVQUVBVSx3QkFDQUsscUNBR0EsS0FDQWIsV0FDQU8sU0FDQVQseUJBRUFVLFNBS0FDLEVBMUZBLEdBNEZBaE8sRUFBQXlNLFFBQ0F1QixzVEN0SEEsU0FBQTFPLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEdBcUJBLFNBQUE0TSxFQUFBakgsd0NBRUEsU0FBQXdHLEVBQUFDLEVBQUFDLGlGQXBCQUMsT0FBQUMsZUFBQXJNLEVBQUEscUJBRUEsSUFFQSxJQUFBc00sRUFBQSxnUEFBQSxHQUlBSyxFQUFBRCxFQUZBL0csRUFDQSxrQkFLQTBJLEVBQUEzQixFQUZBL0csRUFDQSxjQUtBaUgsRUFBQUYsRUFGQS9HLEVBQ0Esb0NBT0EySSxFQUFBLElBQUFELEVBQUE1QixRQUNBSSxFQUFBLElBQUFGLEVBQUFGLFFBQ0FLLEVBQUEsSUFBQUYsRUFBQUgsUUFDQU0sRUFBQUMsU0FBQUMsY0FDQSxjQUNBc0IsRUFBQSwrQkFHQUEsd0RBT0EsOEJBRUF2TiwyREFHQW1NLG1DQUVBLHFEQUVBcUIsNkJBRUFoQixzQkFJQSxvQ0FFQXhNLE9BRUEsNEZBR0Esc0NBSUF5TixrQkFDQVgsdUJBQ0FULGVBRUEsbUZBQ0EsNEpBQ0EsaURBRUEsVUFDQSxvUUFDQSwrdEJBSUEsNERBQ0FJLHlCQUdBLHlDQUVBLDZJQUdBLGdHQXlCQWUsdUJBQ0FFLElBQ0FsQixvQkF6QkF4TSw4QkFFQSxnREFDQSxpREFDQSxxREFDQSxzREFDQSx3Q0FDQSxzREFDQSx1REFDQSwyREFDQSxvSkFJQTJOLG9CQUVBQSxZQUlBM04sWUFVQSx5Q0FFQUEsbUNBRUEsaUNBQ0EsaUNBQ0EsaUNBQ0FxTSxpQ0FDQSwrRkFJQSxLQUdBZSwwQ0FFQUEsYUFDQUEsbUNBRUEsd0ZBSUFRLEtBR0FSLDJDQUVBUyxpQkFDQUEsNkJBRUFyQixzQkFJQSw2RkFFQSxPQUlBZSxFQXJJQSxHQXVJQXZPLEVBQUF5TSxRQUNBOEIsaVVDdEtBLFNBQUFqUCxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQVNBLFNBQUFtTSxFQUFBQyxFQUFBQyxpRkFOQUMsT0FBQUMsZUFBQXJNLEVBQUEscUJBRUEsSUFFQSxJQUFBc00sRUFBQSxnUEFBQSxHQUlBd0MsRUFBQSwrQkFHQUEseURBT0EsaURBRUExTyxvQkFDQWtOLCtEQUVBdE0sc0VBRUFBLGlEQUVBK04sa0VBRUFDLG9DQUNBQywwQkFDQTdPLFNBR0EseUVBR0F1TixZQUlBLDZFQUVBTCwyQ0FDQUEsNEJBRUEsaUJBRUEsZ0JBSUEsOEVBRUFBLDJDQUNBQSw0QkFFQSxpQkFFQSxnQkFJQSwyRUFHQSx5QkFFQSxnQkFJQSxzRUFHQSxxQkFFQSxnQkFJQSw0RUFHQSx5QkFFQSxhQUtBd0IsRUFuRkEsR0FxRkE5TyxFQUFBeU0sUUFDQXFDLDBQQ2pHQSxTQUFBeFAsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FHQSxJQUVBb1AsRUFRQSxTQUFBekosd0NBUkFpSCxDQUZBL0csRUFDQSxtQkFHQXdKLEVBQUF4SixFQUNBLGtCQUNBeUosRUFBQXpKLEVBQ0Esd0JBQ0EwSixFQUFBMUosRUFDQSx3QkFHQTJKLEdBQUFILEVBQUF2TCxNQUFBd0wsRUFBQUcsWUFBQUYsRUFBQUcsYUFDQSxJQUFBTixFQUFBekMsU0FBQTZDLE9BQ0FBLHdVQ2pCQSxTQUFBaFEsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FHQXNNLE9BQUFDLGVBQUFyTSxFQUFBLHFCQUVBLElBQ0FBLEVBQUF1UCxpQkFDQTFJLEVBQ0EsSUFNQTRJLEVBQUEsSUFGQSxTQUFBaEssd0NBRkFpSCxDQUZBL0csRUFDQSxpQ0FNQThHLFNBQ0E4QyxRQUVBLHNDQUVBLDZGQUlBLHVFQUVBLDRCQUVBLDREQUVBLE9BRUEvQixvQ0FJQXhOLEVBQUF1UCxZQUNBQSx1UkNyQ0EsU0FBQWpRLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEdBR0FzTSxPQUFBQyxlQUFBck0sRUFBQSxxQkFFQSxJQUNBQSxFQUFBd1AsaUJBQ0EzSSxFQUNBLElBTUE2SSxFQUFBLElBRkEsU0FBQWpLLHdDQUZBaUgsQ0FGQS9HLEVBQ0EscUNBTUE4RyxTQUNBK0MsUUFFQSwyQ0FFQUcsOEVBSUEsdUVBRUEsNEJBRUEsNERBRUEsT0FFQUMsOEJBSUE1UCxFQUFBd1AsWUFDQUEsMlJDckNBLFNBQUFsUSxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQW9CQSxTQUFBNE0sRUFBQWpILHdDQWpCQTJHLE9BQUFDLGVBQUFyTSxFQUFBLHFCQUVBLElBQ0FBLEVBQUE0RCxXQUNBaUQsRUFDQSxJQUVBZ0osRUFBQW5ELEVBRkEvRyxFQUNBLDhCQUtBZ0gsRUFBQUQsRUFGQS9HLEVBQ0Esa0JBS0FtSyxFQUFBcEQsRUFGQS9HLEVBQ0Esa0JBS0FvSyxFQUFBLElBQUFGLEVBQUFwRCxRQUNBSSxFQUFBLElBQUFGLEVBQUFGLFFBQ0F1RCxFQUFBLElBQUFGLEVBQ0FyRCxRQUNBN0ksUUFFQSxjQUNBLDhFQUdBLDRCQUNBLGlGQUVBLHFGQUdBcU0sa0VBR0FMLG1DQUVBTSxxQ0FLQWxRLEVBQUE0RCxNQUNBQSxtVENqREEsU0FBQXRFLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEdBaUJBLFNBQUE0TSxFQUFBakgsd0NBRUEsU0FBQXdHLEVBQUFDLEVBQUFDLGlGQWhCQUMsT0FBQUMsZUFBQXJNLEVBQUEscUJBRUEsSUFFQSxJQUFBc00sRUFBQSxnUEFBQSxHQUlBSyxFQUFBRCxFQUZBL0csRUFDQSxTQUtBMEksRUFBQTNCLEVBRkEvRyxFQUNBLDRCQU9Ba0gsRUFBQSxJQUFBRixFQUFBRixRQUNBNkIsRUFBQSxJQUFBRCxFQUNBNUIsUUFDQTBELEVBQUEsK0JBR0FBLHlEQU9BLGlEQUVBblAsc0ZBSUFxTSxxREFFQXVCLHdEQUVBQSx3REFFQUEsbURBRUF6QixrREFFQUUsMkRBRUErQyx5Q0FFQTdDLHlEQUVBTyxzQ0FFQSw2RkFJQSw0Q0FLQXVDLHVEQUVBaEQsNkNBQ0FTLGlDQUNBd0Msb0JBakNBLHdCQXFDQSxxRUFHQSxnS0FFQSx3QkFFQTFCLFVBR0EsdUVBR0Esd0dBRUFBLFVBR0EsZ0xBR0Esd0JBRUFBLFVBS0EsMEZBRUF2Tyx5QkFFQSx1SUFFQWdRLGlCQUdBLGdHQUlBLG1CQUlBLDJDQUVBalEsVUFHQSxnREFFQSxLQUNBLFNBQ0FtUSxtTEFDQSxnQkFLQSwrQ0FFQXZQLDZEQUdBLCtFQUlBb04sbUNBRUEsc0RBRUFBLDhEQUVBZCxnRkFHQUEseUNBRUFLLGNBTUEsd0dBR0FOLGdCQUtBLHFDQUVBck0sdUdBS0EyTSxjQU9BLG9GQUdBQyxrQkFJQSxnRUFFQUUsZ0JBQ0FULG9CQUNBLE1BSUE4QyxFQTlLQSxHQWdMQW5RLEVBQUF5TSxRQUNBMEQsbVNDek1BLFNBQUE3USxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQVNBLFNBQUFtTSxFQUFBQyxFQUFBQyxpRkFOQUMsT0FBQUMsZUFBQXJNLEVBQUEscUJBRUEsSUFFQSxJQUFBc00sRUFBQSxnUEFBQSxHQUlBa0UsRUFBQSwrQkFHQUEsb0JBSUEsMkZBRUFwQyxZQUdBLGdFQUVBcUMsNkJBQ0FyQyxXQUNBc0MsYUFJQUYsRUFwQkEsR0FzQkF4USxFQUFBeU0sUUFDQStELDJPQ2xDQSxTQUFBbFIsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FHQXNNLE9BQUFDLGVBQUFyTSxFQUFBLHFCQUVBLElBQ0EsSUFBQTJRLEVBQUEsU0FBQUMsRUFBQUMsaUJBRUF2QixxQkFDQXVCLE9BQ0FqQixRQUNBZSxFQUFBaEssaUNBR0EzRix3SEFHQSx1REFFQSx5REFJQSxrQ0FHQUEsbUZBSUEsUUFDQThQLHlDQUVBQyx1Q0FFQUQsc0dBTUFBLHlDQUVBRSx1Q0FFQUYsc0NBSUFHLGlGQUdBLGlFQUVBQywrREFFQUEsT0FHQWxSLEVBQUF5TSxRQUNBa0UiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpfXZhciBmPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChmLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGYsZi5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIoZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsLEJ1ZmZlcixfX2FyZ3VtZW50MCxfX2FyZ3VtZW50MSxfX2FyZ3VtZW50MixfX2FyZ3VtZW50MyxfX2ZpbGVuYW1lLF9fZGlybmFtZSl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBsb29rdXAgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLyc7XG5cbjsoZnVuY3Rpb24gKGV4cG9ydHMpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXk7XG5cblx0dmFyIFBMVVMgPSAnKycuY2hhckNvZGVBdCgwKTtcblx0dmFyIFNMQVNIID0gJy8nLmNoYXJDb2RlQXQoMCk7XG5cdHZhciBOVU1CRVIgPSAnMCcuY2hhckNvZGVBdCgwKTtcblx0dmFyIExPV0VSID0gJ2EnLmNoYXJDb2RlQXQoMCk7XG5cdHZhciBVUFBFUiA9ICdBJy5jaGFyQ29kZUF0KDApO1xuXHR2YXIgUExVU19VUkxfU0FGRSA9ICctJy5jaGFyQ29kZUF0KDApO1xuXHR2YXIgU0xBU0hfVVJMX1NBRkUgPSAnXycuY2hhckNvZGVBdCgwKTtcblxuXHRmdW5jdGlvbiBkZWNvZGUoZWx0KSB7XG5cdFx0dmFyIGNvZGUgPSBlbHQuY2hhckNvZGVBdCgwKTtcblx0XHRpZiAoY29kZSA9PT0gUExVUyB8fCBjb2RlID09PSBQTFVTX1VSTF9TQUZFKSByZXR1cm4gNjI7IC8vICcrJ1xuXHRcdGlmIChjb2RlID09PSBTTEFTSCB8fCBjb2RlID09PSBTTEFTSF9VUkxfU0FGRSkgcmV0dXJuIDYzOyAvLyAnLydcblx0XHRpZiAoY29kZSA8IE5VTUJFUikgcmV0dXJuIC0xOyAvL25vIG1hdGNoXG5cdFx0aWYgKGNvZGUgPCBOVU1CRVIgKyAxMCkgcmV0dXJuIGNvZGUgLSBOVU1CRVIgKyAyNiArIDI2O1xuXHRcdGlmIChjb2RlIDwgVVBQRVIgKyAyNikgcmV0dXJuIGNvZGUgLSBVUFBFUjtcblx0XHRpZiAoY29kZSA8IExPV0VSICsgMjYpIHJldHVybiBjb2RlIC0gTE9XRVIgKyAyNjtcblx0fVxuXG5cdGZ1bmN0aW9uIGI2NFRvQnl0ZUFycmF5KGI2NCkge1xuXHRcdHZhciBpLCBqLCBsLCB0bXAsIHBsYWNlSG9sZGVycywgYXJyO1xuXG5cdFx0aWYgKGI2NC5sZW5ndGggJSA0ID4gMCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0Jyk7XG5cdFx0fVxuXG5cdFx0Ly8gdGhlIG51bWJlciBvZiBlcXVhbCBzaWducyAocGxhY2UgaG9sZGVycylcblx0XHQvLyBpZiB0aGVyZSBhcmUgdHdvIHBsYWNlaG9sZGVycywgdGhhbiB0aGUgdHdvIGNoYXJhY3RlcnMgYmVmb3JlIGl0XG5cdFx0Ly8gcmVwcmVzZW50IG9uZSBieXRlXG5cdFx0Ly8gaWYgdGhlcmUgaXMgb25seSBvbmUsIHRoZW4gdGhlIHRocmVlIGNoYXJhY3RlcnMgYmVmb3JlIGl0IHJlcHJlc2VudCAyIGJ5dGVzXG5cdFx0Ly8gdGhpcyBpcyBqdXN0IGEgY2hlYXAgaGFjayB0byBub3QgZG8gaW5kZXhPZiB0d2ljZVxuXHRcdHZhciBsZW4gPSBiNjQubGVuZ3RoO1xuXHRcdHBsYWNlSG9sZGVycyA9ICc9JyA9PT0gYjY0LmNoYXJBdChsZW4gLSAyKSA/IDIgOiAnPScgPT09IGI2NC5jaGFyQXQobGVuIC0gMSkgPyAxIDogMDtcblxuXHRcdC8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuXHRcdGFyciA9IG5ldyBBcnIoYjY0Lmxlbmd0aCAqIDMgLyA0IC0gcGxhY2VIb2xkZXJzKTtcblxuXHRcdC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcblx0XHRsID0gcGxhY2VIb2xkZXJzID4gMCA/IGI2NC5sZW5ndGggLSA0IDogYjY0Lmxlbmd0aDtcblxuXHRcdHZhciBMID0gMDtcblxuXHRcdGZ1bmN0aW9uIHB1c2godikge1xuXHRcdFx0YXJyW0wrK10gPSB2O1xuXHRcdH1cblxuXHRcdGZvciAoaSA9IDAsIGogPSAwOyBpIDwgbDsgaSArPSA0LCBqICs9IDMpIHtcblx0XHRcdHRtcCA9IGRlY29kZShiNjQuY2hhckF0KGkpKSA8PCAxOCB8IGRlY29kZShiNjQuY2hhckF0KGkgKyAxKSkgPDwgMTIgfCBkZWNvZGUoYjY0LmNoYXJBdChpICsgMikpIDw8IDYgfCBkZWNvZGUoYjY0LmNoYXJBdChpICsgMykpO1xuXHRcdFx0cHVzaCgodG1wICYgMHhGRjAwMDApID4+IDE2KTtcblx0XHRcdHB1c2goKHRtcCAmIDB4RkYwMCkgPj4gOCk7XG5cdFx0XHRwdXNoKHRtcCAmIDB4RkYpO1xuXHRcdH1cblxuXHRcdGlmIChwbGFjZUhvbGRlcnMgPT09IDIpIHtcblx0XHRcdHRtcCA9IGRlY29kZShiNjQuY2hhckF0KGkpKSA8PCAyIHwgZGVjb2RlKGI2NC5jaGFyQXQoaSArIDEpKSA+PiA0O1xuXHRcdFx0cHVzaCh0bXAgJiAweEZGKTtcblx0XHR9IGVsc2UgaWYgKHBsYWNlSG9sZGVycyA9PT0gMSkge1xuXHRcdFx0dG1wID0gZGVjb2RlKGI2NC5jaGFyQXQoaSkpIDw8IDEwIHwgZGVjb2RlKGI2NC5jaGFyQXQoaSArIDEpKSA8PCA0IHwgZGVjb2RlKGI2NC5jaGFyQXQoaSArIDIpKSA+PiAyO1xuXHRcdFx0cHVzaCh0bXAgPj4gOCAmIDB4RkYpO1xuXHRcdFx0cHVzaCh0bXAgJiAweEZGKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYXJyO1xuXHR9XG5cblx0ZnVuY3Rpb24gdWludDhUb0Jhc2U2NCh1aW50OCkge1xuXHRcdHZhciBpLFxuXHRcdCAgICBleHRyYUJ5dGVzID0gdWludDgubGVuZ3RoICUgMyxcblx0XHQgICAgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcblx0XHRvdXRwdXQgPSBcIlwiLFxuXHRcdCAgICB0ZW1wLFxuXHRcdCAgICBsZW5ndGg7XG5cblx0XHRmdW5jdGlvbiBlbmNvZGUobnVtKSB7XG5cdFx0XHRyZXR1cm4gbG9va3VwLmNoYXJBdChudW0pO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NChudW0pIHtcblx0XHRcdHJldHVybiBlbmNvZGUobnVtID4+IDE4ICYgMHgzRikgKyBlbmNvZGUobnVtID4+IDEyICYgMHgzRikgKyBlbmNvZGUobnVtID4+IDYgJiAweDNGKSArIGVuY29kZShudW0gJiAweDNGKTtcblx0XHR9XG5cblx0XHQvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG5cdFx0Zm9yIChpID0gMCwgbGVuZ3RoID0gdWludDgubGVuZ3RoIC0gZXh0cmFCeXRlczsgaSA8IGxlbmd0aDsgaSArPSAzKSB7XG5cdFx0XHR0ZW1wID0gKHVpbnQ4W2ldIDw8IDE2KSArICh1aW50OFtpICsgMV0gPDwgOCkgKyB1aW50OFtpICsgMl07XG5cdFx0XHRvdXRwdXQgKz0gdHJpcGxldFRvQmFzZTY0KHRlbXApO1xuXHRcdH1cblxuXHRcdC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcblx0XHRzd2l0Y2ggKGV4dHJhQnl0ZXMpIHtcblx0XHRcdGNhc2UgMTpcblx0XHRcdFx0dGVtcCA9IHVpbnQ4W3VpbnQ4Lmxlbmd0aCAtIDFdO1xuXHRcdFx0XHRvdXRwdXQgKz0gZW5jb2RlKHRlbXAgPj4gMik7XG5cdFx0XHRcdG91dHB1dCArPSBlbmNvZGUodGVtcCA8PCA0ICYgMHgzRik7XG5cdFx0XHRcdG91dHB1dCArPSAnPT0nO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgMjpcblx0XHRcdFx0dGVtcCA9ICh1aW50OFt1aW50OC5sZW5ndGggLSAyXSA8PCA4KSArIHVpbnQ4W3VpbnQ4Lmxlbmd0aCAtIDFdO1xuXHRcdFx0XHRvdXRwdXQgKz0gZW5jb2RlKHRlbXAgPj4gMTApO1xuXHRcdFx0XHRvdXRwdXQgKz0gZW5jb2RlKHRlbXAgPj4gNCAmIDB4M0YpO1xuXHRcdFx0XHRvdXRwdXQgKz0gZW5jb2RlKHRlbXAgPDwgMiAmIDB4M0YpO1xuXHRcdFx0XHRvdXRwdXQgKz0gJz0nO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cblx0ZXhwb3J0cy50b0J5dGVBcnJheSA9IGI2NFRvQnl0ZUFycmF5O1xuXHRleHBvcnRzLmZyb21CeXRlQXJyYXkgPSB1aW50OFRvQmFzZTY0O1xufSkodHlwZW9mIGV4cG9ydHMgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkLmJhc2U2NGpzID0ge30gOiBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltSTJOQzVxY3lKZExDSnVZVzFsY3lJNld5SnNiMjlyZFhBaUxDSmxlSEJ2Y25Seklpd2lRWEp5SWl3aVZXbHVkRGhCY25KaGVTSXNJa0Z5Y21GNUlpd2lVRXhWVXlJc0ltTm9ZWEpEYjJSbFFYUWlMQ0pUVEVGVFNDSXNJazVWVFVKRlVpSXNJa3hQVjBWU0lpd2lWVkJRUlZJaUxDSlFURlZUWDFWU1RGOVRRVVpGSWl3aVUweEJVMGhmVlZKTVgxTkJSa1VpTENKa1pXTnZaR1VpTENKbGJIUWlMQ0pqYjJSbElpd2lZalkwVkc5Q2VYUmxRWEp5WVhraUxDSmlOalFpTENKcElpd2lhaUlzSW13aUxDSjBiWEFpTENKd2JHRmpaVWh2YkdSbGNuTWlMQ0poY25JaUxDSnNaVzVuZEdnaUxDSkZjbkp2Y2lJc0lteGxiaUlzSW1Ob1lYSkJkQ0lzSWt3aUxDSndkWE5vSWl3aWRpSXNJblZwYm5RNFZHOUNZWE5sTmpRaUxDSjFhVzUwT0NJc0ltVjRkSEpoUW5sMFpYTWlMQ0p2ZFhSd2RYUWlMQ0owWlcxd0lpd2laVzVqYjJSbElpd2liblZ0SWl3aWRISnBjR3hsZEZSdlFtRnpaVFkwSWl3aWRHOUNlWFJsUVhKeVlYa2lMQ0ptY205dFFubDBaVUZ5Y21GNUlpd2lZbUZ6WlRZMGFuTWlYU3dpYldGd2NHbHVaM01pT2lJN08wRkJRVUVzU1VGQlNVRXNVMEZCVXl4clJVRkJZanM3UVVGRlFTeERRVUZGTEZkQlFWVkRMRTlCUVZZc1JVRkJiVUk3UVVGRGNFSTdPMEZCUlVNc1MwRkJTVU1zVFVGQlR5eFBRVUZQUXl4VlFVRlFMRXRCUVhOQ0xGZEJRWFpDTEVkQlEwNUJMRlZCUkUwc1IwRkZUa01zUzBGR1NqczdRVUZKUkN4TFFVRkpReXhQUVVGVExFbEJRVWxETEZWQlFVb3NRMEZCWlN4RFFVRm1MRU5CUVdJN1FVRkRRU3hMUVVGSlF5eFJRVUZUTEVsQlFVbEVMRlZCUVVvc1EwRkJaU3hEUVVGbUxFTkJRV0k3UVVGRFFTeExRVUZKUlN4VFFVRlRMRWxCUVVsR0xGVkJRVW9zUTBGQlpTeERRVUZtTEVOQlFXSTdRVUZEUVN4TFFVRkpSeXhSUVVGVExFbEJRVWxJTEZWQlFVb3NRMEZCWlN4RFFVRm1MRU5CUVdJN1FVRkRRU3hMUVVGSlNTeFJRVUZUTEVsQlFVbEtMRlZCUVVvc1EwRkJaU3hEUVVGbUxFTkJRV0k3UVVGRFFTeExRVUZKU3l4blFrRkJaMElzU1VGQlNVd3NWVUZCU2l4RFFVRmxMRU5CUVdZc1EwRkJjRUk3UVVGRFFTeExRVUZKVFN4cFFrRkJhVUlzU1VGQlNVNHNWVUZCU2l4RFFVRmxMRU5CUVdZc1EwRkJja0k3TzBGQlJVRXNWVUZCVTA4c1RVRkJWQ3hEUVVGcFFrTXNSMEZCYWtJc1JVRkJjMEk3UVVGRGNrSXNUVUZCU1VNc1QwRkJUMFFzU1VGQlNWSXNWVUZCU2l4RFFVRmxMRU5CUVdZc1EwRkJXRHRCUVVOQkxFMUJRVWxUTEZOQlFWTldMRWxCUVZRc1NVRkRRVlVzVTBGQlUwb3NZVUZFWWl4RlFVVkRMRTlCUVU4c1JVRkJVQ3hEUVVwdlFpeERRVWxXTzBGQlExZ3NUVUZCU1Vrc1UwRkJVMUlzUzBGQlZDeEpRVU5CVVN4VFFVRlRTQ3hqUVVSaUxFVkJSVU1zVDBGQlR5eEZRVUZRTEVOQlVHOUNMRU5CVDFZN1FVRkRXQ3hOUVVGSlJ5eFBRVUZQVUN4TlFVRllMRVZCUTBNc1QwRkJUeXhEUVVGRExFTkJRVklzUTBGVWIwSXNRMEZUVmp0QlFVTllMRTFCUVVsUExFOUJRVTlRTEZOQlFWTXNSVUZCY0VJc1JVRkRReXhQUVVGUFR5eFBRVUZQVUN4TlFVRlFMRWRCUVdkQ0xFVkJRV2hDTEVkQlFYRkNMRVZCUVRWQ08wRkJRMFFzVFVGQlNVOHNUMEZCVDB3c1VVRkJVU3hGUVVGdVFpeEZRVU5ETEU5QlFVOUxMRTlCUVU5TUxFdEJRV1E3UVVGRFJDeE5RVUZKU3l4UFFVRlBUaXhSUVVGUkxFVkJRVzVDTEVWQlEwTXNUMEZCVDAwc1QwRkJUMDRzUzBGQlVDeEhRVUZsTEVWQlFYUkNPMEZCUTBRN08wRkJSVVFzVlVGQlUwOHNZMEZCVkN4RFFVRjVRa01zUjBGQmVrSXNSVUZCT0VJN1FVRkROMElzVFVGQlNVTXNRMEZCU2l4RlFVRlBReXhEUVVGUUxFVkJRVlZETEVOQlFWWXNSVUZCWVVNc1IwRkJZaXhGUVVGclFrTXNXVUZCYkVJc1JVRkJaME5ETEVkQlFXaERPenRCUVVWQkxFMUJRVWxPTEVsQlFVbFBMRTFCUVVvc1IwRkJZU3hEUVVGaUxFZEJRV2xDTEVOQlFYSkNMRVZCUVhkQ08wRkJRM1pDTEZOQlFVMHNTVUZCU1VNc1MwRkJTaXhEUVVGVkxHZEVRVUZXTEVOQlFVNDdRVUZEUVRzN1FVRkZSRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNUVUZCU1VNc1RVRkJUVlFzU1VGQlNVOHNUVUZCWkR0QlFVTkJSaXhwUWtGQlpTeFJRVUZSVEN4SlFVRkpWU3hOUVVGS0xFTkJRVmRFTEUxQlFVMHNRMEZCYWtJc1EwRkJVaXhIUVVFNFFpeERRVUU1UWl4SFFVRnJReXhSUVVGUlZDeEpRVUZKVlN4TlFVRktMRU5CUVZkRUxFMUJRVTBzUTBGQmFrSXNRMEZCVWl4SFFVRTRRaXhEUVVFNVFpeEhRVUZyUXl4RFFVRnVSanM3UVVGRlFUdEJRVU5CU0N4UlFVRk5MRWxCUVVseVFpeEhRVUZLTEVOQlFWRmxMRWxCUVVsUExFMUJRVW9zUjBGQllTeERRVUZpTEVkQlFXbENMRU5CUVdwQ0xFZEJRWEZDUml4WlFVRTNRaXhEUVVGT096dEJRVVZCTzBGQlEwRkdMRTFCUVVsRkxHVkJRV1VzUTBGQlppeEhRVUZ0UWt3c1NVRkJTVThzVFVGQlNpeEhRVUZoTEVOQlFXaERMRWRCUVc5RFVDeEpRVUZKVHl4TlFVRTFRenM3UVVGRlFTeE5RVUZKU1N4SlFVRkpMRU5CUVZJN08wRkJSVUVzVjBGQlUwTXNTVUZCVkN4RFFVRmxReXhEUVVGbUxFVkJRV3RDTzBGQlEycENVQ3hQUVVGSlN5eEhRVUZLTEVsQlFWZEZMRU5CUVZnN1FVRkRRVHM3UVVGRlJDeFBRVUZMV2l4SlFVRkpMRU5CUVVvc1JVRkJUME1zU1VGQlNTeERRVUZvUWl4RlFVRnRRa1FzU1VGQlNVVXNRMEZCZGtJc1JVRkJNRUpHTEV0QlFVc3NRMEZCVEN4RlFVRlJReXhMUVVGTExFTkJRWFpETEVWQlFUQkRPMEZCUTNwRFJTeFRRVUZQVWl4UFFVRlBTU3hKUVVGSlZTeE5RVUZLTEVOQlFWZFVMRU5CUVZnc1EwRkJVQ3hMUVVGNVFpeEZRVUV4UWl4SFFVRnBRMHdzVDBGQlQwa3NTVUZCU1ZVc1RVRkJTaXhEUVVGWFZDeEpRVUZKTEVOQlFXWXNRMEZCVUN4TFFVRTJRaXhGUVVFNVJDeEhRVUZ4UlV3c1QwRkJUMGtzU1VGQlNWVXNUVUZCU2l4RFFVRlhWQ3hKUVVGSkxFTkJRV1lzUTBGQlVDeExRVUUyUWl4RFFVRnNSeXhIUVVGMVIwd3NUMEZCVDBrc1NVRkJTVlVzVFVGQlNpeERRVUZYVkN4SlFVRkpMRU5CUVdZc1EwRkJVQ3hEUVVFM1J6dEJRVU5CVnl4UlFVRkxMRU5CUVVOU0xFMUJRVTBzVVVGQlVDeExRVUZ2UWl4RlFVRjZRanRCUVVOQlVTeFJRVUZMTEVOQlFVTlNMRTFCUVUwc1RVRkJVQ3hMUVVGclFpeERRVUYyUWp0QlFVTkJVU3hSUVVGTFVpeE5RVUZOTEVsQlFWZzdRVUZEUVRzN1FVRkZSQ3hOUVVGSlF5eHBRa0ZCYVVJc1EwRkJja0lzUlVGQmQwSTdRVUZEZGtKRUxGTkJRVTlTTEU5QlFVOUpMRWxCUVVsVkxFMUJRVW9zUTBGQlYxUXNRMEZCV0N4RFFVRlFMRXRCUVhsQ0xFTkJRVEZDTEVkQlFXZERUQ3hQUVVGUFNTeEpRVUZKVlN4TlFVRktMRU5CUVZkVUxFbEJRVWtzUTBGQlppeERRVUZRTEV0QlFUWkNMRU5CUVc1Rk8wRkJRMEZYTEZGQlFVdFNMRTFCUVUwc1NVRkJXRHRCUVVOQkxFZEJTRVFzVFVGSFR5eEpRVUZKUXl4cFFrRkJhVUlzUTBGQmNrSXNSVUZCZDBJN1FVRkRPVUpFTEZOQlFVOVNMRTlCUVU5SkxFbEJRVWxWTEUxQlFVb3NRMEZCVjFRc1EwRkJXQ3hEUVVGUUxFdEJRWGxDTEVWQlFURkNMRWRCUVdsRFRDeFBRVUZQU1N4SlFVRkpWU3hOUVVGS0xFTkJRVmRVTEVsQlFVa3NRMEZCWml4RFFVRlFMRXRCUVRaQ0xFTkJRVGxFTEVkQlFXOUZUQ3hQUVVGUFNTeEpRVUZKVlN4TlFVRktMRU5CUVZkVUxFbEJRVWtzUTBGQlppeERRVUZRTEV0QlFUWkNMRU5CUVhaSE8wRkJRMEZYTEZGQlFVMVNMRTlCUVU4c1EwRkJVaXhIUVVGaExFbEJRV3hDTzBGQlEwRlJMRkZCUVV0U0xFMUJRVTBzU1VGQldEdEJRVU5CT3p0QlFVVkVMRk5CUVU5RkxFZEJRVkE3UVVGRFFUczdRVUZGUkN4VlFVRlRVU3hoUVVGVUxFTkJRWGRDUXl4TFFVRjRRaXhGUVVFclFqdEJRVU01UWl4TlFVRkpaQ3hEUVVGS08wRkJRVUVzVFVGRFEyVXNZVUZCWVVRc1RVRkJUVklzVFVGQlRpeEhRVUZsTEVOQlJEZENPMEZCUVVFc1RVRkRaME03UVVGREwwSlZMRmRCUVZNc1JVRkdWanRCUVVGQkxFMUJSME5ETEVsQlNFUTdRVUZCUVN4TlFVZFBXQ3hOUVVoUU96dEJRVXRCTEZkQlFWTlpMRTFCUVZRc1EwRkJhVUpETEVkQlFXcENMRVZCUVhOQ08wRkJRM0pDTEZWQlFVOXlReXhQUVVGUE1rSXNUVUZCVUN4RFFVRmpWU3hIUVVGa0xFTkJRVkE3UVVGRFFUczdRVUZGUkN4WFFVRlRReXhsUVVGVUxFTkJRVEJDUkN4SFFVRXhRaXhGUVVFclFqdEJRVU01UWl4VlFVRlBSQ3hQUVVGUFF5eFBRVUZQTEVWQlFWQXNSMEZCV1N4SlFVRnVRaXhKUVVFeVFrUXNUMEZCVDBNc1QwRkJUeXhGUVVGUUxFZEJRVmtzU1VGQmJrSXNRMEZCTTBJc1IwRkJjMFJFTEU5QlFVOURMRTlCUVU4c1EwRkJVQ3hIUVVGWExFbEJRV3hDTEVOQlFYUkVMRWRCUVdkR1JDeFBRVUZQUXl4TlFVRk5MRWxCUVdJc1EwRkJka1k3UVVGRFFUczdRVUZGUkR0QlFVTkJMRTlCUVV0dVFpeEpRVUZKTEVOQlFVb3NSVUZCVDAwc1UwRkJVMUVzVFVGQlRWSXNUVUZCVGl4SFFVRmxVeXhWUVVGd1F5eEZRVUZuUkdZc1NVRkJTVTBzVFVGQmNFUXNSVUZCTkVST0xFdEJRVXNzUTBGQmFrVXNSVUZCYjBVN1FVRkRia1ZwUWl4VlFVRlBMRU5CUVVOSUxFMUJRVTFrTEVOQlFVNHNTMEZCV1N4RlFVRmlMRXRCUVc5Q1l5eE5RVUZOWkN4SlFVRkpMRU5CUVZZc1MwRkJaMElzUTBGQmNFTXNTVUZCTUVOakxFMUJRVTFrTEVsQlFVa3NRMEZCVml4RFFVRnFSRHRCUVVOQlowSXNZVUZCVlVrc1owSkJRV2RDU0N4SlFVRm9RaXhEUVVGV08wRkJRMEU3TzBGQlJVUTdRVUZEUVN4VlFVRlJSaXhWUVVGU08wRkJRME1zVVVGQlN5eERRVUZNTzBGQlEwTkZMRmRCUVU5SUxFMUJRVTFCTEUxQlFVMVNMRTFCUVU0c1IwRkJaU3hEUVVGeVFpeERRVUZRTzBGQlEwRlZMR05CUVZWRkxFOUJRVTlFTEZGQlFWRXNRMEZCWml4RFFVRldPMEZCUTBGRUxHTkJRVlZGTEU5QlFWRkVMRkZCUVZFc1EwRkJWQ3hIUVVGakxFbEJRWEpDTEVOQlFWWTdRVUZEUVVRc1kwRkJWU3hKUVVGV08wRkJRMEU3UVVGRFJDeFJRVUZMTEVOQlFVdzdRVUZEUTBNc1YwRkJUeXhEUVVGRFNDeE5RVUZOUVN4TlFVRk5VaXhOUVVGT0xFZEJRV1VzUTBGQmNrSXNTMEZCTWtJc1EwRkJOVUlzU1VGQmEwTlJMRTFCUVUxQkxFMUJRVTFTTEUxQlFVNHNSMEZCWlN4RFFVRnlRaXhEUVVGNlF6dEJRVU5CVlN4alFVRlZSU3hQUVVGUFJDeFJRVUZSTEVWQlFXWXNRMEZCVmp0QlFVTkJSQ3hqUVVGVlJTeFBRVUZSUkN4UlFVRlJMRU5CUVZRc1IwRkJZeXhKUVVGeVFpeERRVUZXTzBGQlEwRkVMR05CUVZWRkxFOUJRVkZFTEZGQlFWRXNRMEZCVkN4SFFVRmpMRWxCUVhKQ0xFTkJRVlk3UVVGRFFVUXNZMEZCVlN4SFFVRldPMEZCUTBFN1FVRmlSanM3UVVGblFrRXNVMEZCVDBFc1RVRkJVRHRCUVVOQk96dEJRVVZFYWtNc1UwRkJVWE5ETEZkQlFWSXNSMEZCYzBKMlFpeGpRVUYwUWp0QlFVTkJaaXhUUVVGUmRVTXNZVUZCVWl4SFFVRjNRbFFzWVVGQmVFSTdRVUZEUVN4RFFYcElReXhGUVhsSVFTeFBRVUZQT1VJc1QwRkJVQ3hMUVVGdFFpeFhRVUZ1UWl4SFFVRnJReXhWUVVGTGQwTXNVVUZCVEN4SFFVRm5RaXhGUVVGc1JDeEhRVUYzUkhoRExFOUJla2g0UkN4RFFVRkVJaXdpWm1sc1pTSTZJbUkyTkM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJblpoY2lCc2IyOXJkWEFnUFNBblFVSkRSRVZHUjBoSlNrdE1UVTVQVUZGU1UxUlZWbGRZV1ZwaFltTmtaV1puYUdscWEyeHRibTl3Y1hKemRIVjJkM2g1ZWpBeE1qTTBOVFkzT0Rrckx5YzdYRzVjYmpzb1puVnVZM1JwYjI0Z0tHVjRjRzl5ZEhNcElIdGNibHgwSjNWelpTQnpkSEpwWTNRbk8xeHVYRzRnSUhaaGNpQkJjbklnUFNBb2RIbHdaVzltSUZWcGJuUTRRWEp5WVhrZ0lUMDlJQ2QxYm1SbFptbHVaV1FuS1Z4dUlDQWdJRDhnVldsdWREaEJjbkpoZVZ4dUlDQWdJRG9nUVhKeVlYbGNibHh1WEhSMllYSWdVRXhWVXlBZ0lEMGdKeXNuTG1Ob1lYSkRiMlJsUVhRb01DbGNibHgwZG1GeUlGTk1RVk5JSUNBOUlDY3ZKeTVqYUdGeVEyOWtaVUYwS0RBcFhHNWNkSFpoY2lCT1ZVMUNSVklnUFNBbk1DY3VZMmhoY2tOdlpHVkJkQ2d3S1Z4dVhIUjJZWElnVEU5WFJWSWdJRDBnSjJFbkxtTm9ZWEpEYjJSbFFYUW9NQ2xjYmx4MGRtRnlJRlZRVUVWU0lDQTlJQ2RCSnk1amFHRnlRMjlrWlVGMEtEQXBYRzVjZEhaaGNpQlFURlZUWDFWU1RGOVRRVVpGSUQwZ0p5MG5MbU5vWVhKRGIyUmxRWFFvTUNsY2JseDBkbUZ5SUZOTVFWTklYMVZTVEY5VFFVWkZJRDBnSjE4bkxtTm9ZWEpEYjJSbFFYUW9NQ2xjYmx4dVhIUm1kVzVqZEdsdmJpQmtaV052WkdVZ0tHVnNkQ2tnZTF4dVhIUmNkSFpoY2lCamIyUmxJRDBnWld4MExtTm9ZWEpEYjJSbFFYUW9NQ2xjYmx4MFhIUnBaaUFvWTI5a1pTQTlQVDBnVUV4VlV5QjhmRnh1WEhSY2RDQWdJQ0JqYjJSbElEMDlQU0JRVEZWVFgxVlNURjlUUVVaRktWeHVYSFJjZEZ4MGNtVjBkWEp1SURZeUlDOHZJQ2NySjF4dVhIUmNkR2xtSUNoamIyUmxJRDA5UFNCVFRFRlRTQ0I4ZkZ4dVhIUmNkQ0FnSUNCamIyUmxJRDA5UFNCVFRFRlRTRjlWVWt4ZlUwRkdSU2xjYmx4MFhIUmNkSEpsZEhWeWJpQTJNeUF2THlBbkx5ZGNibHgwWEhScFppQW9ZMjlrWlNBOElFNVZUVUpGVWlsY2JseDBYSFJjZEhKbGRIVnliaUF0TVNBdkwyNXZJRzFoZEdOb1hHNWNkRngwYVdZZ0tHTnZaR1VnUENCT1ZVMUNSVklnS3lBeE1DbGNibHgwWEhSY2RISmxkSFZ5YmlCamIyUmxJQzBnVGxWTlFrVlNJQ3NnTWpZZ0t5QXlObHh1WEhSY2RHbG1JQ2hqYjJSbElEd2dWVkJRUlZJZ0t5QXlOaWxjYmx4MFhIUmNkSEpsZEhWeWJpQmpiMlJsSUMwZ1ZWQlFSVkpjYmx4MFhIUnBaaUFvWTI5a1pTQThJRXhQVjBWU0lDc2dNallwWEc1Y2RGeDBYSFJ5WlhSMWNtNGdZMjlrWlNBdElFeFBWMFZTSUNzZ01qWmNibHgwZlZ4dVhHNWNkR1oxYm1OMGFXOXVJR0kyTkZSdlFubDBaVUZ5Y21GNUlDaGlOalFwSUh0Y2JseDBYSFIyWVhJZ2FTd2dhaXdnYkN3Z2RHMXdMQ0J3YkdGalpVaHZiR1JsY25Nc0lHRnljbHh1WEc1Y2RGeDBhV1lnS0dJMk5DNXNaVzVuZEdnZ0pTQTBJRDRnTUNrZ2UxeHVYSFJjZEZ4MGRHaHliM2NnYm1WM0lFVnljbTl5S0NkSmJuWmhiR2xrSUhOMGNtbHVaeTRnVEdWdVozUm9JRzExYzNRZ1ltVWdZU0J0ZFd4MGFYQnNaU0J2WmlBMEp5bGNibHgwWEhSOVhHNWNibHgwWEhRdkx5QjBhR1VnYm5WdFltVnlJRzltSUdWeGRXRnNJSE5wWjI1eklDaHdiR0ZqWlNCb2IyeGtaWEp6S1Z4dVhIUmNkQzh2SUdsbUlIUm9aWEpsSUdGeVpTQjBkMjhnY0d4aFkyVm9iMnhrWlhKekxDQjBhR0Z1SUhSb1pTQjBkMjhnWTJoaGNtRmpkR1Z5Y3lCaVpXWnZjbVVnYVhSY2JseDBYSFF2THlCeVpYQnlaWE5sYm5RZ2IyNWxJR0o1ZEdWY2JseDBYSFF2THlCcFppQjBhR1Z5WlNCcGN5QnZibXg1SUc5dVpTd2dkR2hsYmlCMGFHVWdkR2h5WldVZ1kyaGhjbUZqZEdWeWN5QmlaV1p2Y21VZ2FYUWdjbVZ3Y21WelpXNTBJRElnWW5sMFpYTmNibHgwWEhRdkx5QjBhR2x6SUdseklHcDFjM1FnWVNCamFHVmhjQ0JvWVdOcklIUnZJRzV2ZENCa2J5QnBibVJsZUU5bUlIUjNhV05sWEc1Y2RGeDBkbUZ5SUd4bGJpQTlJR0kyTkM1c1pXNW5kR2hjYmx4MFhIUndiR0ZqWlVodmJHUmxjbk1nUFNBblBTY2dQVDA5SUdJMk5DNWphR0Z5UVhRb2JHVnVJQzBnTWlrZ1B5QXlJRG9nSnowbklEMDlQU0JpTmpRdVkyaGhja0YwS0d4bGJpQXRJREVwSUQ4Z01TQTZJREJjYmx4dVhIUmNkQzh2SUdKaGMyVTJOQ0JwY3lBMEx6TWdLeUIxY0NCMGJ5QjBkMjhnWTJoaGNtRmpkR1Z5Y3lCdlppQjBhR1VnYjNKcFoybHVZV3dnWkdGMFlWeHVYSFJjZEdGeWNpQTlJRzVsZHlCQmNuSW9ZalkwTG14bGJtZDBhQ0FxSURNZ0x5QTBJQzBnY0d4aFkyVkliMnhrWlhKektWeHVYRzVjZEZ4MEx5OGdhV1lnZEdobGNtVWdZWEpsSUhCc1lXTmxhRzlzWkdWeWN5d2diMjVzZVNCblpYUWdkWEFnZEc4Z2RHaGxJR3hoYzNRZ1kyOXRjR3hsZEdVZ05DQmphR0Z5YzF4dVhIUmNkR3dnUFNCd2JHRmpaVWh2YkdSbGNuTWdQaUF3SUQ4Z1lqWTBMbXhsYm1kMGFDQXRJRFFnT2lCaU5qUXViR1Z1WjNSb1hHNWNibHgwWEhSMllYSWdUQ0E5SURCY2JseHVYSFJjZEdaMWJtTjBhVzl1SUhCMWMyZ2dLSFlwSUh0Y2JseDBYSFJjZEdGeWNsdE1LeXRkSUQwZ2RseHVYSFJjZEgxY2JseHVYSFJjZEdadmNpQW9hU0E5SURBc0lHb2dQU0F3T3lCcElEd2diRHNnYVNBclBTQTBMQ0JxSUNzOUlETXBJSHRjYmx4MFhIUmNkSFJ0Y0NBOUlDaGtaV052WkdVb1lqWTBMbU5vWVhKQmRDaHBLU2tnUER3Z01UZ3BJSHdnS0dSbFkyOWtaU2hpTmpRdVkyaGhja0YwS0drZ0t5QXhLU2tnUER3Z01USXBJSHdnS0dSbFkyOWtaU2hpTmpRdVkyaGhja0YwS0drZ0t5QXlLU2tnUER3Z05pa2dmQ0JrWldOdlpHVW9ZalkwTG1Ob1lYSkJkQ2hwSUNzZ015a3BYRzVjZEZ4MFhIUndkWE5vS0NoMGJYQWdKaUF3ZUVaR01EQXdNQ2tnUGo0Z01UWXBYRzVjZEZ4MFhIUndkWE5vS0NoMGJYQWdKaUF3ZUVaR01EQXBJRDQrSURncFhHNWNkRngwWEhSd2RYTm9LSFJ0Y0NBbUlEQjRSa1lwWEc1Y2RGeDBmVnh1WEc1Y2RGeDBhV1lnS0hCc1lXTmxTRzlzWkdWeWN5QTlQVDBnTWlrZ2UxeHVYSFJjZEZ4MGRHMXdJRDBnS0dSbFkyOWtaU2hpTmpRdVkyaGhja0YwS0drcEtTQThQQ0F5S1NCOElDaGtaV052WkdVb1lqWTBMbU5vWVhKQmRDaHBJQ3NnTVNrcElENCtJRFFwWEc1Y2RGeDBYSFJ3ZFhOb0tIUnRjQ0FtSURCNFJrWXBYRzVjZEZ4MGZTQmxiSE5sSUdsbUlDaHdiR0ZqWlVodmJHUmxjbk1nUFQwOUlERXBJSHRjYmx4MFhIUmNkSFJ0Y0NBOUlDaGtaV052WkdVb1lqWTBMbU5vWVhKQmRDaHBLU2tnUER3Z01UQXBJSHdnS0dSbFkyOWtaU2hpTmpRdVkyaGhja0YwS0drZ0t5QXhLU2tnUER3Z05Da2dmQ0FvWkdWamIyUmxLR0kyTkM1amFHRnlRWFFvYVNBcklESXBLU0ErUGlBeUtWeHVYSFJjZEZ4MGNIVnphQ2dvZEcxd0lENCtJRGdwSUNZZ01IaEdSaWxjYmx4MFhIUmNkSEIxYzJnb2RHMXdJQ1lnTUhoR1JpbGNibHgwWEhSOVhHNWNibHgwWEhSeVpYUjFjbTRnWVhKeVhHNWNkSDFjYmx4dVhIUm1kVzVqZEdsdmJpQjFhVzUwT0ZSdlFtRnpaVFkwSUNoMWFXNTBPQ2tnZTF4dVhIUmNkSFpoY2lCcExGeHVYSFJjZEZ4MFpYaDBjbUZDZVhSbGN5QTlJSFZwYm5RNExteGxibWQwYUNBbElETXNJQzh2SUdsbUlIZGxJR2hoZG1VZ01TQmllWFJsSUd4bFpuUXNJSEJoWkNBeUlHSjVkR1Z6WEc1Y2RGeDBYSFJ2ZFhSd2RYUWdQU0JjSWx3aUxGeHVYSFJjZEZ4MGRHVnRjQ3dnYkdWdVozUm9YRzVjYmx4MFhIUm1kVzVqZEdsdmJpQmxibU52WkdVZ0tHNTFiU2tnZTF4dVhIUmNkRngwY21WMGRYSnVJR3h2YjJ0MWNDNWphR0Z5UVhRb2JuVnRLVnh1WEhSY2RIMWNibHh1WEhSY2RHWjFibU4wYVc5dUlIUnlhWEJzWlhSVWIwSmhjMlUyTkNBb2JuVnRLU0I3WEc1Y2RGeDBYSFJ5WlhSMWNtNGdaVzVqYjJSbEtHNTFiU0ErUGlBeE9DQW1JREI0TTBZcElDc2daVzVqYjJSbEtHNTFiU0ErUGlBeE1pQW1JREI0TTBZcElDc2daVzVqYjJSbEtHNTFiU0ErUGlBMklDWWdNSGd6UmlrZ0t5QmxibU52WkdVb2JuVnRJQ1lnTUhnelJpbGNibHgwWEhSOVhHNWNibHgwWEhRdkx5Qm5ieUIwYUhKdmRXZG9JSFJvWlNCaGNuSmhlU0JsZG1WeWVTQjBhSEpsWlNCaWVYUmxjeXdnZDJVbmJHd2daR1ZoYkNCM2FYUm9JSFJ5WVdsc2FXNW5JSE4wZFdabUlHeGhkR1Z5WEc1Y2RGeDBabTl5SUNocElEMGdNQ3dnYkdWdVozUm9JRDBnZFdsdWREZ3ViR1Z1WjNSb0lDMGdaWGgwY21GQ2VYUmxjenNnYVNBOElHeGxibWQwYURzZ2FTQXJQU0F6S1NCN1hHNWNkRngwWEhSMFpXMXdJRDBnS0hWcGJuUTRXMmxkSUR3OElERTJLU0FySUNoMWFXNTBPRnRwSUNzZ01WMGdQRHdnT0NrZ0t5QW9kV2x1ZERoYmFTQXJJREpkS1Z4dVhIUmNkRngwYjNWMGNIVjBJQ3M5SUhSeWFYQnNaWFJVYjBKaGMyVTJOQ2gwWlcxd0tWeHVYSFJjZEgxY2JseHVYSFJjZEM4dklIQmhaQ0IwYUdVZ1pXNWtJSGRwZEdnZ2VtVnliM01zSUdKMWRDQnRZV3RsSUhOMWNtVWdkRzhnYm05MElHWnZjbWRsZENCMGFHVWdaWGgwY21FZ1lubDBaWE5jYmx4MFhIUnpkMmwwWTJnZ0tHVjRkSEpoUW5sMFpYTXBJSHRjYmx4MFhIUmNkR05oYzJVZ01UcGNibHgwWEhSY2RGeDBkR1Z0Y0NBOUlIVnBiblE0VzNWcGJuUTRMbXhsYm1kMGFDQXRJREZkWEc1Y2RGeDBYSFJjZEc5MWRIQjFkQ0FyUFNCbGJtTnZaR1VvZEdWdGNDQStQaUF5S1Z4dVhIUmNkRngwWEhSdmRYUndkWFFnS3owZ1pXNWpiMlJsS0NoMFpXMXdJRHc4SURRcElDWWdNSGd6UmlsY2JseDBYSFJjZEZ4MGIzVjBjSFYwSUNzOUlDYzlQU2RjYmx4MFhIUmNkRngwWW5KbFlXdGNibHgwWEhSY2RHTmhjMlVnTWpwY2JseDBYSFJjZEZ4MGRHVnRjQ0E5SUNoMWFXNTBPRnQxYVc1ME9DNXNaVzVuZEdnZ0xTQXlYU0E4UENBNEtTQXJJQ2gxYVc1ME9GdDFhVzUwT0M1c1pXNW5kR2dnTFNBeFhTbGNibHgwWEhSY2RGeDBiM1YwY0hWMElDczlJR1Z1WTI5a1pTaDBaVzF3SUQ0K0lERXdLVnh1WEhSY2RGeDBYSFJ2ZFhSd2RYUWdLejBnWlc1amIyUmxLQ2gwWlcxd0lENCtJRFFwSUNZZ01IZ3pSaWxjYmx4MFhIUmNkRngwYjNWMGNIVjBJQ3M5SUdWdVkyOWtaU2dvZEdWdGNDQThQQ0F5S1NBbUlEQjRNMFlwWEc1Y2RGeDBYSFJjZEc5MWRIQjFkQ0FyUFNBblBTZGNibHgwWEhSY2RGeDBZbkpsWVd0Y2JseDBYSFI5WEc1Y2JseDBYSFJ5WlhSMWNtNGdiM1YwY0hWMFhHNWNkSDFjYmx4dVhIUmxlSEJ2Y25SekxuUnZRbmwwWlVGeWNtRjVJRDBnWWpZMFZHOUNlWFJsUVhKeVlYbGNibHgwWlhod2IzSjBjeTVtY205dFFubDBaVUZ5Y21GNUlEMGdkV2x1ZERoVWIwSmhjMlUyTkZ4dWZTaDBlWEJsYjJZZ1pYaHdiM0owY3lBOVBUMGdKM1Z1WkdWbWFXNWxaQ2NnUHlBb2RHaHBjeTVpWVhObE5qUnFjeUE5SUh0OUtTQTZJR1Y0Y0c5eWRITXBLVnh1SWwxOVxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJlL1UrOTdcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi8uLlxcXFwuLlxcXFxub2RlX21vZHVsZXNcXFxcYmFzZTY0LWpzXFxcXGxpYlxcXFxiNjQuanNcIixcIi8uLlxcXFwuLlxcXFxub2RlX21vZHVsZXNcXFxcYmFzZTY0LWpzXFxcXGxpYlwiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG4vKiFcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxmZXJvc3NAZmVyb3NzLm9yZz4gPGh0dHA6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG5cbnZhciBiYXNlNjQgPSByZXF1aXJlKCdiYXNlNjQtanMnKTtcbnZhciBpZWVlNzU0ID0gcmVxdWlyZSgnaWVlZTc1NCcpO1xuXG5leHBvcnRzLkJ1ZmZlciA9IEJ1ZmZlcjtcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IEJ1ZmZlcjtcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MDtcbkJ1ZmZlci5wb29sU2l6ZSA9IDgxOTI7XG5cbi8qKlxuICogSWYgYEJ1ZmZlci5fdXNlVHlwZWRBcnJheXNgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgVXNlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiAoY29tcGF0aWJsZSBkb3duIHRvIElFNilcbiAqL1xuQnVmZmVyLl91c2VUeXBlZEFycmF5cyA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gRGV0ZWN0IGlmIGJyb3dzZXIgc3VwcG9ydHMgVHlwZWQgQXJyYXlzLiBTdXBwb3J0ZWQgYnJvd3NlcnMgYXJlIElFIDEwKywgRmlyZWZveCA0KyxcbiAgLy8gQ2hyb21lIDcrLCBTYWZhcmkgNS4xKywgT3BlcmEgMTEuNissIGlPUyA0LjIrLiBJZiB0aGUgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IGFkZGluZ1xuICAvLyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YCBpbnN0YW5jZXMsIHRoZW4gdGhhdCdzIHRoZSBzYW1lIGFzIG5vIGBVaW50OEFycmF5YCBzdXBwb3J0XG4gIC8vIGJlY2F1c2Ugd2UgbmVlZCB0byBiZSBhYmxlIHRvIGFkZCBhbGwgdGhlIG5vZGUgQnVmZmVyIEFQSSBtZXRob2RzLiBUaGlzIGlzIGFuIGlzc3VlXG4gIC8vIGluIEZpcmVmb3ggNC0yOS4gTm93IGZpeGVkOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzhcbiAgdHJ5IHtcbiAgICB2YXIgYnVmID0gbmV3IEFycmF5QnVmZmVyKDApO1xuICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheShidWYpO1xuICAgIGFyci5mb28gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gNDI7XG4gICAgfTtcbiAgICByZXR1cm4gNDIgPT09IGFyci5mb28oKSAmJiB0eXBlb2YgYXJyLnN1YmFycmF5ID09PSAnZnVuY3Rpb24nOyAvLyBDaHJvbWUgOS0xMCBsYWNrIGBzdWJhcnJheWBcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufSgpO1xuXG4vKipcbiAqIENsYXNzOiBCdWZmZXJcbiAqID09PT09PT09PT09PT1cbiAqXG4gKiBUaGUgQnVmZmVyIGNvbnN0cnVjdG9yIHJldHVybnMgaW5zdGFuY2VzIG9mIGBVaW50OEFycmF5YCB0aGF0IGFyZSBhdWdtZW50ZWRcbiAqIHdpdGggZnVuY3Rpb24gcHJvcGVydGllcyBmb3IgYWxsIHRoZSBub2RlIGBCdWZmZXJgIEFQSSBmdW5jdGlvbnMuIFdlIHVzZVxuICogYFVpbnQ4QXJyYXlgIHNvIHRoYXQgc3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXQgcmV0dXJuc1xuICogYSBzaW5nbGUgb2N0ZXQuXG4gKlxuICogQnkgYXVnbWVudGluZyB0aGUgaW5zdGFuY2VzLCB3ZSBjYW4gYXZvaWQgbW9kaWZ5aW5nIHRoZSBgVWludDhBcnJheWBcbiAqIHByb3RvdHlwZS5cbiAqL1xuZnVuY3Rpb24gQnVmZmVyKHN1YmplY3QsIGVuY29kaW5nLCBub1plcm8pIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEJ1ZmZlcikpIHJldHVybiBuZXcgQnVmZmVyKHN1YmplY3QsIGVuY29kaW5nLCBub1plcm8pO1xuXG4gIHZhciB0eXBlID0gdHlwZW9mIHN1YmplY3QgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHN1YmplY3QpO1xuXG4gIC8vIFdvcmthcm91bmQ6IG5vZGUncyBiYXNlNjQgaW1wbGVtZW50YXRpb24gYWxsb3dzIGZvciBub24tcGFkZGVkIHN0cmluZ3NcbiAgLy8gd2hpbGUgYmFzZTY0LWpzIGRvZXMgbm90LlxuICBpZiAoZW5jb2RpbmcgPT09ICdiYXNlNjQnICYmIHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgc3ViamVjdCA9IHN0cmluZ3RyaW0oc3ViamVjdCk7XG4gICAgd2hpbGUgKHN1YmplY3QubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgICAgc3ViamVjdCA9IHN1YmplY3QgKyAnPSc7XG4gICAgfVxuICB9XG5cbiAgLy8gRmluZCB0aGUgbGVuZ3RoXG4gIHZhciBsZW5ndGg7XG4gIGlmICh0eXBlID09PSAnbnVtYmVyJykgbGVuZ3RoID0gY29lcmNlKHN1YmplY3QpO2Vsc2UgaWYgKHR5cGUgPT09ICdzdHJpbmcnKSBsZW5ndGggPSBCdWZmZXIuYnl0ZUxlbmd0aChzdWJqZWN0LCBlbmNvZGluZyk7ZWxzZSBpZiAodHlwZSA9PT0gJ29iamVjdCcpIGxlbmd0aCA9IGNvZXJjZShzdWJqZWN0Lmxlbmd0aCk7IC8vIGFzc3VtZSB0aGF0IG9iamVjdCBpcyBhcnJheS1saWtlXG4gIGVsc2UgdGhyb3cgbmV3IEVycm9yKCdGaXJzdCBhcmd1bWVudCBuZWVkcyB0byBiZSBhIG51bWJlciwgYXJyYXkgb3Igc3RyaW5nLicpO1xuXG4gIHZhciBidWY7XG4gIGlmIChCdWZmZXIuX3VzZVR5cGVkQXJyYXlzKSB7XG4gICAgLy8gUHJlZmVycmVkOiBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIGJ1ZiA9IEJ1ZmZlci5fYXVnbWVudChuZXcgVWludDhBcnJheShsZW5ndGgpKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIFRISVMgaW5zdGFuY2Ugb2YgQnVmZmVyIChjcmVhdGVkIGJ5IGBuZXdgKVxuICAgIGJ1ZiA9IHRoaXM7XG4gICAgYnVmLmxlbmd0aCA9IGxlbmd0aDtcbiAgICBidWYuX2lzQnVmZmVyID0gdHJ1ZTtcbiAgfVxuXG4gIHZhciBpO1xuICBpZiAoQnVmZmVyLl91c2VUeXBlZEFycmF5cyAmJiB0eXBlb2Ygc3ViamVjdC5ieXRlTGVuZ3RoID09PSAnbnVtYmVyJykge1xuICAgIC8vIFNwZWVkIG9wdGltaXphdGlvbiAtLSB1c2Ugc2V0IGlmIHdlJ3JlIGNvcHlpbmcgZnJvbSBhIHR5cGVkIGFycmF5XG4gICAgYnVmLl9zZXQoc3ViamVjdCk7XG4gIH0gZWxzZSBpZiAoaXNBcnJheWlzaChzdWJqZWN0KSkge1xuICAgIC8vIFRyZWF0IGFycmF5LWlzaCBvYmplY3RzIGFzIGEgYnl0ZSBhcnJheVxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihzdWJqZWN0KSkgYnVmW2ldID0gc3ViamVjdC5yZWFkVUludDgoaSk7ZWxzZSBidWZbaV0gPSBzdWJqZWN0W2ldO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlID09PSAnc3RyaW5nJykge1xuICAgIGJ1Zi53cml0ZShzdWJqZWN0LCAwLCBlbmNvZGluZyk7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ251bWJlcicgJiYgIUJ1ZmZlci5fdXNlVHlwZWRBcnJheXMgJiYgIW5vWmVybykge1xuICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgYnVmW2ldID0gMDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnVmO1xufVxuXG4vLyBTVEFUSUMgTUVUSE9EU1xuLy8gPT09PT09PT09PT09PT1cblxuQnVmZmVyLmlzRW5jb2RpbmcgPSBmdW5jdGlvbiAoZW5jb2RpbmcpIHtcbiAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3Jhdyc6XG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIChiKSB7XG4gIHJldHVybiAhIShiICE9PSBudWxsICYmIGIgIT09IHVuZGVmaW5lZCAmJiBiLl9pc0J1ZmZlcik7XG59O1xuXG5CdWZmZXIuYnl0ZUxlbmd0aCA9IGZ1bmN0aW9uIChzdHIsIGVuY29kaW5nKSB7XG4gIHZhciByZXQ7XG4gIHN0ciA9IHN0ciArICcnO1xuICBzd2l0Y2ggKGVuY29kaW5nIHx8ICd1dGY4Jykge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgICByZXQgPSBzdHIubGVuZ3RoIC8gMjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIHJldCA9IHV0ZjhUb0J5dGVzKHN0cikubGVuZ3RoO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAncmF3JzpcbiAgICAgIHJldCA9IHN0ci5sZW5ndGg7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgcmV0ID0gYmFzZTY0VG9CeXRlcyhzdHIpLmxlbmd0aDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXQgPSBzdHIubGVuZ3RoICogMjtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gZW5jb2RpbmcnKTtcbiAgfVxuICByZXR1cm4gcmV0O1xufTtcblxuQnVmZmVyLmNvbmNhdCA9IGZ1bmN0aW9uIChsaXN0LCB0b3RhbExlbmd0aCkge1xuICBhc3NlcnQoaXNBcnJheShsaXN0KSwgJ1VzYWdlOiBCdWZmZXIuY29uY2F0KGxpc3QsIFt0b3RhbExlbmd0aF0pXFxuJyArICdsaXN0IHNob3VsZCBiZSBhbiBBcnJheS4nKTtcblxuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcigwKTtcbiAgfSBlbHNlIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBsaXN0WzBdO1xuICB9XG5cbiAgdmFyIGk7XG4gIGlmICh0eXBlb2YgdG90YWxMZW5ndGggIT09ICdudW1iZXInKSB7XG4gICAgdG90YWxMZW5ndGggPSAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB0b3RhbExlbmd0aCArPSBsaXN0W2ldLmxlbmd0aDtcbiAgICB9XG4gIH1cblxuICB2YXIgYnVmID0gbmV3IEJ1ZmZlcih0b3RhbExlbmd0aCk7XG4gIHZhciBwb3MgPSAwO1xuICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICBpdGVtLmNvcHkoYnVmLCBwb3MpO1xuICAgIHBvcyArPSBpdGVtLmxlbmd0aDtcbiAgfVxuICByZXR1cm4gYnVmO1xufTtcblxuLy8gQlVGRkVSIElOU1RBTkNFIE1FVEhPRFNcbi8vID09PT09PT09PT09PT09PT09PT09PT09XG5cbmZ1bmN0aW9uIF9oZXhXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMDtcbiAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXQ7XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nO1xuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpO1xuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZztcbiAgICB9XG4gIH1cblxuICAvLyBtdXN0IGJlIGFuIGV2ZW4gbnVtYmVyIG9mIGRpZ2l0c1xuICB2YXIgc3RyTGVuID0gc3RyaW5nLmxlbmd0aDtcbiAgYXNzZXJ0KHN0ckxlbiAlIDIgPT09IDAsICdJbnZhbGlkIGhleCBzdHJpbmcnKTtcblxuICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgIGxlbmd0aCA9IHN0ckxlbiAvIDI7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIHZhciBieXRlID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KTtcbiAgICBhc3NlcnQoIWlzTmFOKGJ5dGUpLCAnSW52YWxpZCBoZXggc3RyaW5nJyk7XG4gICAgYnVmW29mZnNldCArIGldID0gYnl0ZTtcbiAgfVxuICBCdWZmZXIuX2NoYXJzV3JpdHRlbiA9IGkgKiAyO1xuICByZXR1cm4gaTtcbn1cblxuZnVuY3Rpb24gX3V0ZjhXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgdmFyIGNoYXJzV3JpdHRlbiA9IEJ1ZmZlci5fY2hhcnNXcml0dGVuID0gYmxpdEJ1ZmZlcih1dGY4VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKTtcbiAgcmV0dXJuIGNoYXJzV3JpdHRlbjtcbn1cblxuZnVuY3Rpb24gX2FzY2lpV3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHZhciBjaGFyc1dyaXR0ZW4gPSBCdWZmZXIuX2NoYXJzV3JpdHRlbiA9IGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpO1xuICByZXR1cm4gY2hhcnNXcml0dGVuO1xufVxuXG5mdW5jdGlvbiBfYmluYXJ5V3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBfYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpO1xufVxuXG5mdW5jdGlvbiBfYmFzZTY0V3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHZhciBjaGFyc1dyaXR0ZW4gPSBCdWZmZXIuX2NoYXJzV3JpdHRlbiA9IGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKTtcbiAgcmV0dXJuIGNoYXJzV3JpdHRlbjtcbn1cblxuZnVuY3Rpb24gX3V0ZjE2bGVXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgdmFyIGNoYXJzV3JpdHRlbiA9IEJ1ZmZlci5fY2hhcnNXcml0dGVuID0gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKTtcbiAgcmV0dXJuIGNoYXJzV3JpdHRlbjtcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBTdXBwb3J0IGJvdGggKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKVxuICAvLyBhbmQgdGhlIGxlZ2FjeSAoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0LCBsZW5ndGgpXG4gIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgaWYgKCFpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aDtcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gbGVnYWN5XG4gICAgdmFyIHN3YXAgPSBlbmNvZGluZztcbiAgICBlbmNvZGluZyA9IG9mZnNldDtcbiAgICBvZmZzZXQgPSBsZW5ndGg7XG4gICAgbGVuZ3RoID0gc3dhcDtcbiAgfVxuXG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDA7XG4gIHZhciByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldDtcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmc7XG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aCk7XG4gICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgbGVuZ3RoID0gcmVtYWluaW5nO1xuICAgIH1cbiAgfVxuICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZyB8fCAndXRmOCcpLnRvTG93ZXJDYXNlKCk7XG5cbiAgdmFyIHJldDtcbiAgc3dpdGNoIChlbmNvZGluZykge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgICByZXQgPSBfaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgICByZXQgPSBfdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnYXNjaWknOlxuICAgICAgcmV0ID0gX2FzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdiaW5hcnknOlxuICAgICAgcmV0ID0gX2JpbmFyeVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgIHJldCA9IF9iYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXQgPSBfdXRmMTZsZVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBlbmNvZGluZycpO1xuICB9XG4gIHJldHVybiByZXQ7XG59O1xuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZyB8fCAndXRmOCcpLnRvTG93ZXJDYXNlKCk7XG4gIHN0YXJ0ID0gTnVtYmVyKHN0YXJ0KSB8fCAwO1xuICBlbmQgPSBlbmQgIT09IHVuZGVmaW5lZCA/IE51bWJlcihlbmQpIDogZW5kID0gc2VsZi5sZW5ndGg7XG5cbiAgLy8gRmFzdHBhdGggZW1wdHkgc3RyaW5nc1xuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuICcnO1xuXG4gIHZhciByZXQ7XG4gIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgICAgcmV0ID0gX2hleFNsaWNlKHNlbGYsIHN0YXJ0LCBlbmQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgICAgcmV0ID0gX3V0ZjhTbGljZShzZWxmLCBzdGFydCwgZW5kKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIHJldCA9IF9hc2NpaVNsaWNlKHNlbGYsIHN0YXJ0LCBlbmQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgIHJldCA9IF9iaW5hcnlTbGljZShzZWxmLCBzdGFydCwgZW5kKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICByZXQgPSBfYmFzZTY0U2xpY2Uoc2VsZiwgc3RhcnQsIGVuZCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0ID0gX3V0ZjE2bGVTbGljZShzZWxmLCBzdGFydCwgZW5kKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gZW5jb2RpbmcnKTtcbiAgfVxuICByZXR1cm4gcmV0O1xufTtcblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH07XG59O1xuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAodGFyZ2V0LCB0YXJnZXRfc3RhcnQsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHNvdXJjZSA9IHRoaXM7XG5cbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwO1xuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoO1xuICBpZiAoIXRhcmdldF9zdGFydCkgdGFyZ2V0X3N0YXJ0ID0gMDtcblxuICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVybjtcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgc291cmNlLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXG4gIC8vIEZhdGFsIGVycm9yIGNvbmRpdGlvbnNcbiAgYXNzZXJ0KGVuZCA+PSBzdGFydCwgJ3NvdXJjZUVuZCA8IHNvdXJjZVN0YXJ0Jyk7XG4gIGFzc2VydCh0YXJnZXRfc3RhcnQgPj0gMCAmJiB0YXJnZXRfc3RhcnQgPCB0YXJnZXQubGVuZ3RoLCAndGFyZ2V0U3RhcnQgb3V0IG9mIGJvdW5kcycpO1xuICBhc3NlcnQoc3RhcnQgPj0gMCAmJiBzdGFydCA8IHNvdXJjZS5sZW5ndGgsICdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJyk7XG4gIGFzc2VydChlbmQgPj0gMCAmJiBlbmQgPD0gc291cmNlLmxlbmd0aCwgJ3NvdXJjZUVuZCBvdXQgb2YgYm91bmRzJyk7XG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aDtcbiAgaWYgKHRhcmdldC5sZW5ndGggLSB0YXJnZXRfc3RhcnQgPCBlbmQgLSBzdGFydCkgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldF9zdGFydCArIHN0YXJ0O1xuXG4gIHZhciBsZW4gPSBlbmQgLSBzdGFydDtcblxuICBpZiAobGVuIDwgMTAwIHx8ICFCdWZmZXIuX3VzZVR5cGVkQXJyYXlzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRfc3RhcnRdID0gdGhpc1tpICsgc3RhcnRdO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0YXJnZXQuX3NldCh0aGlzLnN1YmFycmF5KHN0YXJ0LCBzdGFydCArIGxlbiksIHRhcmdldF9zdGFydCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIF9iYXNlNjRTbGljZShidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYuc2xpY2Uoc3RhcnQsIGVuZCkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF91dGY4U2xpY2UoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXMgPSAnJztcbiAgdmFyIHRtcCA9ICcnO1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpO1xuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgaWYgKGJ1ZltpXSA8PSAweDdGKSB7XG4gICAgICByZXMgKz0gZGVjb2RlVXRmOENoYXIodG1wKSArIFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKTtcbiAgICAgIHRtcCA9ICcnO1xuICAgIH0gZWxzZSB7XG4gICAgICB0bXAgKz0gJyUnICsgYnVmW2ldLnRvU3RyaW5nKDE2KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzICsgZGVjb2RlVXRmOENoYXIodG1wKTtcbn1cblxuZnVuY3Rpb24gX2FzY2lpU2xpY2UoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJztcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKTtcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSk7XG4gIH1yZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBfYmluYXJ5U2xpY2UoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHJldHVybiBfYXNjaWlTbGljZShidWYsIHN0YXJ0LCBlbmQpO1xufVxuXG5mdW5jdGlvbiBfaGV4U2xpY2UoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSBidWYubGVuZ3RoO1xuXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPCAwKSBzdGFydCA9IDA7XG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW47XG5cbiAgdmFyIG91dCA9ICcnO1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgIG91dCArPSB0b0hleChidWZbaV0pO1xuICB9XG4gIHJldHVybiBvdXQ7XG59XG5cbmZ1bmN0aW9uIF91dGYxNmxlU2xpY2UoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKTtcbiAgdmFyIHJlcyA9ICcnO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyBieXRlc1tpICsgMV0gKiAyNTYpO1xuICB9XG4gIHJldHVybiByZXM7XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGg7XG4gIHN0YXJ0ID0gY2xhbXAoc3RhcnQsIGxlbiwgMCk7XG4gIGVuZCA9IGNsYW1wKGVuZCwgbGVuLCBsZW4pO1xuXG4gIGlmIChCdWZmZXIuX3VzZVR5cGVkQXJyYXlzKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5fYXVnbWVudCh0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xpY2VMZW4gPSBlbmQgLSBzdGFydDtcbiAgICB2YXIgbmV3QnVmID0gbmV3IEJ1ZmZlcihzbGljZUxlbiwgdW5kZWZpbmVkLCB0cnVlKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWNlTGVuOyBpKyspIHtcbiAgICAgIG5ld0J1ZltpXSA9IHRoaXNbaSArIHN0YXJ0XTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld0J1ZjtcbiAgfVxufTtcblxuLy8gYGdldGAgd2lsbCBiZSByZW1vdmVkIGluIE5vZGUgMC4xMytcbkJ1ZmZlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKG9mZnNldCkge1xuICBjb25zb2xlLmxvZygnLmdldCgpIGlzIGRlcHJlY2F0ZWQuIEFjY2VzcyB1c2luZyBhcnJheSBpbmRleGVzIGluc3RlYWQuJyk7XG4gIHJldHVybiB0aGlzLnJlYWRVSW50OChvZmZzZXQpO1xufTtcblxuLy8gYHNldGAgd2lsbCBiZSByZW1vdmVkIGluIE5vZGUgMC4xMytcbkJ1ZmZlci5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKHYsIG9mZnNldCkge1xuICBjb25zb2xlLmxvZygnLnNldCgpIGlzIGRlcHJlY2F0ZWQuIEFjY2VzcyB1c2luZyBhcnJheSBpbmRleGVzIGluc3RlYWQuJyk7XG4gIHJldHVybiB0aGlzLndyaXRlVUludDgodiwgb2Zmc2V0KTtcbn07XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQ4ID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGFzc2VydChvZmZzZXQgIT09IHVuZGVmaW5lZCAmJiBvZmZzZXQgIT09IG51bGwsICdtaXNzaW5nIG9mZnNldCcpO1xuICAgIGFzc2VydChvZmZzZXQgPCB0aGlzLmxlbmd0aCwgJ1RyeWluZyB0byByZWFkIGJleW9uZCBidWZmZXIgbGVuZ3RoJyk7XG4gIH1cblxuICBpZiAob2Zmc2V0ID49IHRoaXMubGVuZ3RoKSByZXR1cm47XG5cbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XTtcbn07XG5cbmZ1bmN0aW9uIF9yZWFkVUludDE2KGJ1Ziwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGxpdHRsZUVuZGlhbiA9PT0gJ2Jvb2xlYW4nLCAnbWlzc2luZyBvciBpbnZhbGlkIGVuZGlhbicpO1xuICAgIGFzc2VydChvZmZzZXQgIT09IHVuZGVmaW5lZCAmJiBvZmZzZXQgIT09IG51bGwsICdtaXNzaW5nIG9mZnNldCcpO1xuICAgIGFzc2VydChvZmZzZXQgKyAxIDwgYnVmLmxlbmd0aCwgJ1RyeWluZyB0byByZWFkIGJleW9uZCBidWZmZXIgbGVuZ3RoJyk7XG4gIH1cblxuICB2YXIgbGVuID0gYnVmLmxlbmd0aDtcbiAgaWYgKG9mZnNldCA+PSBsZW4pIHJldHVybjtcblxuICB2YXIgdmFsO1xuICBpZiAobGl0dGxlRW5kaWFuKSB7XG4gICAgdmFsID0gYnVmW29mZnNldF07XG4gICAgaWYgKG9mZnNldCArIDEgPCBsZW4pIHZhbCB8PSBidWZbb2Zmc2V0ICsgMV0gPDwgODtcbiAgfSBlbHNlIHtcbiAgICB2YWwgPSBidWZbb2Zmc2V0XSA8PCA4O1xuICAgIGlmIChvZmZzZXQgKyAxIDwgbGVuKSB2YWwgfD0gYnVmW29mZnNldCArIDFdO1xuICB9XG4gIHJldHVybiB2YWw7XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkxFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIF9yZWFkVUludDE2KHRoaXMsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpO1xufTtcblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gX3JlYWRVSW50MTYodGhpcywgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpO1xufTtcblxuZnVuY3Rpb24gX3JlYWRVSW50MzIoYnVmLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGFzc2VydCh0eXBlb2YgbGl0dGxlRW5kaWFuID09PSAnYm9vbGVhbicsICdtaXNzaW5nIG9yIGludmFsaWQgZW5kaWFuJyk7XG4gICAgYXNzZXJ0KG9mZnNldCAhPT0gdW5kZWZpbmVkICYmIG9mZnNldCAhPT0gbnVsbCwgJ21pc3Npbmcgb2Zmc2V0Jyk7XG4gICAgYXNzZXJ0KG9mZnNldCArIDMgPCBidWYubGVuZ3RoLCAnVHJ5aW5nIHRvIHJlYWQgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKTtcbiAgfVxuXG4gIHZhciBsZW4gPSBidWYubGVuZ3RoO1xuICBpZiAob2Zmc2V0ID49IGxlbikgcmV0dXJuO1xuXG4gIHZhciB2YWw7XG4gIGlmIChsaXR0bGVFbmRpYW4pIHtcbiAgICBpZiAob2Zmc2V0ICsgMiA8IGxlbikgdmFsID0gYnVmW29mZnNldCArIDJdIDw8IDE2O1xuICAgIGlmIChvZmZzZXQgKyAxIDwgbGVuKSB2YWwgfD0gYnVmW29mZnNldCArIDFdIDw8IDg7XG4gICAgdmFsIHw9IGJ1ZltvZmZzZXRdO1xuICAgIGlmIChvZmZzZXQgKyAzIDwgbGVuKSB2YWwgPSB2YWwgKyAoYnVmW29mZnNldCArIDNdIDw8IDI0ID4+PiAwKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAob2Zmc2V0ICsgMSA8IGxlbikgdmFsID0gYnVmW29mZnNldCArIDFdIDw8IDE2O1xuICAgIGlmIChvZmZzZXQgKyAyIDwgbGVuKSB2YWwgfD0gYnVmW29mZnNldCArIDJdIDw8IDg7XG4gICAgaWYgKG9mZnNldCArIDMgPCBsZW4pIHZhbCB8PSBidWZbb2Zmc2V0ICsgM107XG4gICAgdmFsID0gdmFsICsgKGJ1ZltvZmZzZXRdIDw8IDI0ID4+PiAwKTtcbiAgfVxuICByZXR1cm4gdmFsO1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJMRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiBfcmVhZFVJbnQzMih0aGlzLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KTtcbn07XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIF9yZWFkVUludDMyKHRoaXMsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KTtcbn07XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgYXNzZXJ0KG9mZnNldCAhPT0gdW5kZWZpbmVkICYmIG9mZnNldCAhPT0gbnVsbCwgJ21pc3Npbmcgb2Zmc2V0Jyk7XG4gICAgYXNzZXJ0KG9mZnNldCA8IHRoaXMubGVuZ3RoLCAnVHJ5aW5nIHRvIHJlYWQgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKTtcbiAgfVxuXG4gIGlmIChvZmZzZXQgPj0gdGhpcy5sZW5ndGgpIHJldHVybjtcblxuICB2YXIgbmVnID0gdGhpc1tvZmZzZXRdICYgMHg4MDtcbiAgaWYgKG5lZykgcmV0dXJuICgweGZmIC0gdGhpc1tvZmZzZXRdICsgMSkgKiAtMTtlbHNlIHJldHVybiB0aGlzW29mZnNldF07XG59O1xuXG5mdW5jdGlvbiBfcmVhZEludDE2KGJ1Ziwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGxpdHRsZUVuZGlhbiA9PT0gJ2Jvb2xlYW4nLCAnbWlzc2luZyBvciBpbnZhbGlkIGVuZGlhbicpO1xuICAgIGFzc2VydChvZmZzZXQgIT09IHVuZGVmaW5lZCAmJiBvZmZzZXQgIT09IG51bGwsICdtaXNzaW5nIG9mZnNldCcpO1xuICAgIGFzc2VydChvZmZzZXQgKyAxIDwgYnVmLmxlbmd0aCwgJ1RyeWluZyB0byByZWFkIGJleW9uZCBidWZmZXIgbGVuZ3RoJyk7XG4gIH1cblxuICB2YXIgbGVuID0gYnVmLmxlbmd0aDtcbiAgaWYgKG9mZnNldCA+PSBsZW4pIHJldHVybjtcblxuICB2YXIgdmFsID0gX3JlYWRVSW50MTYoYnVmLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgdHJ1ZSk7XG4gIHZhciBuZWcgPSB2YWwgJiAweDgwMDA7XG4gIGlmIChuZWcpIHJldHVybiAoMHhmZmZmIC0gdmFsICsgMSkgKiAtMTtlbHNlIHJldHVybiB2YWw7XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2TEUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gX3JlYWRJbnQxNih0aGlzLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KTtcbn07XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2QkUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gX3JlYWRJbnQxNih0aGlzLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydCk7XG59O1xuXG5mdW5jdGlvbiBfcmVhZEludDMyKGJ1Ziwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGxpdHRsZUVuZGlhbiA9PT0gJ2Jvb2xlYW4nLCAnbWlzc2luZyBvciBpbnZhbGlkIGVuZGlhbicpO1xuICAgIGFzc2VydChvZmZzZXQgIT09IHVuZGVmaW5lZCAmJiBvZmZzZXQgIT09IG51bGwsICdtaXNzaW5nIG9mZnNldCcpO1xuICAgIGFzc2VydChvZmZzZXQgKyAzIDwgYnVmLmxlbmd0aCwgJ1RyeWluZyB0byByZWFkIGJleW9uZCBidWZmZXIgbGVuZ3RoJyk7XG4gIH1cblxuICB2YXIgbGVuID0gYnVmLmxlbmd0aDtcbiAgaWYgKG9mZnNldCA+PSBsZW4pIHJldHVybjtcblxuICB2YXIgdmFsID0gX3JlYWRVSW50MzIoYnVmLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgdHJ1ZSk7XG4gIHZhciBuZWcgPSB2YWwgJiAweDgwMDAwMDAwO1xuICBpZiAobmVnKSByZXR1cm4gKDB4ZmZmZmZmZmYgLSB2YWwgKyAxKSAqIC0xO2Vsc2UgcmV0dXJuIHZhbDtcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJMRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiBfcmVhZEludDMyKHRoaXMsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpO1xufTtcblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJCRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiBfcmVhZEludDMyKHRoaXMsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KTtcbn07XG5cbmZ1bmN0aW9uIF9yZWFkRmxvYXQoYnVmLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGFzc2VydCh0eXBlb2YgbGl0dGxlRW5kaWFuID09PSAnYm9vbGVhbicsICdtaXNzaW5nIG9yIGludmFsaWQgZW5kaWFuJyk7XG4gICAgYXNzZXJ0KG9mZnNldCArIDMgPCBidWYubGVuZ3RoLCAnVHJ5aW5nIHRvIHJlYWQgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKTtcbiAgfVxuXG4gIHJldHVybiBpZWVlNzU0LnJlYWQoYnVmLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpO1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdExFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIF9yZWFkRmxvYXQodGhpcywgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydCk7XG59O1xuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdEJFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIF9yZWFkRmxvYXQodGhpcywgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpO1xufTtcblxuZnVuY3Rpb24gX3JlYWREb3VibGUoYnVmLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGFzc2VydCh0eXBlb2YgbGl0dGxlRW5kaWFuID09PSAnYm9vbGVhbicsICdtaXNzaW5nIG9yIGludmFsaWQgZW5kaWFuJyk7XG4gICAgYXNzZXJ0KG9mZnNldCArIDcgPCBidWYubGVuZ3RoLCAnVHJ5aW5nIHRvIHJlYWQgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKTtcbiAgfVxuXG4gIHJldHVybiBpZWVlNzU0LnJlYWQoYnVmLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpO1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiBfcmVhZERvdWJsZSh0aGlzLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KTtcbn07XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIF9yZWFkRG91YmxlKHRoaXMsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KTtcbn07XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgYXNzZXJ0KHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwsICdtaXNzaW5nIHZhbHVlJyk7XG4gICAgYXNzZXJ0KG9mZnNldCAhPT0gdW5kZWZpbmVkICYmIG9mZnNldCAhPT0gbnVsbCwgJ21pc3Npbmcgb2Zmc2V0Jyk7XG4gICAgYXNzZXJ0KG9mZnNldCA8IHRoaXMubGVuZ3RoLCAndHJ5aW5nIHRvIHdyaXRlIGJleW9uZCBidWZmZXIgbGVuZ3RoJyk7XG4gICAgdmVyaWZ1aW50KHZhbHVlLCAweGZmKTtcbiAgfVxuXG4gIGlmIChvZmZzZXQgPj0gdGhpcy5sZW5ndGgpIHJldHVybjtcblxuICB0aGlzW29mZnNldF0gPSB2YWx1ZTtcbn07XG5cbmZ1bmN0aW9uIF93cml0ZVVJbnQxNihidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGFzc2VydCh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsLCAnbWlzc2luZyB2YWx1ZScpO1xuICAgIGFzc2VydCh0eXBlb2YgbGl0dGxlRW5kaWFuID09PSAnYm9vbGVhbicsICdtaXNzaW5nIG9yIGludmFsaWQgZW5kaWFuJyk7XG4gICAgYXNzZXJ0KG9mZnNldCAhPT0gdW5kZWZpbmVkICYmIG9mZnNldCAhPT0gbnVsbCwgJ21pc3Npbmcgb2Zmc2V0Jyk7XG4gICAgYXNzZXJ0KG9mZnNldCArIDEgPCBidWYubGVuZ3RoLCAndHJ5aW5nIHRvIHdyaXRlIGJleW9uZCBidWZmZXIgbGVuZ3RoJyk7XG4gICAgdmVyaWZ1aW50KHZhbHVlLCAweGZmZmYpO1xuICB9XG5cbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGg7XG4gIGlmIChvZmZzZXQgPj0gbGVuKSByZXR1cm47XG5cbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihsZW4gLSBvZmZzZXQsIDIpOyBpIDwgajsgaSsrKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlICYgMHhmZiA8PCA4ICogKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkpID4+PiAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSAqIDg7XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIF93cml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydCk7XG59O1xuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgX3dyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydCk7XG59O1xuXG5mdW5jdGlvbiBfd3JpdGVVSW50MzIoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQodmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbCwgJ21pc3NpbmcgdmFsdWUnKTtcbiAgICBhc3NlcnQodHlwZW9mIGxpdHRsZUVuZGlhbiA9PT0gJ2Jvb2xlYW4nLCAnbWlzc2luZyBvciBpbnZhbGlkIGVuZGlhbicpO1xuICAgIGFzc2VydChvZmZzZXQgIT09IHVuZGVmaW5lZCAmJiBvZmZzZXQgIT09IG51bGwsICdtaXNzaW5nIG9mZnNldCcpO1xuICAgIGFzc2VydChvZmZzZXQgKyAzIDwgYnVmLmxlbmd0aCwgJ3RyeWluZyB0byB3cml0ZSBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpO1xuICAgIHZlcmlmdWludCh2YWx1ZSwgMHhmZmZmZmZmZik7XG4gIH1cblxuICB2YXIgbGVuID0gYnVmLmxlbmd0aDtcbiAgaWYgKG9mZnNldCA+PSBsZW4pIHJldHVybjtcblxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGxlbiAtIG9mZnNldCwgNCk7IGkgPCBqOyBpKyspIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSB2YWx1ZSA+Pj4gKGxpdHRsZUVuZGlhbiA/IGkgOiAzIC0gaSkgKiA4ICYgMHhmZjtcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyTEUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgX3dyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KTtcbn07XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICBfd3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KTtcbn07XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQodmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbCwgJ21pc3NpbmcgdmFsdWUnKTtcbiAgICBhc3NlcnQob2Zmc2V0ICE9PSB1bmRlZmluZWQgJiYgb2Zmc2V0ICE9PSBudWxsLCAnbWlzc2luZyBvZmZzZXQnKTtcbiAgICBhc3NlcnQob2Zmc2V0IDwgdGhpcy5sZW5ndGgsICdUcnlpbmcgdG8gd3JpdGUgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKTtcbiAgICB2ZXJpZnNpbnQodmFsdWUsIDB4N2YsIC0weDgwKTtcbiAgfVxuXG4gIGlmIChvZmZzZXQgPj0gdGhpcy5sZW5ndGgpIHJldHVybjtcblxuICBpZiAodmFsdWUgPj0gMCkgdGhpcy53cml0ZVVJbnQ4KHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KTtlbHNlIHRoaXMud3JpdGVVSW50OCgweGZmICsgdmFsdWUgKyAxLCBvZmZzZXQsIG5vQXNzZXJ0KTtcbn07XG5cbmZ1bmN0aW9uIF93cml0ZUludDE2KGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgYXNzZXJ0KHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwsICdtaXNzaW5nIHZhbHVlJyk7XG4gICAgYXNzZXJ0KHR5cGVvZiBsaXR0bGVFbmRpYW4gPT09ICdib29sZWFuJywgJ21pc3Npbmcgb3IgaW52YWxpZCBlbmRpYW4nKTtcbiAgICBhc3NlcnQob2Zmc2V0ICE9PSB1bmRlZmluZWQgJiYgb2Zmc2V0ICE9PSBudWxsLCAnbWlzc2luZyBvZmZzZXQnKTtcbiAgICBhc3NlcnQob2Zmc2V0ICsgMSA8IGJ1Zi5sZW5ndGgsICdUcnlpbmcgdG8gd3JpdGUgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKTtcbiAgICB2ZXJpZnNpbnQodmFsdWUsIDB4N2ZmZiwgLTB4ODAwMCk7XG4gIH1cblxuICB2YXIgbGVuID0gYnVmLmxlbmd0aDtcbiAgaWYgKG9mZnNldCA+PSBsZW4pIHJldHVybjtcblxuICBpZiAodmFsdWUgPj0gMCkgX3dyaXRlVUludDE2KGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCk7ZWxzZSBfd3JpdGVVSW50MTYoYnVmLCAweGZmZmYgKyB2YWx1ZSArIDEsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCk7XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkxFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIF93cml0ZUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KTtcbn07XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkJFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIF93cml0ZUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydCk7XG59O1xuXG5mdW5jdGlvbiBfd3JpdGVJbnQzMihidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGFzc2VydCh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsLCAnbWlzc2luZyB2YWx1ZScpO1xuICAgIGFzc2VydCh0eXBlb2YgbGl0dGxlRW5kaWFuID09PSAnYm9vbGVhbicsICdtaXNzaW5nIG9yIGludmFsaWQgZW5kaWFuJyk7XG4gICAgYXNzZXJ0KG9mZnNldCAhPT0gdW5kZWZpbmVkICYmIG9mZnNldCAhPT0gbnVsbCwgJ21pc3Npbmcgb2Zmc2V0Jyk7XG4gICAgYXNzZXJ0KG9mZnNldCArIDMgPCBidWYubGVuZ3RoLCAnVHJ5aW5nIHRvIHdyaXRlIGJleW9uZCBidWZmZXIgbGVuZ3RoJyk7XG4gICAgdmVyaWZzaW50KHZhbHVlLCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMCk7XG4gIH1cblxuICB2YXIgbGVuID0gYnVmLmxlbmd0aDtcbiAgaWYgKG9mZnNldCA+PSBsZW4pIHJldHVybjtcblxuICBpZiAodmFsdWUgPj0gMCkgX3dyaXRlVUludDMyKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCk7ZWxzZSBfd3JpdGVVSW50MzIoYnVmLCAweGZmZmZmZmZmICsgdmFsdWUgKyAxLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpO1xufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICBfd3JpdGVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydCk7XG59O1xuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICBfd3JpdGVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpO1xufTtcblxuZnVuY3Rpb24gX3dyaXRlRmxvYXQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQodmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbCwgJ21pc3NpbmcgdmFsdWUnKTtcbiAgICBhc3NlcnQodHlwZW9mIGxpdHRsZUVuZGlhbiA9PT0gJ2Jvb2xlYW4nLCAnbWlzc2luZyBvciBpbnZhbGlkIGVuZGlhbicpO1xuICAgIGFzc2VydChvZmZzZXQgIT09IHVuZGVmaW5lZCAmJiBvZmZzZXQgIT09IG51bGwsICdtaXNzaW5nIG9mZnNldCcpO1xuICAgIGFzc2VydChvZmZzZXQgKyAzIDwgYnVmLmxlbmd0aCwgJ1RyeWluZyB0byB3cml0ZSBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpO1xuICAgIHZlcmlmSUVFRTc1NCh2YWx1ZSwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpO1xuICB9XG5cbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGg7XG4gIGlmIChvZmZzZXQgPj0gbGVuKSByZXR1cm47XG5cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpO1xufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRMRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICBfd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydCk7XG59O1xuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICBfd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpO1xufTtcblxuZnVuY3Rpb24gX3dyaXRlRG91YmxlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgYXNzZXJ0KHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwsICdtaXNzaW5nIHZhbHVlJyk7XG4gICAgYXNzZXJ0KHR5cGVvZiBsaXR0bGVFbmRpYW4gPT09ICdib29sZWFuJywgJ21pc3Npbmcgb3IgaW52YWxpZCBlbmRpYW4nKTtcbiAgICBhc3NlcnQob2Zmc2V0ICE9PSB1bmRlZmluZWQgJiYgb2Zmc2V0ICE9PSBudWxsLCAnbWlzc2luZyBvZmZzZXQnKTtcbiAgICBhc3NlcnQob2Zmc2V0ICsgNyA8IGJ1Zi5sZW5ndGgsICdUcnlpbmcgdG8gd3JpdGUgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKTtcbiAgICB2ZXJpZklFRUU3NTQodmFsdWUsIDEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4LCAtMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgpO1xuICB9XG5cbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGg7XG4gIGlmIChvZmZzZXQgPj0gbGVuKSByZXR1cm47XG5cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpO1xufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlTEUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgX3dyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KTtcbn07XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICBfd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KTtcbn07XG5cbi8vIGZpbGwodmFsdWUsIHN0YXJ0PTAsIGVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24gKHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gIGlmICghdmFsdWUpIHZhbHVlID0gMDtcbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwO1xuICBpZiAoIWVuZCkgZW5kID0gdGhpcy5sZW5ndGg7XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICB2YWx1ZSA9IHZhbHVlLmNoYXJDb2RlQXQoMCk7XG4gIH1cblxuICBhc3NlcnQodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiAhaXNOYU4odmFsdWUpLCAndmFsdWUgaXMgbm90IGEgbnVtYmVyJyk7XG4gIGFzc2VydChlbmQgPj0gc3RhcnQsICdlbmQgPCBzdGFydCcpO1xuXG4gIC8vIEZpbGwgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuO1xuICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybjtcblxuICBhc3NlcnQoc3RhcnQgPj0gMCAmJiBzdGFydCA8IHRoaXMubGVuZ3RoLCAnc3RhcnQgb3V0IG9mIGJvdW5kcycpO1xuICBhc3NlcnQoZW5kID49IDAgJiYgZW5kIDw9IHRoaXMubGVuZ3RoLCAnZW5kIG91dCBvZiBib3VuZHMnKTtcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgIHRoaXNbaV0gPSB2YWx1ZTtcbiAgfVxufTtcblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgb3V0ID0gW107XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIG91dFtpXSA9IHRvSGV4KHRoaXNbaV0pO1xuICAgIGlmIChpID09PSBleHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTKSB7XG4gICAgICBvdXRbaSArIDFdID0gJy4uLic7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuICc8QnVmZmVyICcgKyBvdXQuam9pbignICcpICsgJz4nO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGBBcnJheUJ1ZmZlcmAgd2l0aCB0aGUgKmNvcGllZCogbWVtb3J5IG9mIHRoZSBidWZmZXIgaW5zdGFuY2UuXG4gKiBBZGRlZCBpbiBOb2RlIDAuMTIuIE9ubHkgYXZhaWxhYmxlIGluIGJyb3dzZXJzIHRoYXQgc3VwcG9ydCBBcnJheUJ1ZmZlci5cbiAqL1xuQnVmZmVyLnByb3RvdHlwZS50b0FycmF5QnVmZmVyID0gZnVuY3Rpb24gKCkge1xuICBpZiAodHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKEJ1ZmZlci5fdXNlVHlwZWRBcnJheXMpIHtcbiAgICAgIHJldHVybiBuZXcgQnVmZmVyKHRoaXMpLmJ1ZmZlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGJ1ZiA9IG5ldyBVaW50OEFycmF5KHRoaXMubGVuZ3RoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBidWYubGVuZ3RoOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgYnVmW2ldID0gdGhpc1tpXTtcbiAgICAgIH1yZXR1cm4gYnVmLmJ1ZmZlcjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdCdWZmZXIudG9BcnJheUJ1ZmZlciBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlcicpO1xuICB9XG59O1xuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbmZ1bmN0aW9uIHN0cmluZ3RyaW0oc3RyKSB7XG4gIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKCk7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpO1xufVxuXG52YXIgQlAgPSBCdWZmZXIucHJvdG90eXBlO1xuXG4vKipcbiAqIEF1Z21lbnQgYSBVaW50OEFycmF5ICppbnN0YW5jZSogKG5vdCB0aGUgVWludDhBcnJheSBjbGFzcyEpIHdpdGggQnVmZmVyIG1ldGhvZHNcbiAqL1xuQnVmZmVyLl9hdWdtZW50ID0gZnVuY3Rpb24gKGFycikge1xuICBhcnIuX2lzQnVmZmVyID0gdHJ1ZTtcblxuICAvLyBzYXZlIHJlZmVyZW5jZSB0byBvcmlnaW5hbCBVaW50OEFycmF5IGdldC9zZXQgbWV0aG9kcyBiZWZvcmUgb3ZlcndyaXRpbmdcbiAgYXJyLl9nZXQgPSBhcnIuZ2V0O1xuICBhcnIuX3NldCA9IGFyci5zZXQ7XG5cbiAgLy8gZGVwcmVjYXRlZCwgd2lsbCBiZSByZW1vdmVkIGluIG5vZGUgMC4xMytcbiAgYXJyLmdldCA9IEJQLmdldDtcbiAgYXJyLnNldCA9IEJQLnNldDtcblxuICBhcnIud3JpdGUgPSBCUC53cml0ZTtcbiAgYXJyLnRvU3RyaW5nID0gQlAudG9TdHJpbmc7XG4gIGFyci50b0xvY2FsZVN0cmluZyA9IEJQLnRvU3RyaW5nO1xuICBhcnIudG9KU09OID0gQlAudG9KU09OO1xuICBhcnIuY29weSA9IEJQLmNvcHk7XG4gIGFyci5zbGljZSA9IEJQLnNsaWNlO1xuICBhcnIucmVhZFVJbnQ4ID0gQlAucmVhZFVJbnQ4O1xuICBhcnIucmVhZFVJbnQxNkxFID0gQlAucmVhZFVJbnQxNkxFO1xuICBhcnIucmVhZFVJbnQxNkJFID0gQlAucmVhZFVJbnQxNkJFO1xuICBhcnIucmVhZFVJbnQzMkxFID0gQlAucmVhZFVJbnQzMkxFO1xuICBhcnIucmVhZFVJbnQzMkJFID0gQlAucmVhZFVJbnQzMkJFO1xuICBhcnIucmVhZEludDggPSBCUC5yZWFkSW50ODtcbiAgYXJyLnJlYWRJbnQxNkxFID0gQlAucmVhZEludDE2TEU7XG4gIGFyci5yZWFkSW50MTZCRSA9IEJQLnJlYWRJbnQxNkJFO1xuICBhcnIucmVhZEludDMyTEUgPSBCUC5yZWFkSW50MzJMRTtcbiAgYXJyLnJlYWRJbnQzMkJFID0gQlAucmVhZEludDMyQkU7XG4gIGFyci5yZWFkRmxvYXRMRSA9IEJQLnJlYWRGbG9hdExFO1xuICBhcnIucmVhZEZsb2F0QkUgPSBCUC5yZWFkRmxvYXRCRTtcbiAgYXJyLnJlYWREb3VibGVMRSA9IEJQLnJlYWREb3VibGVMRTtcbiAgYXJyLnJlYWREb3VibGVCRSA9IEJQLnJlYWREb3VibGVCRTtcbiAgYXJyLndyaXRlVUludDggPSBCUC53cml0ZVVJbnQ4O1xuICBhcnIud3JpdGVVSW50MTZMRSA9IEJQLndyaXRlVUludDE2TEU7XG4gIGFyci53cml0ZVVJbnQxNkJFID0gQlAud3JpdGVVSW50MTZCRTtcbiAgYXJyLndyaXRlVUludDMyTEUgPSBCUC53cml0ZVVJbnQzMkxFO1xuICBhcnIud3JpdGVVSW50MzJCRSA9IEJQLndyaXRlVUludDMyQkU7XG4gIGFyci53cml0ZUludDggPSBCUC53cml0ZUludDg7XG4gIGFyci53cml0ZUludDE2TEUgPSBCUC53cml0ZUludDE2TEU7XG4gIGFyci53cml0ZUludDE2QkUgPSBCUC53cml0ZUludDE2QkU7XG4gIGFyci53cml0ZUludDMyTEUgPSBCUC53cml0ZUludDMyTEU7XG4gIGFyci53cml0ZUludDMyQkUgPSBCUC53cml0ZUludDMyQkU7XG4gIGFyci53cml0ZUZsb2F0TEUgPSBCUC53cml0ZUZsb2F0TEU7XG4gIGFyci53cml0ZUZsb2F0QkUgPSBCUC53cml0ZUZsb2F0QkU7XG4gIGFyci53cml0ZURvdWJsZUxFID0gQlAud3JpdGVEb3VibGVMRTtcbiAgYXJyLndyaXRlRG91YmxlQkUgPSBCUC53cml0ZURvdWJsZUJFO1xuICBhcnIuZmlsbCA9IEJQLmZpbGw7XG4gIGFyci5pbnNwZWN0ID0gQlAuaW5zcGVjdDtcbiAgYXJyLnRvQXJyYXlCdWZmZXIgPSBCUC50b0FycmF5QnVmZmVyO1xuXG4gIHJldHVybiBhcnI7XG59O1xuXG4vLyBzbGljZShzdGFydCwgZW5kKVxuZnVuY3Rpb24gY2xhbXAoaW5kZXgsIGxlbiwgZGVmYXVsdFZhbHVlKSB7XG4gIGlmICh0eXBlb2YgaW5kZXggIT09ICdudW1iZXInKSByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICBpbmRleCA9IH5+aW5kZXg7IC8vIENvZXJjZSB0byBpbnRlZ2VyLlxuICBpZiAoaW5kZXggPj0gbGVuKSByZXR1cm4gbGVuO1xuICBpZiAoaW5kZXggPj0gMCkgcmV0dXJuIGluZGV4O1xuICBpbmRleCArPSBsZW47XG4gIGlmIChpbmRleCA+PSAwKSByZXR1cm4gaW5kZXg7XG4gIHJldHVybiAwO1xufVxuXG5mdW5jdGlvbiBjb2VyY2UobGVuZ3RoKSB7XG4gIC8vIENvZXJjZSBsZW5ndGggdG8gYSBudW1iZXIgKHBvc3NpYmx5IE5hTiksIHJvdW5kIHVwXG4gIC8vIGluIGNhc2UgaXQncyBmcmFjdGlvbmFsIChlLmcuIDEyMy40NTYpIHRoZW4gZG8gYVxuICAvLyBkb3VibGUgbmVnYXRlIHRvIGNvZXJjZSBhIE5hTiB0byAwLiBFYXN5LCByaWdodD9cbiAgbGVuZ3RoID0gfn5NYXRoLmNlaWwoK2xlbmd0aCk7XG4gIHJldHVybiBsZW5ndGggPCAwID8gMCA6IGxlbmd0aDtcbn1cblxuZnVuY3Rpb24gaXNBcnJheShzdWJqZWN0KSB7XG4gIHJldHVybiAoQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoc3ViamVjdCkge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3ViamVjdCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG4gIH0pKHN1YmplY3QpO1xufVxuXG5mdW5jdGlvbiBpc0FycmF5aXNoKHN1YmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXkoc3ViamVjdCkgfHwgQnVmZmVyLmlzQnVmZmVyKHN1YmplY3QpIHx8IHN1YmplY3QgJiYgKHR5cGVvZiBzdWJqZWN0ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihzdWJqZWN0KSkgPT09ICdvYmplY3QnICYmIHR5cGVvZiBzdWJqZWN0Lmxlbmd0aCA9PT0gJ251bWJlcic7XG59XG5cbmZ1bmN0aW9uIHRvSGV4KG4pIHtcbiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpO1xuICByZXR1cm4gbi50b1N0cmluZygxNik7XG59XG5cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzKHN0cikge1xuICB2YXIgYnl0ZUFycmF5ID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGIgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICBpZiAoYiA8PSAweDdGKSBieXRlQXJyYXkucHVzaChzdHIuY2hhckNvZGVBdChpKSk7ZWxzZSB7XG4gICAgICB2YXIgc3RhcnQgPSBpO1xuICAgICAgaWYgKGIgPj0gMHhEODAwICYmIGIgPD0gMHhERkZGKSBpKys7XG4gICAgICB2YXIgaCA9IGVuY29kZVVSSUNvbXBvbmVudChzdHIuc2xpY2Uoc3RhcnQsIGkgKyAxKSkuc3Vic3RyKDEpLnNwbGl0KCclJyk7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGgubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgYnl0ZUFycmF5LnB1c2gocGFyc2VJbnQoaFtqXSwgMTYpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJ5dGVBcnJheTtcbn1cblxuZnVuY3Rpb24gYXNjaWlUb0J5dGVzKHN0cikge1xuICB2YXIgYnl0ZUFycmF5ID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgLy8gTm9kZSdzIGNvZGUgc2VlbXMgdG8gYmUgZG9pbmcgdGhpcyBhbmQgbm90ICYgMHg3Ri4uXG4gICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKTtcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5O1xufVxuXG5mdW5jdGlvbiB1dGYxNmxlVG9CeXRlcyhzdHIpIHtcbiAgdmFyIGMsIGhpLCBsbztcbiAgdmFyIGJ5dGVBcnJheSA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICBoaSA9IGMgPj4gODtcbiAgICBsbyA9IGMgJSAyNTY7XG4gICAgYnl0ZUFycmF5LnB1c2gobG8pO1xuICAgIGJ5dGVBcnJheS5wdXNoKGhpKTtcbiAgfVxuXG4gIHJldHVybiBieXRlQXJyYXk7XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMoc3RyKSB7XG4gIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoc3RyKTtcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlcihzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgdmFyIHBvcztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGlmIChpICsgb2Zmc2V0ID49IGRzdC5sZW5ndGggfHwgaSA+PSBzcmMubGVuZ3RoKSBicmVhaztcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV07XG4gIH1cbiAgcmV0dXJuIGk7XG59XG5cbmZ1bmN0aW9uIGRlY29kZVV0ZjhDaGFyKHN0cikge1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoc3RyKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoMHhGRkZEKTsgLy8gVVRGIDggaW52YWxpZCBjaGFyXG4gIH1cbn1cblxuLypcbiAqIFdlIGhhdmUgdG8gbWFrZSBzdXJlIHRoYXQgdGhlIHZhbHVlIGlzIGEgdmFsaWQgaW50ZWdlci4gVGhpcyBtZWFucyB0aGF0IGl0XG4gKiBpcyBub24tbmVnYXRpdmUuIEl0IGhhcyBubyBmcmFjdGlvbmFsIGNvbXBvbmVudCBhbmQgdGhhdCBpdCBkb2VzIG5vdFxuICogZXhjZWVkIHRoZSBtYXhpbXVtIGFsbG93ZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHZlcmlmdWludCh2YWx1ZSwgbWF4KSB7XG4gIGFzc2VydCh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInLCAnY2Fubm90IHdyaXRlIGEgbm9uLW51bWJlciBhcyBhIG51bWJlcicpO1xuICBhc3NlcnQodmFsdWUgPj0gMCwgJ3NwZWNpZmllZCBhIG5lZ2F0aXZlIHZhbHVlIGZvciB3cml0aW5nIGFuIHVuc2lnbmVkIHZhbHVlJyk7XG4gIGFzc2VydCh2YWx1ZSA8PSBtYXgsICd2YWx1ZSBpcyBsYXJnZXIgdGhhbiBtYXhpbXVtIHZhbHVlIGZvciB0eXBlJyk7XG4gIGFzc2VydChNYXRoLmZsb29yKHZhbHVlKSA9PT0gdmFsdWUsICd2YWx1ZSBoYXMgYSBmcmFjdGlvbmFsIGNvbXBvbmVudCcpO1xufVxuXG5mdW5jdGlvbiB2ZXJpZnNpbnQodmFsdWUsIG1heCwgbWluKSB7XG4gIGFzc2VydCh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInLCAnY2Fubm90IHdyaXRlIGEgbm9uLW51bWJlciBhcyBhIG51bWJlcicpO1xuICBhc3NlcnQodmFsdWUgPD0gbWF4LCAndmFsdWUgbGFyZ2VyIHRoYW4gbWF4aW11bSBhbGxvd2VkIHZhbHVlJyk7XG4gIGFzc2VydCh2YWx1ZSA+PSBtaW4sICd2YWx1ZSBzbWFsbGVyIHRoYW4gbWluaW11bSBhbGxvd2VkIHZhbHVlJyk7XG4gIGFzc2VydChNYXRoLmZsb29yKHZhbHVlKSA9PT0gdmFsdWUsICd2YWx1ZSBoYXMgYSBmcmFjdGlvbmFsIGNvbXBvbmVudCcpO1xufVxuXG5mdW5jdGlvbiB2ZXJpZklFRUU3NTQodmFsdWUsIG1heCwgbWluKSB7XG4gIGFzc2VydCh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInLCAnY2Fubm90IHdyaXRlIGEgbm9uLW51bWJlciBhcyBhIG51bWJlcicpO1xuICBhc3NlcnQodmFsdWUgPD0gbWF4LCAndmFsdWUgbGFyZ2VyIHRoYW4gbWF4aW11bSBhbGxvd2VkIHZhbHVlJyk7XG4gIGFzc2VydCh2YWx1ZSA+PSBtaW4sICd2YWx1ZSBzbWFsbGVyIHRoYW4gbWluaW11bSBhbGxvd2VkIHZhbHVlJyk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydCh0ZXN0LCBtZXNzYWdlKSB7XG4gIGlmICghdGVzdCkgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UgfHwgJ0ZhaWxlZCBhc3NlcnRpb24nKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltbHVaR1Y0TG1weklsMHNJbTVoYldWeklqcGJJbUpoYzJVMk5DSXNJbkpsY1hWcGNtVWlMQ0pwWldWbE56VTBJaXdpWlhod2IzSjBjeUlzSWtKMVptWmxjaUlzSWxOc2IzZENkV1ptWlhJaUxDSkpUbE5RUlVOVVgwMUJXRjlDV1ZSRlV5SXNJbkJ2YjJ4VGFYcGxJaXdpWDNWelpWUjVjR1ZrUVhKeVlYbHpJaXdpWW5WbUlpd2lRWEp5WVhsQ2RXWm1aWElpTENKaGNuSWlMQ0pWYVc1ME9FRnljbUY1SWl3aVptOXZJaXdpYzNWaVlYSnlZWGtpTENKbElpd2ljM1ZpYW1WamRDSXNJbVZ1WTI5a2FXNW5JaXdpYm05YVpYSnZJaXdpZEhsd1pTSXNJbk4wY21sdVozUnlhVzBpTENKc1pXNW5kR2dpTENKamIyVnlZMlVpTENKaWVYUmxUR1Z1WjNSb0lpd2lSWEp5YjNJaUxDSmZZWFZuYldWdWRDSXNJbDlwYzBKMVptWmxjaUlzSW1raUxDSmZjMlYwSWl3aWFYTkJjbkpoZVdsemFDSXNJbWx6UW5WbVptVnlJaXdpY21WaFpGVkpiblE0SWl3aWQzSnBkR1VpTENKcGMwVnVZMjlrYVc1bklpd2lVM1J5YVc1bklpd2lkRzlNYjNkbGNrTmhjMlVpTENKaUlpd2lkVzVrWldacGJtVmtJaXdpYzNSeUlpd2ljbVYwSWl3aWRYUm1PRlJ2UW5sMFpYTWlMQ0ppWVhObE5qUlViMEo1ZEdWeklpd2lZMjl1WTJGMElpd2liR2x6ZENJc0luUnZkR0ZzVEdWdVozUm9JaXdpWVhOelpYSjBJaXdpYVhOQmNuSmhlU0lzSW5CdmN5SXNJbWwwWlcwaUxDSmpiM0I1SWl3aVgyaGxlRmR5YVhSbElpd2ljM1J5YVc1bklpd2liMlptYzJWMElpd2lUblZ0WW1WeUlpd2ljbVZ0WVdsdWFXNW5JaXdpYzNSeVRHVnVJaXdpWW5sMFpTSXNJbkJoY25ObFNXNTBJaXdpYzNWaWMzUnlJaXdpYVhOT1lVNGlMQ0pmWTJoaGNuTlhjbWwwZEdWdUlpd2lYM1YwWmpoWGNtbDBaU0lzSW1Ob1lYSnpWM0pwZEhSbGJpSXNJbUpzYVhSQ2RXWm1aWElpTENKZllYTmphV2xYY21sMFpTSXNJbUZ6WTJscFZHOUNlWFJsY3lJc0lsOWlhVzVoY25sWGNtbDBaU0lzSWw5aVlYTmxOalJYY21sMFpTSXNJbDkxZEdZeE5teGxWM0pwZEdVaUxDSjFkR1l4Tm14bFZHOUNlWFJsY3lJc0luQnliM1J2ZEhsd1pTSXNJbWx6Um1sdWFYUmxJaXdpYzNkaGNDSXNJblJ2VTNSeWFXNW5JaXdpYzNSaGNuUWlMQ0psYm1RaUxDSnpaV3htSWl3aVgyaGxlRk5zYVdObElpd2lYM1YwWmpoVGJHbGpaU0lzSWw5aGMyTnBhVk5zYVdObElpd2lYMkpwYm1GeWVWTnNhV05sSWl3aVgySmhjMlUyTkZOc2FXTmxJaXdpWDNWMFpqRTJiR1ZUYkdsalpTSXNJblJ2U2xOUFRpSXNJbVJoZEdFaUxDSkJjbkpoZVNJc0luTnNhV05sSWl3aVkyRnNiQ0lzSWw5aGNuSWlMQ0owWVhKblpYUWlMQ0owWVhKblpYUmZjM1JoY25RaUxDSnpiM1Z5WTJVaUxDSnNaVzRpTENKbWNtOXRRbmwwWlVGeWNtRjVJaXdpY21Weklpd2lkRzF3SWl3aVRXRjBhQ0lzSW0xcGJpSXNJbVJsWTI5a1pWVjBaamhEYUdGeUlpd2labkp2YlVOb1lYSkRiMlJsSWl3aWIzVjBJaXdpZEc5SVpYZ2lMQ0ppZVhSbGN5SXNJbU5zWVcxd0lpd2ljMnhwWTJWTVpXNGlMQ0p1WlhkQ2RXWWlMQ0puWlhRaUxDSmpiMjV6YjJ4bElpd2liRzluSWl3aWMyVjBJaXdpZGlJc0luZHlhWFJsVlVsdWREZ2lMQ0p1YjBGemMyVnlkQ0lzSWw5eVpXRmtWVWx1ZERFMklpd2liR2wwZEd4bFJXNWthV0Z1SWl3aWRtRnNJaXdpY21WaFpGVkpiblF4Tmt4Rklpd2ljbVZoWkZWSmJuUXhOa0pGSWl3aVgzSmxZV1JWU1c1ME16SWlMQ0p5WldGa1ZVbHVkRE15VEVVaUxDSnlaV0ZrVlVsdWRETXlRa1VpTENKeVpXRmtTVzUwT0NJc0ltNWxaeUlzSWw5eVpXRmtTVzUwTVRZaUxDSnlaV0ZrU1c1ME1UWk1SU0lzSW5KbFlXUkpiblF4TmtKRklpd2lYM0psWVdSSmJuUXpNaUlzSW5KbFlXUkpiblF6TWt4Rklpd2ljbVZoWkVsdWRETXlRa1VpTENKZmNtVmhaRVpzYjJGMElpd2ljbVZoWkNJc0luSmxZV1JHYkc5aGRFeEZJaXdpY21WaFpFWnNiMkYwUWtVaUxDSmZjbVZoWkVSdmRXSnNaU0lzSW5KbFlXUkViM1ZpYkdWTVJTSXNJbkpsWVdSRWIzVmliR1ZDUlNJc0luWmhiSFZsSWl3aWRtVnlhV1oxYVc1MElpd2lYM2R5YVhSbFZVbHVkREUySWl3aWFpSXNJbmR5YVhSbFZVbHVkREUyVEVVaUxDSjNjbWwwWlZWSmJuUXhOa0pGSWl3aVgzZHlhWFJsVlVsdWRETXlJaXdpZDNKcGRHVlZTVzUwTXpKTVJTSXNJbmR5YVhSbFZVbHVkRE15UWtVaUxDSjNjbWwwWlVsdWREZ2lMQ0oyWlhKcFpuTnBiblFpTENKZmQzSnBkR1ZKYm5ReE5pSXNJbmR5YVhSbFNXNTBNVFpNUlNJc0luZHlhWFJsU1c1ME1UWkNSU0lzSWw5M2NtbDBaVWx1ZERNeUlpd2lkM0pwZEdWSmJuUXpNa3hGSWl3aWQzSnBkR1ZKYm5Rek1rSkZJaXdpWDNkeWFYUmxSbXh2WVhRaUxDSjJaWEpwWmtsRlJVVTNOVFFpTENKM2NtbDBaVVpzYjJGMFRFVWlMQ0ozY21sMFpVWnNiMkYwUWtVaUxDSmZkM0pwZEdWRWIzVmliR1VpTENKM2NtbDBaVVJ2ZFdKc1pVeEZJaXdpZDNKcGRHVkViM1ZpYkdWQ1JTSXNJbVpwYkd3aUxDSmphR0Z5UTI5a1pVRjBJaXdpYVc1emNHVmpkQ0lzSW1wdmFXNGlMQ0owYjBGeWNtRjVRblZtWm1WeUlpd2lZblZtWm1WeUlpd2lkSEpwYlNJc0luSmxjR3hoWTJVaUxDSkNVQ0lzSWw5blpYUWlMQ0owYjB4dlkyRnNaVk4wY21sdVp5SXNJbWx1WkdWNElpd2laR1ZtWVhWc2RGWmhiSFZsSWl3aVkyVnBiQ0lzSWs5aWFtVmpkQ0lzSW00aUxDSmllWFJsUVhKeVlYa2lMQ0p3ZFhOb0lpd2lhQ0lzSW1WdVkyOWtaVlZTU1VOdmJYQnZibVZ1ZENJc0luTndiR2wwSWl3aVl5SXNJbWhwSWl3aWJHOGlMQ0owYjBKNWRHVkJjbkpoZVNJc0luTnlZeUlzSW1SemRDSXNJbVJsWTI5a1pWVlNTVU52YlhCdmJtVnVkQ0lzSW1WeWNpSXNJbTFoZUNJc0ltWnNiMjl5SWl3aWRHVnpkQ0lzSW0xbGMzTmhaMlVpWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3UVVGQlFUczdPenM3T3p0QlFVOUJMRWxCUVVsQkxGTkJRVk5ETEZGQlFWRXNWMEZCVWl4RFFVRmlPMEZCUTBFc1NVRkJTVU1zVlVGQlZVUXNVVUZCVVN4VFFVRlNMRU5CUVdRN08wRkJSVUZGTEZGQlFWRkRMRTFCUVZJc1IwRkJhVUpCTEUxQlFXcENPMEZCUTBGRUxGRkJRVkZGTEZWQlFWSXNSMEZCY1VKRUxFMUJRWEpDTzBGQlEwRkVMRkZCUVZGSExHbENRVUZTTEVkQlFUUkNMRVZCUVRWQ08wRkJRMEZHTEU5QlFVOUhMRkZCUVZBc1IwRkJhMElzU1VGQmJFSTdPMEZCUlVFN096czdPMEZCUzBGSUxFOUJRVTlKTEdWQlFWQXNSMEZCTUVJc1dVRkJXVHRCUVVOd1F6dEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1RVRkJTVHRCUVVOR0xGRkJRVWxETEUxQlFVMHNTVUZCU1VNc1YwRkJTaXhEUVVGblFpeERRVUZvUWl4RFFVRldPMEZCUTBFc1VVRkJTVU1zVFVGQlRTeEpRVUZKUXl4VlFVRktMRU5CUVdWSUxFZEJRV1lzUTBGQlZqdEJRVU5CUlN4UlFVRkpSU3hIUVVGS0xFZEJRVlVzV1VGQldUdEJRVUZGTEdGQlFVOHNSVUZCVUR0QlFVRlhMRXRCUVc1RE8wRkJRMEVzVjBGQlR5eFBRVUZQUml4SlFVRkpSU3hIUVVGS0xFVkJRVkFzU1VGRFNDeFBRVUZQUml4SlFVRkpSeXhSUVVGWUxFdEJRWGRDTEZWQlJEVkNMRU5CU2tVc1EwRkxjVU03UVVGRGVFTXNSMEZPUkN4RFFVMUZMRTlCUVU5RExFTkJRVkFzUlVGQlZUdEJRVU5XTEZkQlFVOHNTMEZCVUR0QlFVTkVPMEZCUTBZc1EwRm1kMElzUlVGQmVrSTdPMEZCYVVKQk96czdPenM3T3pzN096czdRVUZaUVN4VFFVRlRXQ3hOUVVGVUxFTkJRV2xDV1N4UFFVRnFRaXhGUVVFd1FrTXNVVUZCTVVJc1JVRkJiME5ETEUxQlFYQkRMRVZCUVRSRE8wRkJRekZETEUxQlFVa3NSVUZCUlN4blFrRkJaMEprTEUxQlFXeENMRU5CUVVvc1JVRkRSU3hQUVVGUExFbEJRVWxCTEUxQlFVb3NRMEZCVjFrc1QwRkJXQ3hGUVVGdlFrTXNVVUZCY0VJc1JVRkJPRUpETEUxQlFUbENMRU5CUVZBN08wRkJSVVlzVFVGQlNVTXNZMEZCWTBnc1QwRkJaQ3g1UTBGQlkwRXNUMEZCWkN4RFFVRktPenRCUVVWQk8wRkJRMEU3UVVGRFFTeE5RVUZKUXl4aFFVRmhMRkZCUVdJc1NVRkJlVUpGTEZOQlFWTXNVVUZCZEVNc1JVRkJaMFE3UVVGRE9VTklMR05CUVZWSkxGZEJRVmRLTEU5QlFWZ3NRMEZCVmp0QlFVTkJMRmRCUVU5QkxGRkJRVkZMTEUxQlFWSXNSMEZCYVVJc1EwRkJha0lzUzBGQmRVSXNRMEZCT1VJc1JVRkJhVU03UVVGREwwSk1MR2RDUVVGVlFTeFZRVUZWTEVkQlFYQkNPMEZCUTBRN1FVRkRSanM3UVVGRlJEdEJRVU5CTEUxQlFVbExMRTFCUVVvN1FVRkRRU3hOUVVGSlJpeFRRVUZUTEZGQlFXSXNSVUZEUlVVc1UwRkJVME1zVDBGQlQwNHNUMEZCVUN4RFFVRlVMRU5CUkVZc1MwRkZTeXhKUVVGSlJ5eFRRVUZUTEZGQlFXSXNSVUZEU0VVc1UwRkJVMnBDTEU5QlFVOXRRaXhWUVVGUUxFTkJRV3RDVUN4UFFVRnNRaXhGUVVFeVFrTXNVVUZCTTBJc1EwRkJWQ3hEUVVSSExFdEJSVUVzU1VGQlNVVXNVMEZCVXl4UlFVRmlMRVZCUTBoRkxGTkJRVk5ETEU5QlFVOU9MRkZCUVZGTExFMUJRV1lzUTBGQlZDeERRVVJITEVOQlF6WkNPMEZCUkRkQ0xFOUJSMGdzVFVGQlRTeEpRVUZKUnl4TFFVRktMRU5CUVZVc2RVUkJRVllzUTBGQlRqczdRVUZGUml4TlFVRkpaaXhIUVVGS08wRkJRMEVzVFVGQlNVd3NUMEZCVDBrc1pVRkJXQ3hGUVVFMFFqdEJRVU14UWp0QlFVTkJReXhWUVVGTlRDeFBRVUZQY1VJc1VVRkJVQ3hEUVVGblFpeEpRVUZKWWl4VlFVRktMRU5CUVdWVExFMUJRV1lzUTBGQmFFSXNRMEZCVGp0QlFVTkVMRWRCU0VRc1RVRkhUenRCUVVOTU8wRkJRMEZhTEZWQlFVMHNTVUZCVGp0QlFVTkJRU3hSUVVGSldTeE5RVUZLTEVkQlFXRkJMRTFCUVdJN1FVRkRRVm9zVVVGQlNXbENMRk5CUVVvc1IwRkJaMElzU1VGQmFFSTdRVUZEUkRzN1FVRkZSQ3hOUVVGSlF5eERRVUZLTzBGQlEwRXNUVUZCU1haQ0xFOUJRVTlKTEdWQlFWQXNTVUZCTUVJc1QwRkJUMUVzVVVGQlVVOHNWVUZCWml4TFFVRTRRaXhSUVVFMVJDeEZRVUZ6UlR0QlFVTndSVHRCUVVOQlpDeFJRVUZKYlVJc1NVRkJTaXhEUVVGVFdpeFBRVUZVTzBGQlEwUXNSMEZJUkN4TlFVZFBMRWxCUVVsaExGZEJRVmRpTEU5QlFWZ3NRMEZCU2l4RlFVRjVRanRCUVVNNVFqdEJRVU5CTEZOQlFVdFhMRWxCUVVrc1EwRkJWQ3hGUVVGWlFTeEpRVUZKVGl4TlFVRm9RaXhGUVVGM1FrMHNSMEZCZUVJc1JVRkJOa0k3UVVGRE0wSXNWVUZCU1haQ0xFOUJRVTh3UWl4UlFVRlFMRU5CUVdkQ1pDeFBRVUZvUWl4RFFVRktMRVZCUTBWUUxFbEJRVWxyUWl4RFFVRktMRWxCUVZOWUxGRkJRVkZsTEZOQlFWSXNRMEZCYTBKS0xFTkJRV3hDTEVOQlFWUXNRMEZFUml4TFFVZEZiRUlzU1VGQlNXdENMRU5CUVVvc1NVRkJVMWdzVVVGQlVWY3NRMEZCVWl4RFFVRlVPMEZCUTBnN1FVRkRSaXhIUVZKTkxFMUJVVUVzU1VGQlNWSXNVMEZCVXl4UlFVRmlMRVZCUVhWQ08wRkJRelZDVml4UlFVRkpkVUlzUzBGQlNpeERRVUZWYUVJc1QwRkJWaXhGUVVGdFFpeERRVUZ1UWl4RlFVRnpRa01zVVVGQmRFSTdRVUZEUkN4SFFVWk5MRTFCUlVFc1NVRkJTVVVzVTBGQlV5eFJRVUZVTEVsQlFYRkNMRU5CUVVObUxFOUJRVTlKTEdWQlFUZENMRWxCUVdkRUxFTkJRVU5WTEUxQlFYSkVMRVZCUVRaRU8wRkJRMnhGTEZOQlFVdFRMRWxCUVVrc1EwRkJWQ3hGUVVGWlFTeEpRVUZKVGl4TlFVRm9RaXhGUVVGM1FrMHNSMEZCZUVJc1JVRkJOa0k3UVVGRE0wSnNRaXhWUVVGSmEwSXNRMEZCU2l4SlFVRlRMRU5CUVZRN1FVRkRSRHRCUVVOR096dEJRVVZFTEZOQlFVOXNRaXhIUVVGUU8wRkJRMFE3TzBGQlJVUTdRVUZEUVRzN1FVRkZRVXdzVDBGQlR6WkNMRlZCUVZBc1IwRkJiMElzVlVGQlZXaENMRkZCUVZZc1JVRkJiMEk3UVVGRGRFTXNWVUZCVVdsQ0xFOUJRVTlxUWl4UlFVRlFMRVZCUVdsQ2EwSXNWMEZCYWtJc1JVRkJVanRCUVVORkxGTkJRVXNzUzBGQlREdEJRVU5CTEZOQlFVc3NUVUZCVER0QlFVTkJMRk5CUVVzc1QwRkJURHRCUVVOQkxGTkJRVXNzVDBGQlREdEJRVU5CTEZOQlFVc3NVVUZCVER0QlFVTkJMRk5CUVVzc1VVRkJURHRCUVVOQkxGTkJRVXNzUzBGQlREdEJRVU5CTEZOQlFVc3NUVUZCVER0QlFVTkJMRk5CUVVzc1QwRkJURHRCUVVOQkxGTkJRVXNzVTBGQlREdEJRVU5CTEZOQlFVc3NWVUZCVER0QlFVTkZMR0ZCUVU4c1NVRkJVRHRCUVVOR08wRkJRMFVzWVVGQlR5eExRVUZRTzBGQlpFbzdRVUZuUWtRc1EwRnFRa1E3TzBGQmJVSkJMMElzVDBGQlR6QkNMRkZCUVZBc1IwRkJhMElzVlVGQlZVMHNRMEZCVml4RlFVRmhPMEZCUXpkQ0xGTkJRVThzUTBGQlF5eEZRVUZGUVN4TlFVRk5MRWxCUVU0c1NVRkJZMEVzVFVGQlRVTXNVMEZCY0VJc1NVRkJhVU5FTEVWQlFVVldMRk5CUVhKRExFTkJRVkk3UVVGRFJDeERRVVpFT3p0QlFVbEJkRUlzVDBGQlQyMUNMRlZCUVZBc1IwRkJiMElzVlVGQlZXVXNSMEZCVml4RlFVRmxja0lzVVVGQlppeEZRVUY1UWp0QlFVTXpReXhOUVVGSmMwSXNSMEZCU2p0QlFVTkJSQ3hSUVVGTlFTeE5RVUZOTEVWQlFWbzdRVUZEUVN4VlFVRlJja0lzV1VGQldTeE5RVUZ3UWp0QlFVTkZMRk5CUVVzc1MwRkJURHRCUVVORmMwSXNXVUZCVFVRc1NVRkJTV3BDTEUxQlFVb3NSMEZCWVN4RFFVRnVRanRCUVVOQk8wRkJRMFlzVTBGQlN5eE5RVUZNTzBGQlEwRXNVMEZCU3l4UFFVRk1PMEZCUTBWclFpeFpRVUZOUXl4WlFVRlpSaXhIUVVGYUxFVkJRV2xDYWtJc1RVRkJka0k3UVVGRFFUdEJRVU5HTEZOQlFVc3NUMEZCVER0QlFVTkJMRk5CUVVzc1VVRkJURHRCUVVOQkxGTkJRVXNzUzBGQlREdEJRVU5GYTBJc1dVRkJUVVFzU1VGQlNXcENMRTFCUVZZN1FVRkRRVHRCUVVOR0xGTkJRVXNzVVVGQlREdEJRVU5GYTBJc1dVRkJUVVVzWTBGQlkwZ3NSMEZCWkN4RlFVRnRRbXBDTEUxQlFYcENPMEZCUTBFN1FVRkRSaXhUUVVGTExFMUJRVXc3UVVGRFFTeFRRVUZMTEU5QlFVdzdRVUZEUVN4VFFVRkxMRk5CUVV3N1FVRkRRU3hUUVVGTExGVkJRVXc3UVVGRFJXdENMRmxCUVUxRUxFbEJRVWxxUWl4TlFVRktMRWRCUVdFc1EwRkJia0k3UVVGRFFUdEJRVU5HTzBGQlEwVXNXVUZCVFN4SlFVRkpSeXhMUVVGS0xFTkJRVlVzYTBKQlFWWXNRMEZCVGp0QlFYWkNTanRCUVhsQ1FTeFRRVUZQWlN4SFFVRlFPMEZCUTBRc1EwRTNRa1E3TzBGQkswSkJia01zVDBGQlQzTkRMRTFCUVZBc1IwRkJaMElzVlVGQlZVTXNTVUZCVml4RlFVRm5Ra01zVjBGQmFFSXNSVUZCTmtJN1FVRkRNME5ETEZOQlFVOURMRkZCUVZGSUxFbEJRVklzUTBGQlVDeEZRVUZ6UWl4blJFRkRiRUlzTUVKQlJFbzdPMEZCUjBFc1RVRkJTVUVzUzBGQlMzUkNMRTFCUVV3c1MwRkJaMElzUTBGQmNFSXNSVUZCZFVJN1FVRkRja0lzVjBGQlR5eEpRVUZKYWtJc1RVRkJTaXhEUVVGWExFTkJRVmdzUTBGQlVEdEJRVU5FTEVkQlJrUXNUVUZGVHl4SlFVRkpkVU1zUzBGQlMzUkNMRTFCUVV3c1MwRkJaMElzUTBGQmNFSXNSVUZCZFVJN1FVRkROVUlzVjBGQlQzTkNMRXRCUVVzc1EwRkJUQ3hEUVVGUU8wRkJRMFE3TzBGQlJVUXNUVUZCU1doQ0xFTkJRVW83UVVGRFFTeE5RVUZKTEU5QlFVOXBRaXhYUVVGUUxFdEJRWFZDTEZGQlFUTkNMRVZCUVhGRE8wRkJRMjVEUVN4clFrRkJZeXhEUVVGa08wRkJRMEVzVTBGQlMycENMRWxCUVVrc1EwRkJWQ3hGUVVGWlFTeEpRVUZKWjBJc1MwRkJTM1JDTEUxQlFYSkNMRVZCUVRaQ1RTeEhRVUUzUWl4RlFVRnJRenRCUVVOb1EybENMSEZDUVVGbFJDeExRVUZMYUVJc1EwRkJUQ3hGUVVGUlRpeE5RVUYyUWp0QlFVTkVPMEZCUTBZN08wRkJSVVFzVFVGQlNWb3NUVUZCVFN4SlFVRkpUQ3hOUVVGS0xFTkJRVmQzUXl4WFFVRllMRU5CUVZZN1FVRkRRU3hOUVVGSlJ5eE5RVUZOTEVOQlFWWTdRVUZEUVN4UFFVRkxjRUlzU1VGQlNTeERRVUZVTEVWQlFWbEJMRWxCUVVsblFpeExRVUZMZEVJc1RVRkJja0lzUlVGQk5rSk5MRWRCUVRkQ0xFVkJRV3RETzBGQlEyaERMRkZCUVVseFFpeFBRVUZQVEN4TFFVRkxhRUlzUTBGQlRDeERRVUZZTzBGQlEwRnhRaXhUUVVGTFF5eEpRVUZNTEVOQlFWVjRReXhIUVVGV0xFVkJRV1Z6UXl4SFFVRm1PMEZCUTBGQkxGZEJRVTlETEV0QlFVc3pRaXhOUVVGYU8wRkJRMFE3UVVGRFJDeFRRVUZQV2l4SFFVRlFPMEZCUTBRc1EwRXhRa1E3TzBGQk5FSkJPMEZCUTBFN08wRkJSVUVzVTBGQlUzbERMRk5CUVZRc1EwRkJiMEo2UXl4SFFVRndRaXhGUVVGNVFqQkRMRTFCUVhwQ0xFVkJRV2xEUXl4TlFVRnFReXhGUVVGNVF5OUNMRTFCUVhwRExFVkJRV2xFTzBGQlF5OURLMElzVjBGQlUwTXNUMEZCVDBRc1RVRkJVQ3hMUVVGclFpeERRVUV6UWp0QlFVTkJMRTFCUVVsRkxGbEJRVmszUXl4SlFVRkpXU3hOUVVGS0xFZEJRV0VyUWl4TlFVRTNRanRCUVVOQkxFMUJRVWtzUTBGQlF5OUNMRTFCUVV3c1JVRkJZVHRCUVVOWVFTeGhRVUZUYVVNc1UwRkJWRHRCUVVORUxFZEJSa1FzVFVGRlR6dEJRVU5NYWtNc1lVRkJVMmRETEU5QlFVOW9ReXhOUVVGUUxFTkJRVlE3UVVGRFFTeFJRVUZKUVN4VFFVRlRhVU1zVTBGQllpeEZRVUYzUWp0QlFVTjBRbXBETEdWQlFWTnBReXhUUVVGVU8wRkJRMFE3UVVGRFJqczdRVUZGUkR0QlFVTkJMRTFCUVVsRExGTkJRVk5LTEU5QlFVODVRaXhOUVVGd1FqdEJRVU5CZDBJc1UwRkJUMVVzVTBGQlV5eERRVUZVTEV0QlFXVXNRMEZCZEVJc1JVRkJlVUlzYjBKQlFYcENPenRCUVVWQkxFMUJRVWxzUXl4VFFVRlRhME1zVTBGQlV5eERRVUYwUWl4RlFVRjVRanRCUVVOMlFteERMR0ZCUVZOclF5eFRRVUZUTEVOQlFXeENPMEZCUTBRN1FVRkRSQ3hQUVVGTExFbEJRVWsxUWl4SlFVRkpMRU5CUVdJc1JVRkJaMEpCTEVsQlFVbE9MRTFCUVhCQ0xFVkJRVFJDVFN4SFFVRTFRaXhGUVVGcFF6dEJRVU12UWl4UlFVRkpOa0lzVDBGQlQwTXNVMEZCVTA0c1QwRkJUMDhzVFVGQlVDeERRVUZqTDBJc1NVRkJTU3hEUVVGc1FpeEZRVUZ4UWl4RFFVRnlRaXhEUVVGVUxFVkJRV3RETEVWQlFXeERMRU5CUVZnN1FVRkRRV3RDTEZkQlFVOHNRMEZCUTJNc1RVRkJUVWdzU1VGQlRpeERRVUZTTEVWQlFYRkNMRzlDUVVGeVFqdEJRVU5CTDBNc1VVRkJTVEpETEZOQlFWTjZRaXhEUVVGaUxFbEJRV3RDTmtJc1NVRkJiRUk3UVVGRFJEdEJRVU5FY0VRc1UwRkJUM2RFTEdGQlFWQXNSMEZCZFVKcVF5eEpRVUZKTEVOQlFUTkNPMEZCUTBFc1UwRkJUMEVzUTBGQlVEdEJRVU5FT3p0QlFVVkVMRk5CUVZOclF5eFZRVUZVTEVOQlFYRkNjRVFzUjBGQmNrSXNSVUZCTUVJd1F5eE5RVUV4UWl4RlFVRnJRME1zVFVGQmJFTXNSVUZCTUVNdlFpeE5RVUV4UXl4RlFVRnJSRHRCUVVOb1JDeE5RVUZKZVVNc1pVRkJaVEZFTEU5QlFVOTNSQ3hoUVVGUUxFZEJRMnBDUnl4WFFVRlhka0lzV1VGQldWY3NUVUZCV2l4RFFVRllMRVZCUVdkRE1VTXNSMEZCYUVNc1JVRkJjVU15UXl4TlFVRnlReXhGUVVFMlF5OUNMRTFCUVRkRExFTkJSRVk3UVVGRlFTeFRRVUZQZVVNc1dVRkJVRHRCUVVORU96dEJRVVZFTEZOQlFWTkZMRmRCUVZRc1EwRkJjMEoyUkN4SFFVRjBRaXhGUVVFeVFqQkRMRTFCUVROQ0xFVkJRVzFEUXl4TlFVRnVReXhGUVVFeVF5OUNMRTFCUVRORExFVkJRVzFFTzBGQlEycEVMRTFCUVVsNVF5eGxRVUZsTVVRc1QwRkJUM2RFTEdGQlFWQXNSMEZEYWtKSExGZEJRVmRGTEdGQlFXRmtMRTFCUVdJc1EwRkJXQ3hGUVVGcFF6RkRMRWRCUVdwRExFVkJRWE5ETWtNc1RVRkJkRU1zUlVGQk9FTXZRaXhOUVVFNVF5eERRVVJHTzBGQlJVRXNVMEZCVDNsRExGbEJRVkE3UVVGRFJEczdRVUZGUkN4VFFVRlRTU3haUVVGVUxFTkJRWFZDZWtRc1IwRkJka0lzUlVGQk5FSXdReXhOUVVFMVFpeEZRVUZ2UTBNc1RVRkJjRU1zUlVGQk5FTXZRaXhOUVVFMVF5eEZRVUZ2UkR0QlFVTnNSQ3hUUVVGUE1rTXNXVUZCV1haRUxFZEJRVm9zUlVGQmFVSXdReXhOUVVGcVFpeEZRVUY1UWtNc1RVRkJla0lzUlVGQmFVTXZRaXhOUVVGcVF5eERRVUZRTzBGQlEwUTdPMEZCUlVRc1UwRkJVemhETEZsQlFWUXNRMEZCZFVJeFJDeEhRVUYyUWl4RlFVRTBRakJETEUxQlFUVkNMRVZCUVc5RFF5eE5RVUZ3UXl4RlFVRTBReTlDTEUxQlFUVkRMRVZCUVc5RU8wRkJRMnhFTEUxQlFVbDVReXhsUVVGbE1VUXNUMEZCVDNkRUxHRkJRVkFzUjBGRGFrSkhMRmRCUVZkMFFpeGpRVUZqVlN4TlFVRmtMRU5CUVZnc1JVRkJhME14UXl4SFFVRnNReXhGUVVGMVF6SkRMRTFCUVhaRExFVkJRU3RETDBJc1RVRkJMME1zUTBGRVJqdEJRVVZCTEZOQlFVOTVReXhaUVVGUU8wRkJRMFE3TzBGQlJVUXNVMEZCVTAwc1lVRkJWQ3hEUVVGM1FqTkVMRWRCUVhoQ0xFVkJRVFpDTUVNc1RVRkJOMElzUlVGQmNVTkRMRTFCUVhKRExFVkJRVFpETDBJc1RVRkJOME1zUlVGQmNVUTdRVUZEYmtRc1RVRkJTWGxETEdWQlFXVXhSQ3hQUVVGUGQwUXNZVUZCVUN4SFFVTnFRa2NzVjBGQlYwMHNaVUZCWld4Q0xFMUJRV1lzUTBGQldDeEZRVUZ0UXpGRExFZEJRVzVETEVWQlFYZERNa01zVFVGQmVFTXNSVUZCWjBRdlFpeE5RVUZvUkN4RFFVUkdPMEZCUlVFc1UwRkJUM2xETEZsQlFWQTdRVUZEUkRzN1FVRkZSREZFTEU5QlFVOXJSU3hUUVVGUUxFTkJRV2xDZEVNc1MwRkJha0lzUjBGQmVVSXNWVUZCVlcxQ0xFMUJRVllzUlVGQmEwSkRMRTFCUVd4Q0xFVkJRVEJDTDBJc1RVRkJNVUlzUlVGQmEwTktMRkZCUVd4RExFVkJRVFJETzBGQlEyNUZPMEZCUTBFN1FVRkRRU3hOUVVGSmMwUXNVMEZCVTI1Q0xFMUJRVlFzUTBGQlNpeEZRVUZ6UWp0QlFVTndRaXhSUVVGSkxFTkJRVU50UWl4VFFVRlRiRVFzVFVGQlZDeERRVUZNTEVWQlFYVkNPMEZCUTNKQ1NpeHBRa0ZCVjBrc1RVRkJXRHRCUVVOQlFTeGxRVUZUWjBJc1UwRkJWRHRCUVVORU8wRkJRMFlzUjBGTVJDeE5RVXRQTzBGQlFVYzdRVUZEVWl4UlFVRkpiVU1zVDBGQlQzWkVMRkZCUVZnN1FVRkRRVUVzWlVGQlYyMURMRTFCUVZnN1FVRkRRVUVzWVVGQlV5OUNMRTFCUVZRN1FVRkRRVUVzWVVGQlUyMUVMRWxCUVZRN1FVRkRSRHM3UVVGRlJIQkNMRmRCUVZORExFOUJRVTlFTEUxQlFWQXNTMEZCYTBJc1EwRkJNMEk3UVVGRFFTeE5RVUZKUlN4WlFVRlpMRXRCUVV0cVF5eE5RVUZNTEVkQlFXTXJRaXhOUVVFNVFqdEJRVU5CTEUxQlFVa3NRMEZCUXk5Q0xFMUJRVXdzUlVGQllUdEJRVU5ZUVN4aFFVRlRhVU1zVTBGQlZEdEJRVU5FTEVkQlJrUXNUVUZGVHp0QlFVTk1ha01zWVVGQlUyZERMRTlCUVU5b1F5eE5RVUZRTEVOQlFWUTdRVUZEUVN4UlFVRkpRU3hUUVVGVGFVTXNVMEZCWWl4RlFVRjNRanRCUVVOMFFtcERMR1ZCUVZOcFF5eFRRVUZVTzBGQlEwUTdRVUZEUmp0QlFVTkVja01zWVVGQlYybENMRTlCUVU5cVFpeFpRVUZaTEUxQlFXNUNMRVZCUVRKQ2EwSXNWMEZCTTBJc1JVRkJXRHM3UVVGRlFTeE5RVUZKU1N4SFFVRktPMEZCUTBFc1ZVRkJVWFJDTEZGQlFWSTdRVUZEUlN4VFFVRkxMRXRCUVV3N1FVRkRSWE5DTEZsQlFVMVhMRlZCUVZVc1NVRkJWaXhGUVVGblFrTXNUVUZCYUVJc1JVRkJkMEpETEUxQlFYaENMRVZCUVdkREwwSXNUVUZCYUVNc1EwRkJUanRCUVVOQk8wRkJRMFlzVTBGQlN5eE5RVUZNTzBGQlEwRXNVMEZCU3l4UFFVRk1PMEZCUTBWclFpeFpRVUZOYzBJc1YwRkJWeXhKUVVGWUxFVkJRV2xDVml4TlFVRnFRaXhGUVVGNVFrTXNUVUZCZWtJc1JVRkJhVU12UWl4TlFVRnFReXhEUVVGT08wRkJRMEU3UVVGRFJpeFRRVUZMTEU5QlFVdzdRVUZEUld0Q0xGbEJRVTE1UWl4WlFVRlpMRWxCUVZvc1JVRkJhMEppTEUxQlFXeENMRVZCUVRCQ1F5eE5RVUV4UWl4RlFVRnJReTlDTEUxQlFXeERMRU5CUVU0N1FVRkRRVHRCUVVOR0xGTkJRVXNzVVVGQlREdEJRVU5GYTBJc1dVRkJUVEpDTEdGQlFXRXNTVUZCWWl4RlFVRnRRbVlzVFVGQmJrSXNSVUZCTWtKRExFMUJRVE5DTEVWQlFXMURMMElzVFVGQmJrTXNRMEZCVGp0QlFVTkJPMEZCUTBZc1UwRkJTeXhSUVVGTU8wRkJRMFZyUWl4WlFVRk5ORUlzWVVGQllTeEpRVUZpTEVWQlFXMUNhRUlzVFVGQmJrSXNSVUZCTWtKRExFMUJRVE5DTEVWQlFXMURMMElzVFVGQmJrTXNRMEZCVGp0QlFVTkJPMEZCUTBZc1UwRkJTeXhOUVVGTU8wRkJRMEVzVTBGQlN5eFBRVUZNTzBGQlEwRXNVMEZCU3l4VFFVRk1PMEZCUTBFc1UwRkJTeXhWUVVGTU8wRkJRMFZyUWl4WlFVRk5Oa0lzWTBGQll5eEpRVUZrTEVWQlFXOUNha0lzVFVGQmNFSXNSVUZCTkVKRExFMUJRVFZDTEVWQlFXOURMMElzVFVGQmNFTXNRMEZCVGp0QlFVTkJPMEZCUTBZN1FVRkRSU3haUVVGTkxFbEJRVWxITEV0QlFVb3NRMEZCVlN4clFrRkJWaXhEUVVGT08wRkJlRUpLTzBGQk1FSkJMRk5CUVU5bExFZEJRVkE3UVVGRFJDeERRWFpFUkRzN1FVRjVSRUZ1UXl4UFFVRlBhMFVzVTBGQlVDeERRVUZwUWtjc1VVRkJha0lzUjBGQk5FSXNWVUZCVlhoRUxGRkJRVllzUlVGQmIwSjVSQ3hMUVVGd1FpeEZRVUV5UWtNc1IwRkJNMElzUlVGQlowTTdRVUZETVVRc1RVRkJTVU1zVDBGQlR5eEpRVUZZT3p0QlFVVkJNMFFzWVVGQlYybENMRTlCUVU5cVFpeFpRVUZaTEUxQlFXNUNMRVZCUVRKQ2EwSXNWMEZCTTBJc1JVRkJXRHRCUVVOQmRVTXNWVUZCVVhKQ0xFOUJRVTl4UWl4TFFVRlFMRXRCUVdsQ0xFTkJRWHBDTzBGQlEwRkRMRkZCUVU5QkxGRkJRVkYwUXl4VFFVRlVMRWRCUTBablFpeFBRVUZQYzBJc1IwRkJVQ3hEUVVSRkxFZEJSVVpCTEUxQlFVMURMRXRCUVV0MlJDeE5RVVptT3p0QlFVbEJPMEZCUTBFc1RVRkJTWE5FTEZGQlFWRkVMRXRCUVZvc1JVRkRSU3hQUVVGUExFVkJRVkE3TzBGQlJVWXNUVUZCU1c1RExFZEJRVW83UVVGRFFTeFZRVUZSZEVJc1VVRkJVanRCUVVORkxGTkJRVXNzUzBGQlREdEJRVU5GYzBJc1dVRkJUWE5ETEZWQlFWVkVMRWxCUVZZc1JVRkJaMEpHTEV0QlFXaENMRVZCUVhWQ1F5eEhRVUYyUWl4RFFVRk9PMEZCUTBFN1FVRkRSaXhUUVVGTExFMUJRVXc3UVVGRFFTeFRRVUZMTEU5QlFVdzdRVUZEUlhCRExGbEJRVTExUXl4WFFVRlhSaXhKUVVGWUxFVkJRV2xDUml4TFFVRnFRaXhGUVVGM1FrTXNSMEZCZUVJc1EwRkJUanRCUVVOQk8wRkJRMFlzVTBGQlN5eFBRVUZNTzBGQlEwVndReXhaUVVGTmQwTXNXVUZCV1Vnc1NVRkJXaXhGUVVGclFrWXNTMEZCYkVJc1JVRkJlVUpETEVkQlFYcENMRU5CUVU0N1FVRkRRVHRCUVVOR0xGTkJRVXNzVVVGQlREdEJRVU5GY0VNc1dVRkJUWGxETEdGQlFXRktMRWxCUVdJc1JVRkJiVUpHTEV0QlFXNUNMRVZCUVRCQ1F5eEhRVUV4UWl4RFFVRk9PMEZCUTBFN1FVRkRSaXhUUVVGTExGRkJRVXc3UVVGRFJYQkRMRmxCUVUwd1F5eGhRVUZoVEN4SlFVRmlMRVZCUVcxQ1JpeExRVUZ1UWl4RlFVRXdRa01zUjBGQk1VSXNRMEZCVGp0QlFVTkJPMEZCUTBZc1UwRkJTeXhOUVVGTU8wRkJRMEVzVTBGQlN5eFBRVUZNTzBGQlEwRXNVMEZCU3l4VFFVRk1PMEZCUTBFc1UwRkJTeXhWUVVGTU8wRkJRMFZ3UXl4WlFVRk5Na01zWTBGQlkwNHNTVUZCWkN4RlFVRnZRa1lzUzBGQmNFSXNSVUZCTWtKRExFZEJRVE5DTEVOQlFVNDdRVUZEUVR0QlFVTkdPMEZCUTBVc1dVRkJUU3hKUVVGSmJrUXNTMEZCU2l4RFFVRlZMR3RDUVVGV0xFTkJRVTQ3UVVGNFFrbzdRVUV3UWtFc1UwRkJUMlVzUjBGQlVEdEJRVU5FTEVOQmVrTkVPenRCUVRKRFFXNURMRTlCUVU5clJTeFRRVUZRTEVOQlFXbENZU3hOUVVGcVFpeEhRVUV3UWl4WlFVRlpPMEZCUTNCRExGTkJRVTg3UVVGRFRHaEZMRlZCUVUwc1VVRkVSRHRCUVVWTWFVVXNWVUZCVFVNc1RVRkJUV1lzVTBGQlRpeERRVUZuUW1kQ0xFdEJRV2hDTEVOQlFYTkNReXhKUVVGMFFpeERRVUV5UWl4TFFVRkxReXhKUVVGTUxFbEJRV0VzU1VGQmVFTXNSVUZCT0VNc1EwRkJPVU03UVVGR1JDeEhRVUZRTzBGQlNVUXNRMEZNUkRzN1FVRlBRVHRCUVVOQmNFWXNUMEZCVDJ0RkxGTkJRVkFzUTBGQmFVSnlRaXhKUVVGcVFpeEhRVUYzUWl4VlFVRlZkME1zVFVGQlZpeEZRVUZyUWtNc1dVRkJiRUlzUlVGQlowTm9RaXhMUVVGb1F5eEZRVUYxUTBNc1IwRkJka01zUlVGQk5FTTdRVUZEYkVVc1RVRkJTV2RDTEZOQlFWTXNTVUZCWWpzN1FVRkZRU3hOUVVGSkxFTkJRVU5xUWl4TFFVRk1MRVZCUVZsQkxGRkJRVkVzUTBGQlVqdEJRVU5hTEUxQlFVa3NRMEZCUTBNc1IwRkJSQ3hKUVVGUlFTeFJRVUZSTEVOQlFYQkNMRVZCUVhWQ1FTeE5RVUZOTEV0QlFVdDBSQ3hOUVVGWU8wRkJRM1pDTEUxQlFVa3NRMEZCUTNGRkxGbEJRVXdzUlVGQmJVSkJMR1ZCUVdVc1EwRkJaanM3UVVGRmJrSTdRVUZEUVN4TlFVRkpaaXhSUVVGUlJDeExRVUZhTEVWQlFXMUNPMEZCUTI1Q0xFMUJRVWxsTEU5QlFVOXdSU3hOUVVGUUxFdEJRV3RDTEVOQlFXeENMRWxCUVhWQ2MwVXNUMEZCVDNSRkxFMUJRVkFzUzBGQmEwSXNRMEZCTjBNc1JVRkJaMFE3TzBGQlJXaEVPMEZCUTBGM1FpeFRRVUZQT0VJc1QwRkJUMFFzUzBGQlpDeEZRVUZ4UWl4NVFrRkJja0k3UVVGRFFUZENMRk5CUVU4MlF5eG5Ra0ZCWjBJc1EwRkJhRUlzU1VGQmNVSkJMR1ZCUVdWRUxFOUJRVTl3UlN4TlFVRnNSQ3hGUVVOSkxESkNRVVJLTzBGQlJVRjNRaXhUUVVGUE5rSXNVMEZCVXl4RFFVRlVMRWxCUVdOQkxGRkJRVkZwUWl4UFFVRlBkRVVzVFVGQmNFTXNSVUZCTkVNc01rSkJRVFZETzBGQlEwRjNRaXhUUVVGUE9FSXNUMEZCVHl4RFFVRlFMRWxCUVZsQkxFOUJRVTluUWl4UFFVRlBkRVVzVFVGQmFrTXNSVUZCZVVNc2VVSkJRWHBET3p0QlFVVkJPMEZCUTBFc1RVRkJTWE5FTEUxQlFVMHNTMEZCUzNSRUxFMUJRV1lzUlVGRFJYTkVMRTFCUVUwc1MwRkJTM1JFTEUxQlFWZzdRVUZEUml4TlFVRkpiMFVzVDBGQlQzQkZMRTFCUVZBc1IwRkJaMEp4UlN4WlFVRm9RaXhIUVVFclFtWXNUVUZCVFVRc1MwRkJla01zUlVGRFJVTXNUVUZCVFdNc1QwRkJUM0JGTEUxQlFWQXNSMEZCWjBKeFJTeFpRVUZvUWl4SFFVRXJRbWhDTEV0QlFYSkRPenRCUVVWR0xFMUJRVWxyUWl4TlFVRk5ha0lzVFVGQlRVUXNTMEZCYUVJN08wRkJSVUVzVFVGQlNXdENMRTFCUVUwc1IwRkJUaXhKUVVGaExFTkJRVU40Uml4UFFVRlBTU3hsUVVGNlFpeEZRVUV3UXp0QlFVTjRReXhUUVVGTExFbEJRVWx0UWl4SlFVRkpMRU5CUVdJc1JVRkJaMEpCTEVsQlFVbHBSU3hIUVVGd1FpeEZRVUY1UW1wRkxFZEJRWHBDTzBGQlEwVTRSQ3hoUVVGUE9VUXNTVUZCU1N0RUxGbEJRVmdzU1VGQk1rSXNTMEZCU3k5RUxFbEJRVWtyUXl4TFFVRlVMRU5CUVROQ08wRkJSRVk3UVVGRlJDeEhRVWhFTEUxQlIwODdRVUZEVEdVc1YwRkJUemRFTEVsQlFWQXNRMEZCV1N4TFFVRkxaQ3hSUVVGTUxFTkJRV00wUkN4TFFVRmtMRVZCUVhGQ1FTeFJRVUZSYTBJc1IwRkJOMElzUTBGQldpeEZRVUVyUTBZc1dVRkJMME03UVVGRFJEdEJRVU5HTEVOQmFFTkVPenRCUVd0RFFTeFRRVUZUVkN4WlFVRlVMRU5CUVhWQ2VFVXNSMEZCZGtJc1JVRkJORUpwUlN4TFFVRTFRaXhGUVVGdFEwTXNSMEZCYmtNc1JVRkJkME03UVVGRGRFTXNUVUZCU1VRc1ZVRkJWU3hEUVVGV0xFbEJRV1ZETEZGQlFWRnNSU3hKUVVGSldTeE5RVUV2UWl4RlFVRjFRenRCUVVOeVF5eFhRVUZQY2tJc1QwRkJUelpHTEdGQlFWQXNRMEZCY1VKd1JpeEhRVUZ5UWl4RFFVRlFPMEZCUTBRc1IwRkdSQ3hOUVVWUE8wRkJRMHdzVjBGQlQxUXNUMEZCVHpaR0xHRkJRVkFzUTBGQmNVSndSaXhKUVVGSk5rVXNTMEZCU2l4RFFVRlZXaXhMUVVGV0xFVkJRV2xDUXl4SFFVRnFRaXhEUVVGeVFpeERRVUZRTzBGQlEwUTdRVUZEUmpzN1FVRkZSQ3hUUVVGVFJ5eFZRVUZVTEVOQlFYRkNja1VzUjBGQmNrSXNSVUZCTUVKcFJTeExRVUV4UWl4RlFVRnBRME1zUjBGQmFrTXNSVUZCYzBNN1FVRkRjRU1zVFVGQlNXMUNMRTFCUVUwc1JVRkJWanRCUVVOQkxFMUJRVWxETEUxQlFVMHNSVUZCVmp0QlFVTkJjRUlzVVVGQlRYRkNMRXRCUVV0RExFZEJRVXdzUTBGQlUzaEdMRWxCUVVsWkxFMUJRV0lzUlVGQmNVSnpSQ3hIUVVGeVFpeERRVUZPT3p0QlFVVkJMRTlCUVVzc1NVRkJTV2hFTEVsQlFVa3JReXhMUVVGaUxFVkJRVzlDTDBNc1NVRkJTV2RFTEVkQlFYaENMRVZCUVRaQ2FFUXNSMEZCTjBJc1JVRkJhME03UVVGRGFFTXNVVUZCU1d4Q0xFbEJRVWxyUWl4RFFVRktMRXRCUVZVc1NVRkJaQ3hGUVVGdlFqdEJRVU5zUW0xRkxHRkJRVTlKTEdWQlFXVklMRWRCUVdZc1NVRkJjMEkzUkN4UFFVRlBhVVVzV1VGQlVDeERRVUZ2UWpGR0xFbEJRVWxyUWl4RFFVRktMRU5CUVhCQ0xFTkJRVGRDTzBGQlEwRnZSU3haUVVGTkxFVkJRVTQ3UVVGRFJDeExRVWhFTEUxQlIwODdRVUZEVEVFc1lVRkJUeXhOUVVGTmRFWXNTVUZCU1d0Q0xFTkJRVW9zUlVGQlR6aERMRkZCUVZBc1EwRkJaMElzUlVGQmFFSXNRMEZCWWp0QlFVTkVPMEZCUTBZN08wRkJSVVFzVTBGQlQzRkNMRTFCUVUxSkxHVkJRV1ZJTEVkQlFXWXNRMEZCWWp0QlFVTkVPenRCUVVWRUxGTkJRVk5vUWl4WFFVRlVMRU5CUVhOQ2RFVXNSMEZCZEVJc1JVRkJNa0pwUlN4TFFVRXpRaXhGUVVGclEwTXNSMEZCYkVNc1JVRkJkVU03UVVGRGNrTXNUVUZCU1hCRExFMUJRVTBzUlVGQlZqdEJRVU5CYjBNc1VVRkJUWEZDTEV0QlFVdERMRWRCUVV3c1EwRkJVM2hHTEVsQlFVbFpMRTFCUVdJc1JVRkJjVUp6UkN4SFFVRnlRaXhEUVVGT096dEJRVVZCTEU5QlFVc3NTVUZCU1doRUxFbEJRVWtyUXl4TFFVRmlMRVZCUVc5Q0wwTXNTVUZCU1dkRUxFZEJRWGhDTEVWQlFUWkNhRVFzUjBGQk4wSTdRVUZEUlZrc1YwRkJUMHdzVDBGQlQybEZMRmxCUVZBc1EwRkJiMEl4Uml4SlFVRkphMElzUTBGQlNpeERRVUZ3UWl4RFFVRlFPMEZCUkVZc1IwRkZRU3hQUVVGUFdTeEhRVUZRTzBGQlEwUTdPMEZCUlVRc1UwRkJVM2xETEZsQlFWUXNRMEZCZFVKMlJTeEhRVUYyUWl4RlFVRTBRbWxGTEV0QlFUVkNMRVZCUVcxRFF5eEhRVUZ1UXl4RlFVRjNRenRCUVVOMFF5eFRRVUZQU1N4WlFVRlpkRVVzUjBGQldpeEZRVUZwUW1sRkxFdEJRV3BDTEVWQlFYZENReXhIUVVGNFFpeERRVUZRTzBGQlEwUTdPMEZCUlVRc1UwRkJVMFVzVTBGQlZDeERRVUZ2UW5CRkxFZEJRWEJDTEVWQlFYbENhVVVzUzBGQmVrSXNSVUZCWjBORExFZEJRV2hETEVWQlFYRkRPMEZCUTI1RExFMUJRVWxwUWl4TlFVRk5ia1lzU1VGQlNWa3NUVUZCWkRzN1FVRkZRU3hOUVVGSkxFTkJRVU54UkN4TFFVRkVMRWxCUVZWQkxGRkJRVkVzUTBGQmRFSXNSVUZCZVVKQkxGRkJRVkVzUTBGQlVqdEJRVU42UWl4TlFVRkpMRU5CUVVORExFZEJRVVFzU1VGQlVVRXNUVUZCVFN4RFFVRmtMRWxCUVcxQ1FTeE5RVUZOYVVJc1IwRkJOMElzUlVGQmEwTnFRaXhOUVVGTmFVSXNSMEZCVGpzN1FVRkZiRU1zVFVGQlNWRXNUVUZCVFN4RlFVRldPMEZCUTBFc1QwRkJTeXhKUVVGSmVrVXNTVUZCU1N0RExFdEJRV0lzUlVGQmIwSXZReXhKUVVGSlowUXNSMEZCZUVJc1JVRkJOa0pvUkN4SFFVRTNRaXhGUVVGclF6dEJRVU5vUTNsRkxGZEJRVTlETEUxQlFVMDFSaXhKUVVGSmEwSXNRMEZCU2l4RFFVRk9MRU5CUVZBN1FVRkRSRHRCUVVORUxGTkJRVTk1UlN4SFFVRlFPMEZCUTBRN08wRkJSVVFzVTBGQlUyeENMR0ZCUVZRc1EwRkJkMEo2UlN4SFFVRjRRaXhGUVVFMlFtbEZMRXRCUVRkQ0xFVkJRVzlEUXl4SFFVRndReXhGUVVGNVF6dEJRVU4yUXl4TlFVRkpNa0lzVVVGQlVUZEdMRWxCUVVrMlJTeExRVUZLTEVOQlFWVmFMRXRCUVZZc1JVRkJhVUpETEVkQlFXcENMRU5CUVZvN1FVRkRRU3hOUVVGSmJVSXNUVUZCVFN4RlFVRldPMEZCUTBFc1QwRkJTeXhKUVVGSmJrVXNTVUZCU1N4RFFVRmlMRVZCUVdkQ1FTeEpRVUZKTWtVc1RVRkJUV3BHTEUxQlFURkNMRVZCUVd0RFRTeExRVUZMTEVOQlFYWkRMRVZCUVRCRE8wRkJRM2hEYlVVc1YwRkJUelZFTEU5QlFVOXBSU3haUVVGUUxFTkJRVzlDUnl4TlFVRk5NMFVzUTBGQlRpeEpRVUZYTWtVc1RVRkJUVE5GTEVsQlFVVXNRMEZCVWl4SlFVRmhMRWRCUVRWRExFTkJRVkE3UVVGRFJEdEJRVU5FTEZOQlFVOXRSU3hIUVVGUU8wRkJRMFE3TzBGQlJVUXhSaXhQUVVGUGEwVXNVMEZCVUN4RFFVRnBRbWRDTEV0QlFXcENMRWRCUVhsQ0xGVkJRVlZhTEV0QlFWWXNSVUZCYVVKRExFZEJRV3BDTEVWQlFYTkNPMEZCUXpkRExFMUJRVWxwUWl4TlFVRk5MRXRCUVV0MlJTeE5RVUZtTzBGQlEwRnhSQ3hWUVVGUk5rSXNUVUZCVFRkQ0xFdEJRVTRzUlVGQllXdENMRWRCUVdJc1JVRkJhMElzUTBGQmJFSXNRMEZCVWp0QlFVTkJha0lzVVVGQlRUUkNMRTFCUVUwMVFpeEhRVUZPTEVWQlFWZHBRaXhIUVVGWUxFVkJRV2RDUVN4SFFVRm9RaXhEUVVGT096dEJRVVZCTEUxQlFVbDRSaXhQUVVGUFNTeGxRVUZZTEVWQlFUUkNPMEZCUXpGQ0xGZEJRVTlLTEU5QlFVOXhRaXhSUVVGUUxFTkJRV2RDTEV0QlFVdFlMRkZCUVV3c1EwRkJZelJFTEV0QlFXUXNSVUZCY1VKRExFZEJRWEpDTEVOQlFXaENMRU5CUVZBN1FVRkRSQ3hIUVVaRUxFMUJSVTg3UVVGRFRDeFJRVUZKTmtJc1YwRkJWemRDTEUxQlFVMUVMRXRCUVhKQ08wRkJRMEVzVVVGQlNTdENMRk5CUVZNc1NVRkJTWEpITEUxQlFVb3NRMEZCVjI5SExGRkJRVmdzUlVGQmNVSnVSU3hUUVVGeVFpeEZRVUZuUXl4SlFVRm9ReXhEUVVGaU8wRkJRMEVzVTBGQlN5eEpRVUZKVml4SlFVRkpMRU5CUVdJc1JVRkJaMEpCTEVsQlFVazJSU3hSUVVGd1FpeEZRVUU0UWpkRkxFZEJRVGxDTEVWQlFXMURPMEZCUTJwRE9FVXNZVUZCVHpsRkxFTkJRVkFzU1VGQldTeExRVUZMUVN4SlFVRkpLME1zUzBGQlZDeERRVUZhTzBGQlEwUTdRVUZEUkN4WFFVRlBLMElzVFVGQlVEdEJRVU5FTzBGQlEwWXNRMEZtUkRzN1FVRnBRa0U3UVVGRFFYSkhMRTlCUVU5clJTeFRRVUZRTEVOQlFXbENiME1zUjBGQmFrSXNSMEZCZFVJc1ZVRkJWWFJFTEUxQlFWWXNSVUZCYTBJN1FVRkRka04xUkN4VlFVRlJReXhIUVVGU0xFTkJRVmtzTWtSQlFWbzdRVUZEUVN4VFFVRlBMRXRCUVVzM1JTeFRRVUZNTEVOQlFXVnhRaXhOUVVGbUxFTkJRVkE3UVVGRFJDeERRVWhFT3p0QlFVdEJPMEZCUTBGb1JDeFBRVUZQYTBVc1UwRkJVQ3hEUVVGcFFuVkRMRWRCUVdwQ0xFZEJRWFZDTEZWQlFWVkRMRU5CUVZZc1JVRkJZVEZFTEUxQlFXSXNSVUZCY1VJN1FVRkRNVU4xUkN4VlFVRlJReXhIUVVGU0xFTkJRVmtzTWtSQlFWbzdRVUZEUVN4VFFVRlBMRXRCUVV0SExGVkJRVXdzUTBGQlowSkVMRU5CUVdoQ0xFVkJRVzFDTVVRc1RVRkJia0lzUTBGQlVEdEJRVU5FTEVOQlNFUTdPMEZCUzBGb1JDeFBRVUZQYTBVc1UwRkJVQ3hEUVVGcFFuWkRMRk5CUVdwQ0xFZEJRVFpDTEZWQlFWVnhRaXhOUVVGV0xFVkJRV3RDTkVRc1VVRkJiRUlzUlVGQk5FSTdRVUZEZGtRc1RVRkJTU3hEUVVGRFFTeFJRVUZNTEVWQlFXVTdRVUZEWW01RkxGZEJRVTlQTEZkQlFWZG1MRk5CUVZnc1NVRkJkMEpsTEZkQlFWY3NTVUZCTVVNc1JVRkJaMFFzWjBKQlFXaEVPMEZCUTBGUUxGZEJRVTlQTEZOQlFWTXNTMEZCU3k5Q0xFMUJRWEpDTEVWQlFUWkNMSEZEUVVFM1FqdEJRVU5FT3p0QlFVVkVMRTFCUVVrclFpeFZRVUZWTEV0QlFVc3ZRaXhOUVVGdVFpeEZRVU5GT3p0QlFVVkdMRk5CUVU4c1MwRkJTeXRDTEUxQlFVd3NRMEZCVUR0QlFVTkVMRU5CVmtRN08wRkJXVUVzVTBGQlV6WkVMRmRCUVZRc1EwRkJjMEo0Unl4SFFVRjBRaXhGUVVFeVFqSkRMRTFCUVROQ0xFVkJRVzFET0VRc1dVRkJia01zUlVGQmFVUkdMRkZCUVdwRUxFVkJRVEpFTzBGQlEzcEVMRTFCUVVrc1EwRkJRMEVzVVVGQlRDeEZRVUZsTzBGQlEySnVSU3hYUVVGUExFOUJRVTl4UlN4WlFVRlFMRXRCUVhkQ0xGTkJRUzlDTEVWQlFUQkRMREpDUVVFeFF6dEJRVU5CY2tVc1YwRkJUMDhzVjBGQlYyWXNVMEZCV0N4SlFVRjNRbVVzVjBGQlZ5eEpRVUV4UXl4RlFVRm5SQ3huUWtGQmFFUTdRVUZEUVZBc1YwRkJUMDhzVTBGQlV5eERRVUZVTEVkQlFXRXpReXhKUVVGSldTeE5RVUY0UWl4RlFVRm5ReXh4UTBGQmFFTTdRVUZEUkRzN1FVRkZSQ3hOUVVGSmRVVXNUVUZCVFc1R0xFbEJRVWxaTEUxQlFXUTdRVUZEUVN4TlFVRkpLMElzVlVGQlZYZERMRWRCUVdRc1JVRkRSVHM3UVVGRlJpeE5RVUZKZFVJc1IwRkJTanRCUVVOQkxFMUJRVWxFTEZsQlFVb3NSVUZCYTBJN1FVRkRhRUpETEZWQlFVMHhSeXhKUVVGSk1rTXNUVUZCU2l4RFFVRk9PMEZCUTBFc1VVRkJTVUVzVTBGQlV5eERRVUZVTEVkQlFXRjNReXhIUVVGcVFpeEZRVU5GZFVJc1QwRkJUekZITEVsQlFVa3lReXhUUVVGVExFTkJRV0lzUzBGQmJVSXNRMEZCTVVJN1FVRkRTQ3hIUVVwRUxFMUJTVTg3UVVGRFRDdEVMRlZCUVUweFJ5eEpRVUZKTWtNc1RVRkJTaXhMUVVGbExFTkJRWEpDTzBGQlEwRXNVVUZCU1VFc1UwRkJVeXhEUVVGVUxFZEJRV0YzUXl4SFFVRnFRaXhGUVVORmRVSXNUMEZCVHpGSExFbEJRVWt5UXl4VFFVRlRMRU5CUVdJc1EwRkJVRHRCUVVOSU8wRkJRMFFzVTBGQlR5dEVMRWRCUVZBN1FVRkRSRHM3UVVGRlJDOUhMRTlCUVU5clJTeFRRVUZRTEVOQlFXbENPRU1zV1VGQmFrSXNSMEZCWjBNc1ZVRkJWV2hGTEUxQlFWWXNSVUZCYTBJMFJDeFJRVUZzUWl4RlFVRTBRanRCUVVNeFJDeFRRVUZQUXl4WlFVRlpMRWxCUVZvc1JVRkJhMEkzUkN4TlFVRnNRaXhGUVVFd1FpeEpRVUV4UWl4RlFVRm5RelJFTEZGQlFXaERMRU5CUVZBN1FVRkRSQ3hEUVVaRU96dEJRVWxCTlVjc1QwRkJUMnRGTEZOQlFWQXNRMEZCYVVJclF5eFpRVUZxUWl4SFFVRm5ReXhWUVVGVmFrVXNUVUZCVml4RlFVRnJRalJFTEZGQlFXeENMRVZCUVRSQ08wRkJRekZFTEZOQlFVOURMRmxCUVZrc1NVRkJXaXhGUVVGclFqZEVMRTFCUVd4Q0xFVkJRVEJDTEV0QlFURkNMRVZCUVdsRE5FUXNVVUZCYWtNc1EwRkJVRHRCUVVORUxFTkJSa1E3TzBGQlNVRXNVMEZCVTAwc1YwRkJWQ3hEUVVGelFqZEhMRWRCUVhSQ0xFVkJRVEpDTWtNc1RVRkJNMElzUlVGQmJVTTRSQ3haUVVGdVF5eEZRVUZwUkVZc1VVRkJha1FzUlVGQk1rUTdRVUZEZWtRc1RVRkJTU3hEUVVGRFFTeFJRVUZNTEVWQlFXVTdRVUZEWW01RkxGZEJRVThzVDBGQlQzRkZMRmxCUVZBc1MwRkJkMElzVTBGQkwwSXNSVUZCTUVNc01rSkJRVEZETzBGQlEwRnlSU3hYUVVGUFR5eFhRVUZYWml4VFFVRllMRWxCUVhkQ1pTeFhRVUZYTEVsQlFURkRMRVZCUVdkRUxHZENRVUZvUkR0QlFVTkJVQ3hYUVVGUFR5eFRRVUZUTEVOQlFWUXNSMEZCWVRORExFbEJRVWxaTEUxQlFYaENMRVZCUVdkRExIRkRRVUZvUXp0QlFVTkVPenRCUVVWRUxFMUJRVWwxUlN4TlFVRk5ia1lzU1VGQlNWa3NUVUZCWkR0QlFVTkJMRTFCUVVrclFpeFZRVUZWZDBNc1IwRkJaQ3hGUVVORk96dEJRVVZHTEUxQlFVbDFRaXhIUVVGS08wRkJRMEVzVFVGQlNVUXNXVUZCU2l4RlFVRnJRanRCUVVOb1FpeFJRVUZKT1VRc1UwRkJVeXhEUVVGVUxFZEJRV0YzUXl4SFFVRnFRaXhGUVVORmRVSXNUVUZCVFRGSExFbEJRVWt5UXl4VFFVRlRMRU5CUVdJc1MwRkJiVUlzUlVGQmVrSTdRVUZEUml4UlFVRkpRU3hUUVVGVExFTkJRVlFzUjBGQllYZERMRWRCUVdwQ0xFVkJRMFYxUWl4UFFVRlBNVWNzU1VGQlNUSkRMRk5CUVZNc1EwRkJZaXhMUVVGdFFpeERRVUV4UWp0QlFVTkdLMFFzVjBGQlR6RkhMRWxCUVVreVF5eE5RVUZLTEVOQlFWQTdRVUZEUVN4UlFVRkpRU3hUUVVGVExFTkJRVlFzUjBGQllYZERMRWRCUVdwQ0xFVkJRMFYxUWl4TlFVRk5RU3hQUVVGUE1VY3NTVUZCU1RKRExGTkJRVk1zUTBGQllpeExRVUZ0UWl4RlFVRnVRaXhMUVVFd1FpeERRVUZxUXl4RFFVRk9PMEZCUTBnc1IwRlNSQ3hOUVZGUE8wRkJRMHdzVVVGQlNVRXNVMEZCVXl4RFFVRlVMRWRCUVdGM1F5eEhRVUZxUWl4RlFVTkZkVUlzVFVGQlRURkhMRWxCUVVreVF5eFRRVUZUTEVOQlFXSXNTMEZCYlVJc1JVRkJla0k3UVVGRFJpeFJRVUZKUVN4VFFVRlRMRU5CUVZRc1IwRkJZWGRETEVkQlFXcENMRVZCUTBWMVFpeFBRVUZQTVVjc1NVRkJTVEpETEZOQlFWTXNRMEZCWWl4TFFVRnRRaXhEUVVFeFFqdEJRVU5HTEZGQlFVbEJMRk5CUVZNc1EwRkJWQ3hIUVVGaGQwTXNSMEZCYWtJc1JVRkRSWFZDTEU5QlFVOHhSeXhKUVVGSk1rTXNVMEZCVXl4RFFVRmlMRU5CUVZBN1FVRkRSaXRFTEZWQlFVMUJMRTlCUVU4eFJ5eEpRVUZKTWtNc1RVRkJTaXhMUVVGbExFVkJRV1lzUzBGQmMwSXNRMEZCTjBJc1EwRkJUanRCUVVORU8wRkJRMFFzVTBGQlR5dEVMRWRCUVZBN1FVRkRSRHM3UVVGRlJDOUhMRTlCUVU5clJTeFRRVUZRTEVOQlFXbENhVVFzV1VGQmFrSXNSMEZCWjBNc1ZVRkJWVzVGTEUxQlFWWXNSVUZCYTBJMFJDeFJRVUZzUWl4RlFVRTBRanRCUVVNeFJDeFRRVUZQVFN4WlFVRlpMRWxCUVZvc1JVRkJhMEpzUlN4TlFVRnNRaXhGUVVFd1FpeEpRVUV4UWl4RlFVRm5RelJFTEZGQlFXaERMRU5CUVZBN1FVRkRSQ3hEUVVaRU96dEJRVWxCTlVjc1QwRkJUMnRGTEZOQlFWQXNRMEZCYVVKclJDeFpRVUZxUWl4SFFVRm5ReXhWUVVGVmNFVXNUVUZCVml4RlFVRnJRalJFTEZGQlFXeENMRVZCUVRSQ08wRkJRekZFTEZOQlFVOU5MRmxCUVZrc1NVRkJXaXhGUVVGclFteEZMRTFCUVd4Q0xFVkJRVEJDTEV0QlFURkNMRVZCUVdsRE5FUXNVVUZCYWtNc1EwRkJVRHRCUVVORUxFTkJSa1E3TzBGQlNVRTFSeXhQUVVGUGEwVXNVMEZCVUN4RFFVRnBRbTFFTEZGQlFXcENMRWRCUVRSQ0xGVkJRVlZ5UlN4TlFVRldMRVZCUVd0Q05FUXNVVUZCYkVJc1JVRkJORUk3UVVGRGRFUXNUVUZCU1N4RFFVRkRRU3hSUVVGTUxFVkJRV1U3UVVGRFltNUZMRmRCUVU5UExGZEJRVmRtTEZOQlFWZ3NTVUZCZDBKbExGZEJRVmNzU1VGQk1VTXNSVUZEU1N4blFrRkVTanRCUVVWQlVDeFhRVUZQVHl4VFFVRlRMRXRCUVVzdlFpeE5RVUZ5UWl4RlFVRTJRaXh4UTBGQk4wSTdRVUZEUkRzN1FVRkZSQ3hOUVVGSkswSXNWVUZCVlN4TFFVRkxMMElzVFVGQmJrSXNSVUZEUlRzN1FVRkZSaXhOUVVGSmNVY3NUVUZCVFN4TFFVRkxkRVVzVFVGQlRDeEpRVUZsTEVsQlFYcENPMEZCUTBFc1RVRkJTWE5GTEVkQlFVb3NSVUZEUlN4UFFVRlBMRU5CUVVNc1QwRkJUeXhMUVVGTGRFVXNUVUZCVEN4RFFVRlFMRWRCUVhOQ0xFTkJRWFpDTEVsQlFUUkNMRU5CUVVNc1EwRkJjRU1zUTBGRVJpeExRVWRGTEU5QlFVOHNTMEZCUzBFc1RVRkJUQ3hEUVVGUU8wRkJRMGdzUTBGbVJEczdRVUZwUWtFc1UwRkJVM1ZGTEZWQlFWUXNRMEZCY1VKc1NDeEhRVUZ5UWl4RlFVRXdRakpETEUxQlFURkNMRVZCUVd0RE9FUXNXVUZCYkVNc1JVRkJaMFJHTEZGQlFXaEVMRVZCUVRCRU8wRkJRM2hFTEUxQlFVa3NRMEZCUTBFc1VVRkJUQ3hGUVVGbE8wRkJRMkp1UlN4WFFVRlBMRTlCUVU5eFJTeFpRVUZRTEV0QlFYZENMRk5CUVM5Q0xFVkJRVEJETERKQ1FVRXhRenRCUVVOQmNrVXNWMEZCVDA4c1YwRkJWMllzVTBGQldDeEpRVUYzUW1Vc1YwRkJWeXhKUVVFeFF5eEZRVUZuUkN4blFrRkJhRVE3UVVGRFFWQXNWMEZCVDA4c1UwRkJVeXhEUVVGVUxFZEJRV0V6UXl4SlFVRkpXU3hOUVVGNFFpeEZRVUZuUXl4eFEwRkJhRU03UVVGRFJEczdRVUZGUkN4TlFVRkpkVVVzVFVGQlRXNUdMRWxCUVVsWkxFMUJRV1E3UVVGRFFTeE5RVUZKSzBJc1ZVRkJWWGRETEVkQlFXUXNSVUZEUlRzN1FVRkZSaXhOUVVGSmRVSXNUVUZCVFVZc1dVRkJXWGhITEVkQlFWb3NSVUZCYVVJeVF5eE5RVUZxUWl4RlFVRjVRamhFTEZsQlFYcENMRVZCUVhWRExFbEJRWFpETEVOQlFWWTdRVUZEUVN4TlFVRkpVU3hOUVVGTlVDeE5RVUZOTEUxQlFXaENPMEZCUTBFc1RVRkJTVThzUjBGQlNpeEZRVU5GTEU5QlFVOHNRMEZCUXl4VFFVRlRVQ3hIUVVGVUxFZEJRV1VzUTBGQmFFSXNTVUZCY1VJc1EwRkJReXhEUVVFM1FpeERRVVJHTEV0QlIwVXNUMEZCVDBFc1IwRkJVRHRCUVVOSU96dEJRVVZFTDBjc1QwRkJUMnRGTEZOQlFWQXNRMEZCYVVKelJDeFhRVUZxUWl4SFFVRXJRaXhWUVVGVmVFVXNUVUZCVml4RlFVRnJRalJFTEZGQlFXeENMRVZCUVRSQ08wRkJRM3BFTEZOQlFVOVhMRmRCUVZjc1NVRkJXQ3hGUVVGcFFuWkZMRTFCUVdwQ0xFVkJRWGxDTEVsQlFYcENMRVZCUVN0Q05FUXNVVUZCTDBJc1EwRkJVRHRCUVVORUxFTkJSa1E3TzBGQlNVRTFSeXhQUVVGUGEwVXNVMEZCVUN4RFFVRnBRblZFTEZkQlFXcENMRWRCUVN0Q0xGVkJRVlY2UlN4TlFVRldMRVZCUVd0Q05FUXNVVUZCYkVJc1JVRkJORUk3UVVGRGVrUXNVMEZCVDFjc1YwRkJWeXhKUVVGWUxFVkJRV2xDZGtVc1RVRkJha0lzUlVGQmVVSXNTMEZCZWtJc1JVRkJaME0wUkN4UlFVRm9ReXhEUVVGUU8wRkJRMFFzUTBGR1JEczdRVUZKUVN4VFFVRlRZeXhWUVVGVUxFTkJRWEZDY2tnc1IwRkJja0lzUlVGQk1FSXlReXhOUVVFeFFpeEZRVUZyUXpoRUxGbEJRV3hETEVWQlFXZEVSaXhSUVVGb1JDeEZRVUV3UkR0QlFVTjRSQ3hOUVVGSkxFTkJRVU5CTEZGQlFVd3NSVUZCWlR0QlFVTmlia1VzVjBGQlR5eFBRVUZQY1VVc1dVRkJVQ3hMUVVGM1FpeFRRVUV2UWl4RlFVRXdReXd5UWtGQk1VTTdRVUZEUVhKRkxGZEJRVTlQTEZkQlFWZG1MRk5CUVZnc1NVRkJkMEpsTEZkQlFWY3NTVUZCTVVNc1JVRkJaMFFzWjBKQlFXaEVPMEZCUTBGUUxGZEJRVTlQTEZOQlFWTXNRMEZCVkN4SFFVRmhNME1zU1VGQlNWa3NUVUZCZUVJc1JVRkJaME1zY1VOQlFXaERPMEZCUTBRN08wRkJSVVFzVFVGQlNYVkZMRTFCUVUxdVJpeEpRVUZKV1N4TlFVRmtPMEZCUTBFc1RVRkJTU3RDTEZWQlFWVjNReXhIUVVGa0xFVkJRMFU3TzBGQlJVWXNUVUZCU1hWQ0xFMUJRVTFITEZsQlFWazNSeXhIUVVGYUxFVkJRV2xDTWtNc1RVRkJha0lzUlVGQmVVSTRSQ3haUVVGNlFpeEZRVUYxUXl4SlFVRjJReXhEUVVGV08wRkJRMEVzVFVGQlNWRXNUVUZCVFZBc1RVRkJUU3hWUVVGb1FqdEJRVU5CTEUxQlFVbFBMRWRCUVVvc1JVRkRSU3hQUVVGUExFTkJRVU1zWVVGQllWQXNSMEZCWWl4SFFVRnRRaXhEUVVGd1FpeEpRVUY1UWl4RFFVRkRMRU5CUVdwRExFTkJSRVlzUzBGSFJTeFBRVUZQUVN4SFFVRlFPMEZCUTBnN08wRkJSVVF2Unl4UFFVRlBhMFVzVTBGQlVDeERRVUZwUW5sRUxGZEJRV3BDTEVkQlFTdENMRlZCUVZVelJTeE5RVUZXTEVWQlFXdENORVFzVVVGQmJFSXNSVUZCTkVJN1FVRkRla1FzVTBGQlQyTXNWMEZCVnl4SlFVRllMRVZCUVdsQ01VVXNUVUZCYWtJc1JVRkJlVUlzU1VGQmVrSXNSVUZCSzBJMFJDeFJRVUV2UWl4RFFVRlFPMEZCUTBRc1EwRkdSRHM3UVVGSlFUVkhMRTlCUVU5clJTeFRRVUZRTEVOQlFXbENNRVFzVjBGQmFrSXNSMEZCSzBJc1ZVRkJWVFZGTEUxQlFWWXNSVUZCYTBJMFJDeFJRVUZzUWl4RlFVRTBRanRCUVVONlJDeFRRVUZQWXl4WFFVRlhMRWxCUVZnc1JVRkJhVUl4UlN4TlFVRnFRaXhGUVVGNVFpeExRVUY2UWl4RlFVRm5RelJFTEZGQlFXaERMRU5CUVZBN1FVRkRSQ3hEUVVaRU96dEJRVWxCTEZOQlFWTnBRaXhWUVVGVUxFTkJRWEZDZUVnc1IwRkJja0lzUlVGQk1FSXlReXhOUVVFeFFpeEZRVUZyUXpoRUxGbEJRV3hETEVWQlFXZEVSaXhSUVVGb1JDeEZRVUV3UkR0QlFVTjRSQ3hOUVVGSkxFTkJRVU5CTEZGQlFVd3NSVUZCWlR0QlFVTmlia1VzVjBGQlR5eFBRVUZQY1VVc1dVRkJVQ3hMUVVGM1FpeFRRVUV2UWl4RlFVRXdReXd5UWtGQk1VTTdRVUZEUVhKRkxGZEJRVTlQTEZOQlFWTXNRMEZCVkN4SFFVRmhNME1zU1VGQlNWa3NUVUZCZUVJc1JVRkJaME1zY1VOQlFXaERPMEZCUTBRN08wRkJSVVFzVTBGQlQyNUNMRkZCUVZGblNTeEpRVUZTTEVOQlFXRjZTQ3hIUVVGaUxFVkJRV3RDTWtNc1RVRkJiRUlzUlVGQk1FSTRSQ3haUVVFeFFpeEZRVUYzUXl4RlFVRjRReXhGUVVFMFF5eERRVUUxUXl4RFFVRlFPMEZCUTBRN08wRkJSVVE1Unl4UFFVRlBhMFVzVTBGQlVDeERRVUZwUWpaRUxGZEJRV3BDTEVkQlFTdENMRlZCUVZVdlJTeE5RVUZXTEVWQlFXdENORVFzVVVGQmJFSXNSVUZCTkVJN1FVRkRla1FzVTBGQlQybENMRmRCUVZjc1NVRkJXQ3hGUVVGcFFqZEZMRTFCUVdwQ0xFVkJRWGxDTEVsQlFYcENMRVZCUVN0Q05FUXNVVUZCTDBJc1EwRkJVRHRCUVVORUxFTkJSa1E3TzBGQlNVRTFSeXhQUVVGUGEwVXNVMEZCVUN4RFFVRnBRamhFTEZkQlFXcENMRWRCUVN0Q0xGVkJRVlZvUml4TlFVRldMRVZCUVd0Q05FUXNVVUZCYkVJc1JVRkJORUk3UVVGRGVrUXNVMEZCVDJsQ0xGZEJRVmNzU1VGQldDeEZRVUZwUWpkRkxFMUJRV3BDTEVWQlFYbENMRXRCUVhwQ0xFVkJRV2RETkVRc1VVRkJhRU1zUTBGQlVEdEJRVU5FTEVOQlJrUTdPMEZCU1VFc1UwRkJVM0ZDTEZkQlFWUXNRMEZCYzBJMVNDeEhRVUYwUWl4RlFVRXlRakpETEUxQlFUTkNMRVZCUVcxRE9FUXNXVUZCYmtNc1JVRkJhVVJHTEZGQlFXcEVMRVZCUVRKRU8wRkJRM3BFTEUxQlFVa3NRMEZCUTBFc1VVRkJUQ3hGUVVGbE8wRkJRMkp1UlN4WFFVRlBMRTlCUVU5eFJTeFpRVUZRTEV0QlFYZENMRk5CUVM5Q0xFVkJRVEJETERKQ1FVRXhRenRCUVVOQmNrVXNWMEZCVDA4c1UwRkJVeXhEUVVGVUxFZEJRV0V6UXl4SlFVRkpXU3hOUVVGNFFpeEZRVUZuUXl4eFEwRkJhRU03UVVGRFJEczdRVUZGUkN4VFFVRlBia0lzVVVGQlVXZEpMRWxCUVZJc1EwRkJZWHBJTEVkQlFXSXNSVUZCYTBJeVF5eE5RVUZzUWl4RlFVRXdRamhFTEZsQlFURkNMRVZCUVhkRExFVkJRWGhETEVWQlFUUkRMRU5CUVRWRExFTkJRVkE3UVVGRFJEczdRVUZGUkRsSExFOUJRVTlyUlN4VFFVRlFMRU5CUVdsQ1owVXNXVUZCYWtJc1IwRkJaME1zVlVGQlZXeEdMRTFCUVZZc1JVRkJhMEkwUkN4UlFVRnNRaXhGUVVFMFFqdEJRVU14UkN4VFFVRlBjVUlzV1VGQldTeEpRVUZhTEVWQlFXdENha1lzVFVGQmJFSXNSVUZCTUVJc1NVRkJNVUlzUlVGQlowTTBSQ3hSUVVGb1F5eERRVUZRTzBGQlEwUXNRMEZHUkRzN1FVRkpRVFZITEU5QlFVOXJSU3hUUVVGUUxFTkJRV2xDYVVVc1dVRkJha0lzUjBGQlowTXNWVUZCVlc1R0xFMUJRVllzUlVGQmEwSTBSQ3hSUVVGc1FpeEZRVUUwUWp0QlFVTXhSQ3hUUVVGUGNVSXNXVUZCV1N4SlFVRmFMRVZCUVd0Q2FrWXNUVUZCYkVJc1JVRkJNRUlzUzBGQk1VSXNSVUZCYVVNMFJDeFJRVUZxUXl4RFFVRlFPMEZCUTBRc1EwRkdSRHM3UVVGSlFUVkhMRTlCUVU5clJTeFRRVUZRTEVOQlFXbENlVU1zVlVGQmFrSXNSMEZCT0VJc1ZVRkJWWGxDTEV0QlFWWXNSVUZCYVVKd1JpeE5RVUZxUWl4RlFVRjVRalJFTEZGQlFYcENMRVZCUVcxRE8wRkJReTlFTEUxQlFVa3NRMEZCUTBFc1VVRkJUQ3hGUVVGbE8wRkJRMkp1UlN4WFFVRlBNa1lzVlVGQlZXNUhMRk5CUVZZc1NVRkJkVUp0Unl4VlFVRlZMRWxCUVhoRExFVkJRVGhETEdWQlFUbERPMEZCUTBFelJpeFhRVUZQVHl4WFFVRlhaaXhUUVVGWUxFbEJRWGRDWlN4WFFVRlhMRWxCUVRGRExFVkJRV2RFTEdkQ1FVRm9SRHRCUVVOQlVDeFhRVUZQVHl4VFFVRlRMRXRCUVVzdlFpeE5RVUZ5UWl4RlFVRTJRaXh6UTBGQk4wSTdRVUZEUVc5SUxHTkJRVlZFTEV0QlFWWXNSVUZCYVVJc1NVRkJha0k3UVVGRFJEczdRVUZGUkN4TlFVRkpjRVlzVlVGQlZTeExRVUZMTDBJc1RVRkJia0lzUlVGQk1rSTdPMEZCUlROQ0xFOUJRVXNyUWl4TlFVRk1MRWxCUVdWdlJpeExRVUZtTzBGQlEwUXNRMEZZUkRzN1FVRmhRU3hUUVVGVFJTeFpRVUZVTEVOQlFYVkNha2tzUjBGQmRrSXNSVUZCTkVJclNDeExRVUUxUWl4RlFVRnRRM0JHTEUxQlFXNURMRVZCUVRKRE9FUXNXVUZCTTBNc1JVRkJlVVJHTEZGQlFYcEVMRVZCUVcxRk8wRkJRMnBGTEUxQlFVa3NRMEZCUTBFc1VVRkJUQ3hGUVVGbE8wRkJRMkp1UlN4WFFVRlBNa1lzVlVGQlZXNUhMRk5CUVZZc1NVRkJkVUp0Unl4VlFVRlZMRWxCUVhoRExFVkJRVGhETEdWQlFUbERPMEZCUTBFelJpeFhRVUZQTEU5QlFVOXhSU3haUVVGUUxFdEJRWGRDTEZOQlFTOUNMRVZCUVRCRExESkNRVUV4UXp0QlFVTkJja1VzVjBGQlQwOHNWMEZCVjJZc1UwRkJXQ3hKUVVGM1FtVXNWMEZCVnl4SlFVRXhReXhGUVVGblJDeG5Ra0ZCYUVRN1FVRkRRVkFzVjBGQlQwOHNVMEZCVXl4RFFVRlVMRWRCUVdFelF5eEpRVUZKV1N4TlFVRjRRaXhGUVVGblF5eHpRMEZCYUVNN1FVRkRRVzlJTEdOQlFWVkVMRXRCUVZZc1JVRkJhVUlzVFVGQmFrSTdRVUZEUkRzN1FVRkZSQ3hOUVVGSk5VTXNUVUZCVFc1R0xFbEJRVWxaTEUxQlFXUTdRVUZEUVN4TlFVRkpLMElzVlVGQlZYZERMRWRCUVdRc1JVRkRSVHM3UVVGRlJpeFBRVUZMTEVsQlFVbHFSU3hKUVVGSkxFTkJRVklzUlVGQlYyZElMRWxCUVVrelF5eExRVUZMUXl4SFFVRk1MRU5CUVZOTUxFMUJRVTE0UXl4TlFVRm1MRVZCUVhWQ0xFTkJRWFpDTEVOQlFYQkNMRVZCUVN0RGVrSXNTVUZCU1dkSUxFTkJRVzVFTEVWQlFYTkVhRWdzUjBGQmRFUXNSVUZCTWtRN1FVRkRla1JzUWl4UlFVRkpNa01zVTBGQlUzcENMRU5CUVdJc1NVRkRTU3hEUVVGRE5rY3NVVUZCVXl4UlFVRlRMRXRCUVV0MFFpeGxRVUZsZGtZc1EwRkJaaXhIUVVGdFFpeEpRVUZKUVN4RFFVRTFRaXhEUVVGdVFpeE5RVU5KTEVOQlFVTjFSaXhsUVVGbGRrWXNRMEZCWml4SFFVRnRRaXhKUVVGSlFTeERRVUY0UWl4SlFVRTJRaXhEUVVaeVF6dEJRVWRFTzBGQlEwWTdPMEZCUlVSMlFpeFBRVUZQYTBVc1UwRkJVQ3hEUVVGcFFuTkZMR0ZCUVdwQ0xFZEJRV2xETEZWQlFWVktMRXRCUVZZc1JVRkJhVUp3Uml4TlFVRnFRaXhGUVVGNVFqUkVMRkZCUVhwQ0xFVkJRVzFETzBGQlEyeEZNRUlzWlVGQllTeEpRVUZpTEVWQlFXMUNSaXhMUVVGdVFpeEZRVUV3UW5CR0xFMUJRVEZDTEVWQlFXdERMRWxCUVd4RExFVkJRWGRETkVRc1VVRkJlRU03UVVGRFJDeERRVVpFT3p0QlFVbEJOVWNzVDBGQlQydEZMRk5CUVZBc1EwRkJhVUoxUlN4aFFVRnFRaXhIUVVGcFF5eFZRVUZWVEN4TFFVRldMRVZCUVdsQ2NFWXNUVUZCYWtJc1JVRkJlVUkwUkN4UlFVRjZRaXhGUVVGdFF6dEJRVU5zUlRCQ0xHVkJRV0VzU1VGQllpeEZRVUZ0UWtZc1MwRkJia0lzUlVGQk1FSndSaXhOUVVFeFFpeEZRVUZyUXl4TFFVRnNReXhGUVVGNVF6UkVMRkZCUVhwRE8wRkJRMFFzUTBGR1JEczdRVUZKUVN4VFFVRlRPRUlzV1VGQlZDeERRVUYxUW5KSkxFZEJRWFpDTEVWQlFUUkNLMGdzUzBGQk5VSXNSVUZCYlVOd1JpeE5RVUZ1UXl4RlFVRXlRemhFTEZsQlFUTkRMRVZCUVhsRVJpeFJRVUY2UkN4RlFVRnRSVHRCUVVOcVJTeE5RVUZKTEVOQlFVTkJMRkZCUVV3c1JVRkJaVHRCUVVOaWJrVXNWMEZCVHpKR0xGVkJRVlZ1Unl4VFFVRldMRWxCUVhWQ2JVY3NWVUZCVlN4SlFVRjRReXhGUVVFNFF5eGxRVUU1UXp0QlFVTkJNMFlzVjBGQlR5eFBRVUZQY1VVc1dVRkJVQ3hMUVVGM1FpeFRRVUV2UWl4RlFVRXdReXd5UWtGQk1VTTdRVUZEUVhKRkxGZEJRVTlQTEZkQlFWZG1MRk5CUVZnc1NVRkJkMEpsTEZkQlFWY3NTVUZCTVVNc1JVRkJaMFFzWjBKQlFXaEVPMEZCUTBGUUxGZEJRVTlQTEZOQlFWTXNRMEZCVkN4SFFVRmhNME1zU1VGQlNWa3NUVUZCZUVJc1JVRkJaME1zYzBOQlFXaERPMEZCUTBGdlNDeGpRVUZWUkN4TFFVRldMRVZCUVdsQ0xGVkJRV3BDTzBGQlEwUTdPMEZCUlVRc1RVRkJTVFZETEUxQlFVMXVSaXhKUVVGSldTeE5RVUZrTzBGQlEwRXNUVUZCU1N0Q0xGVkJRVlYzUXl4SFFVRmtMRVZCUTBVN08wRkJSVVlzVDBGQlN5eEpRVUZKYWtVc1NVRkJTU3hEUVVGU0xFVkJRVmRuU0N4SlFVRkpNME1zUzBGQlMwTXNSMEZCVEN4RFFVRlRUQ3hOUVVGTmVFTXNUVUZCWml4RlFVRjFRaXhEUVVGMlFpeERRVUZ3UWl4RlFVRXJRM3BDTEVsQlFVbG5TQ3hEUVVGdVJDeEZRVUZ6UkdoSUxFZEJRWFJFTEVWQlFUSkVPMEZCUTNwRWJFSXNVVUZCU1RKRExGTkJRVk42UWl4RFFVRmlMRWxCUTBzMlJ5eFZRVUZWTEVOQlFVTjBRaXhsUVVGbGRrWXNRMEZCWml4SFFVRnRRaXhKUVVGSlFTeERRVUY0UWl4SlFVRTJRaXhEUVVGNFF5eEhRVUUyUXl4SlFVUnFSRHRCUVVWRU8wRkJRMFk3TzBGQlJVUjJRaXhQUVVGUGEwVXNVMEZCVUN4RFFVRnBRbmxGTEdGQlFXcENMRWRCUVdsRExGVkJRVlZRTEV0QlFWWXNSVUZCYVVKd1JpeE5RVUZxUWl4RlFVRjVRalJFTEZGQlFYcENMRVZCUVcxRE8wRkJRMnhGT0VJc1pVRkJZU3hKUVVGaUxFVkJRVzFDVGl4TFFVRnVRaXhGUVVFd1FuQkdMRTFCUVRGQ0xFVkJRV3RETEVsQlFXeERMRVZCUVhkRE5FUXNVVUZCZUVNN1FVRkRSQ3hEUVVaRU96dEJRVWxCTlVjc1QwRkJUMnRGTEZOQlFWQXNRMEZCYVVJd1JTeGhRVUZxUWl4SFFVRnBReXhWUVVGVlVpeExRVUZXTEVWQlFXbENjRVlzVFVGQmFrSXNSVUZCZVVJMFJDeFJRVUY2UWl4RlFVRnRRenRCUVVOc1JUaENMR1ZCUVdFc1NVRkJZaXhGUVVGdFFrNHNTMEZCYmtJc1JVRkJNRUp3Uml4TlFVRXhRaXhGUVVGclF5eExRVUZzUXl4RlFVRjVRelJFTEZGQlFYcERPMEZCUTBRc1EwRkdSRHM3UVVGSlFUVkhMRTlCUVU5clJTeFRRVUZRTEVOQlFXbENNa1VzVTBGQmFrSXNSMEZCTmtJc1ZVRkJWVlFzUzBGQlZpeEZRVUZwUW5CR0xFMUJRV3BDTEVWQlFYbENORVFzVVVGQmVrSXNSVUZCYlVNN1FVRkRPVVFzVFVGQlNTeERRVUZEUVN4UlFVRk1MRVZCUVdVN1FVRkRZbTVGTEZkQlFVOHlSaXhWUVVGVmJrY3NVMEZCVml4SlFVRjFRbTFITEZWQlFWVXNTVUZCZUVNc1JVRkJPRU1zWlVGQk9VTTdRVUZEUVROR0xGZEJRVTlQTEZkQlFWZG1MRk5CUVZnc1NVRkJkMEpsTEZkQlFWY3NTVUZCTVVNc1JVRkJaMFFzWjBKQlFXaEVPMEZCUTBGUUxGZEJRVTlQTEZOQlFWTXNTMEZCU3k5Q0xFMUJRWEpDTEVWQlFUWkNMSE5EUVVFM1FqdEJRVU5CTmtnc1kwRkJWVllzUzBGQlZpeEZRVUZwUWl4SlFVRnFRaXhGUVVGMVFpeERRVUZETEVsQlFYaENPMEZCUTBRN08wRkJSVVFzVFVGQlNYQkdMRlZCUVZVc1MwRkJTeTlDTEUxQlFXNUNMRVZCUTBVN08wRkJSVVlzVFVGQlNXMUlMRk5CUVZNc1EwRkJZaXhGUVVORkxFdEJRVXQ2UWl4VlFVRk1MRU5CUVdkQ2VVSXNTMEZCYUVJc1JVRkJkVUp3Uml4TlFVRjJRaXhGUVVFclFqUkVMRkZCUVM5Q0xFVkJSRVlzUzBGSFJTeExRVUZMUkN4VlFVRk1MRU5CUVdkQ0xFOUJRVTk1UWl4TFFVRlFMRWRCUVdVc1EwRkJMMElzUlVGQmEwTndSaXhOUVVGc1F5eEZRVUV3UXpSRUxGRkJRVEZETzBGQlEwZ3NRMEZtUkRzN1FVRnBRa0VzVTBGQlUyMURMRmRCUVZRc1EwRkJjMEl4U1N4SFFVRjBRaXhGUVVFeVFpdElMRXRCUVROQ0xFVkJRV3REY0VZc1RVRkJiRU1zUlVGQk1FTTRSQ3haUVVFeFF5eEZRVUYzUkVZc1VVRkJlRVFzUlVGQmEwVTdRVUZEYUVVc1RVRkJTU3hEUVVGRFFTeFJRVUZNTEVWQlFXVTdRVUZEWW01RkxGZEJRVTh5Uml4VlFVRlZia2NzVTBGQlZpeEpRVUYxUW0xSExGVkJRVlVzU1VGQmVFTXNSVUZCT0VNc1pVRkJPVU03UVVGRFFUTkdMRmRCUVU4c1QwRkJUM0ZGTEZsQlFWQXNTMEZCZDBJc1UwRkJMMElzUlVGQk1FTXNNa0pCUVRGRE8wRkJRMEZ5UlN4WFFVRlBUeXhYUVVGWFppeFRRVUZZTEVsQlFYZENaU3hYUVVGWExFbEJRVEZETEVWQlFXZEVMR2RDUVVGb1JEdEJRVU5CVUN4WFFVRlBUeXhUUVVGVExFTkJRVlFzUjBGQllUTkRMRWxCUVVsWkxFMUJRWGhDTEVWQlFXZERMSE5EUVVGb1F6dEJRVU5CTmtnc1kwRkJWVllzUzBGQlZpeEZRVUZwUWl4TlFVRnFRaXhGUVVGNVFpeERRVUZETEUxQlFURkNPMEZCUTBRN08wRkJSVVFzVFVGQlNUVkRMRTFCUVUxdVJpeEpRVUZKV1N4TlFVRmtPMEZCUTBFc1RVRkJTU3RDTEZWQlFWVjNReXhIUVVGa0xFVkJRMFU3TzBGQlJVWXNUVUZCU1RSRExGTkJRVk1zUTBGQllpeEZRVU5GUlN4aFFVRmhha2tzUjBGQllpeEZRVUZyUWl0SUxFdEJRV3hDTEVWQlFYbENjRVlzVFVGQmVrSXNSVUZCYVVNNFJDeFpRVUZxUXl4RlFVRXJRMFlzVVVGQkwwTXNSVUZFUml4TFFVZEZNRUlzWVVGQllXcEpMRWRCUVdJc1JVRkJhMElzVTBGQlV5dElMRXRCUVZRc1IwRkJhVUlzUTBGQmJrTXNSVUZCYzBOd1JpeE5RVUYwUXl4RlFVRTRRemhFTEZsQlFUbERMRVZCUVRSRVJpeFJRVUUxUkR0QlFVTklPenRCUVVWRU5VY3NUMEZCVDJ0RkxGTkJRVkFzUTBGQmFVSTRSU3haUVVGcVFpeEhRVUZuUXl4VlFVRlZXaXhMUVVGV0xFVkJRV2xDY0VZc1RVRkJha0lzUlVGQmVVSTBSQ3hSUVVGNlFpeEZRVUZ0UXp0QlFVTnFSVzFETEdOQlFWa3NTVUZCV2l4RlFVRnJRbGdzUzBGQmJFSXNSVUZCZVVKd1JpeE5RVUY2UWl4RlFVRnBReXhKUVVGcVF5eEZRVUYxUXpSRUxGRkJRWFpETzBGQlEwUXNRMEZHUkRzN1FVRkpRVFZITEU5QlFVOXJSU3hUUVVGUUxFTkJRV2xDSzBVc1dVRkJha0lzUjBGQlowTXNWVUZCVldJc1MwRkJWaXhGUVVGcFFuQkdMRTFCUVdwQ0xFVkJRWGxDTkVRc1VVRkJla0lzUlVGQmJVTTdRVUZEYWtWdFF5eGpRVUZaTEVsQlFWb3NSVUZCYTBKWUxFdEJRV3hDTEVWQlFYbENjRVlzVFVGQmVrSXNSVUZCYVVNc1MwRkJha01zUlVGQmQwTTBSQ3hSUVVGNFF6dEJRVU5FTEVOQlJrUTdPMEZCU1VFc1UwRkJVM05ETEZkQlFWUXNRMEZCYzBJM1NTeEhRVUYwUWl4RlFVRXlRaXRJTEV0QlFUTkNMRVZCUVd0RGNFWXNUVUZCYkVNc1JVRkJNRU00UkN4WlFVRXhReXhGUVVGM1JFWXNVVUZCZUVRc1JVRkJhMFU3UVVGRGFFVXNUVUZCU1N4RFFVRkRRU3hSUVVGTUxFVkJRV1U3UVVGRFltNUZMRmRCUVU4eVJpeFZRVUZWYmtjc1UwRkJWaXhKUVVGMVFtMUhMRlZCUVZVc1NVRkJlRU1zUlVGQk9FTXNaVUZCT1VNN1FVRkRRVE5HTEZkQlFVOHNUMEZCVDNGRkxGbEJRVkFzUzBGQmQwSXNVMEZCTDBJc1JVRkJNRU1zTWtKQlFURkRPMEZCUTBGeVJTeFhRVUZQVHl4WFFVRlhaaXhUUVVGWUxFbEJRWGRDWlN4WFFVRlhMRWxCUVRGRExFVkJRV2RFTEdkQ1FVRm9SRHRCUVVOQlVDeFhRVUZQVHl4VFFVRlRMRU5CUVZRc1IwRkJZVE5ETEVsQlFVbFpMRTFCUVhoQ0xFVkJRV2RETEhORFFVRm9RenRCUVVOQk5rZ3NZMEZCVlZZc1MwRkJWaXhGUVVGcFFpeFZRVUZxUWl4RlFVRTJRaXhEUVVGRExGVkJRVGxDTzBGQlEwUTdPMEZCUlVRc1RVRkJTVFZETEUxQlFVMXVSaXhKUVVGSldTeE5RVUZrTzBGQlEwRXNUVUZCU1N0Q0xGVkJRVlYzUXl4SFFVRmtMRVZCUTBVN08wRkJSVVlzVFVGQlNUUkRMRk5CUVZNc1EwRkJZaXhGUVVORlRTeGhRVUZoY2trc1IwRkJZaXhGUVVGclFpdElMRXRCUVd4Q0xFVkJRWGxDY0VZc1RVRkJla0lzUlVGQmFVTTRSQ3haUVVGcVF5eEZRVUVyUTBZc1VVRkJMME1zUlVGRVJpeExRVWRGT0VJc1lVRkJZWEpKTEVkQlFXSXNSVUZCYTBJc1lVRkJZU3RJTEV0QlFXSXNSMEZCY1VJc1EwRkJka01zUlVGQk1FTndSaXhOUVVFeFF5eEZRVUZyUkRoRUxGbEJRV3hFTEVWQlFXZEZSaXhSUVVGb1JUdEJRVU5JT3p0QlFVVkVOVWNzVDBGQlQydEZMRk5CUVZBc1EwRkJhVUpwUml4WlFVRnFRaXhIUVVGblF5eFZRVUZWWml4TFFVRldMRVZCUVdsQ2NFWXNUVUZCYWtJc1JVRkJlVUkwUkN4UlFVRjZRaXhGUVVGdFF6dEJRVU5xUlhORExHTkJRVmtzU1VGQldpeEZRVUZyUW1Rc1MwRkJiRUlzUlVGQmVVSndSaXhOUVVGNlFpeEZRVUZwUXl4SlFVRnFReXhGUVVGMVF6UkVMRkZCUVhaRE8wRkJRMFFzUTBGR1JEczdRVUZKUVRWSExFOUJRVTlyUlN4VFFVRlFMRU5CUVdsQ2EwWXNXVUZCYWtJc1IwRkJaME1zVlVGQlZXaENMRXRCUVZZc1JVRkJhVUp3Uml4TlFVRnFRaXhGUVVGNVFqUkVMRkZCUVhwQ0xFVkJRVzFETzBGQlEycEZjME1zWTBGQldTeEpRVUZhTEVWQlFXdENaQ3hMUVVGc1FpeEZRVUY1UW5CR0xFMUJRWHBDTEVWQlFXbERMRXRCUVdwRExFVkJRWGRETkVRc1VVRkJlRU03UVVGRFJDeERRVVpFT3p0QlFVbEJMRk5CUVZONVF5eFhRVUZVTEVOQlFYTkNhRW9zUjBGQmRFSXNSVUZCTWtJclNDeExRVUV6UWl4RlFVRnJRM0JHTEUxQlFXeERMRVZCUVRCRE9FUXNXVUZCTVVNc1JVRkJkMFJHTEZGQlFYaEVMRVZCUVd0Rk8wRkJRMmhGTEUxQlFVa3NRMEZCUTBFc1VVRkJUQ3hGUVVGbE8wRkJRMkp1UlN4WFFVRlBNa1lzVlVGQlZXNUhMRk5CUVZZc1NVRkJkVUp0Unl4VlFVRlZMRWxCUVhoRExFVkJRVGhETEdWQlFUbERPMEZCUTBFelJpeFhRVUZQTEU5QlFVOXhSU3haUVVGUUxFdEJRWGRDTEZOQlFTOUNMRVZCUVRCRExESkNRVUV4UXp0QlFVTkJja1VzVjBGQlQwOHNWMEZCVjJZc1UwRkJXQ3hKUVVGM1FtVXNWMEZCVnl4SlFVRXhReXhGUVVGblJDeG5Ra0ZCYUVRN1FVRkRRVkFzVjBGQlQwOHNVMEZCVXl4RFFVRlVMRWRCUVdFelF5eEpRVUZKV1N4TlFVRjRRaXhGUVVGblF5eHpRMEZCYUVNN1FVRkRRWEZKTEdsQ1FVRmhiRUlzUzBGQllpeEZRVUZ2UWl4elFrRkJjRUlzUlVGQk5FTXNRMEZCUXl4elFrRkJOME03UVVGRFJEczdRVUZGUkN4TlFVRkpOVU1zVFVGQlRXNUdMRWxCUVVsWkxFMUJRV1E3UVVGRFFTeE5RVUZKSzBJc1ZVRkJWWGRETEVkQlFXUXNSVUZEUlRzN1FVRkZSakZHTEZWQlFWRTRRaXhMUVVGU0xFTkJRV04yUWl4SFFVRmtMRVZCUVcxQ0swZ3NTMEZCYmtJc1JVRkJNRUp3Uml4TlFVRXhRaXhGUVVGclF6aEVMRmxCUVd4RExFVkJRV2RFTEVWQlFXaEVMRVZCUVc5RUxFTkJRWEJFTzBGQlEwUTdPMEZCUlVRNVJ5eFBRVUZQYTBVc1UwRkJVQ3hEUVVGcFFuRkdMRmxCUVdwQ0xFZEJRV2RETEZWQlFWVnVRaXhMUVVGV0xFVkJRV2xDY0VZc1RVRkJha0lzUlVGQmVVSTBSQ3hSUVVGNlFpeEZRVUZ0UXp0QlFVTnFSWGxETEdOQlFWa3NTVUZCV2l4RlFVRnJRbXBDTEV0QlFXeENMRVZCUVhsQ2NFWXNUVUZCZWtJc1JVRkJhVU1zU1VGQmFrTXNSVUZCZFVNMFJDeFJRVUYyUXp0QlFVTkVMRU5CUmtRN08wRkJTVUUxUnl4UFFVRlBhMFVzVTBGQlVDeERRVUZwUW5OR0xGbEJRV3BDTEVkQlFXZERMRlZCUVZWd1FpeExRVUZXTEVWQlFXbENjRVlzVFVGQmFrSXNSVUZCZVVJMFJDeFJRVUY2UWl4RlFVRnRRenRCUVVOcVJYbERMR05CUVZrc1NVRkJXaXhGUVVGclFtcENMRXRCUVd4Q0xFVkJRWGxDY0VZc1RVRkJla0lzUlVGQmFVTXNTMEZCYWtNc1JVRkJkME0wUkN4UlFVRjRRenRCUVVORUxFTkJSa1E3TzBGQlNVRXNVMEZCVXpaRExGbEJRVlFzUTBGQmRVSndTaXhIUVVGMlFpeEZRVUUwUWl0SUxFdEJRVFZDTEVWQlFXMURjRVlzVFVGQmJrTXNSVUZCTWtNNFJDeFpRVUV6UXl4RlFVRjVSRVlzVVVGQmVrUXNSVUZCYlVVN1FVRkRha1VzVFVGQlNTeERRVUZEUVN4UlFVRk1MRVZCUVdVN1FVRkRZbTVGTEZkQlFVOHlSaXhWUVVGVmJrY3NVMEZCVml4SlFVRjFRbTFITEZWQlFWVXNTVUZCZUVNc1JVRkJPRU1zWlVGQk9VTTdRVUZEUVROR0xGZEJRVThzVDBGQlQzRkZMRmxCUVZBc1MwRkJkMElzVTBGQkwwSXNSVUZCTUVNc01rSkJRVEZETzBGQlEwRnlSU3hYUVVGUFR5eFhRVUZYWml4VFFVRllMRWxCUVhkQ1pTeFhRVUZYTEVsQlFURkRMRVZCUVdkRUxHZENRVUZvUkR0QlFVTkJVQ3hYUVVGUFR5eFRRVUZUTEVOQlFWUXNSMEZCWVRORExFbEJRVWxaTEUxQlFYaENMRVZCUTBrc2MwTkJSRW83UVVGRlFYRkpMR2xDUVVGaGJFSXNTMEZCWWl4RlFVRnZRaXgxUWtGQmNFSXNSVUZCTmtNc1EwRkJReXgxUWtGQk9VTTdRVUZEUkRzN1FVRkZSQ3hOUVVGSk5VTXNUVUZCVFc1R0xFbEJRVWxaTEUxQlFXUTdRVUZEUVN4TlFVRkpLMElzVlVGQlZYZERMRWRCUVdRc1JVRkRSVHM3UVVGRlJqRkdMRlZCUVZFNFFpeExRVUZTTEVOQlFXTjJRaXhIUVVGa0xFVkJRVzFDSzBnc1MwRkJia0lzUlVGQk1FSndSaXhOUVVFeFFpeEZRVUZyUXpoRUxGbEJRV3hETEVWQlFXZEVMRVZCUVdoRUxFVkJRVzlFTEVOQlFYQkVPMEZCUTBRN08wRkJSVVE1Unl4UFFVRlBhMFVzVTBGQlVDeERRVUZwUW5kR0xHRkJRV3BDTEVkQlFXbERMRlZCUVZWMFFpeExRVUZXTEVWQlFXbENjRVlzVFVGQmFrSXNSVUZCZVVJMFJDeFJRVUY2UWl4RlFVRnRRenRCUVVOc1JUWkRMR1ZCUVdFc1NVRkJZaXhGUVVGdFFuSkNMRXRCUVc1Q0xFVkJRVEJDY0VZc1RVRkJNVUlzUlVGQmEwTXNTVUZCYkVNc1JVRkJkME0wUkN4UlFVRjRRenRCUVVORUxFTkJSa1E3TzBGQlNVRTFSeXhQUVVGUGEwVXNVMEZCVUN4RFFVRnBRbmxHTEdGQlFXcENMRWRCUVdsRExGVkJRVlYyUWl4TFFVRldMRVZCUVdsQ2NFWXNUVUZCYWtJc1JVRkJlVUkwUkN4UlFVRjZRaXhGUVVGdFF6dEJRVU5zUlRaRExHVkJRV0VzU1VGQllpeEZRVUZ0UW5KQ0xFdEJRVzVDTEVWQlFUQkNjRVlzVFVGQk1VSXNSVUZCYTBNc1MwRkJiRU1zUlVGQmVVTTBSQ3hSUVVGNlF6dEJRVU5FTEVOQlJrUTdPMEZCU1VFN1FVRkRRVFZITEU5QlFVOXJSU3hUUVVGUUxFTkJRV2xDTUVZc1NVRkJha0lzUjBGQmQwSXNWVUZCVlhoQ0xFdEJRVllzUlVGQmFVSTVSQ3hMUVVGcVFpeEZRVUYzUWtNc1IwRkJlRUlzUlVGQk5rSTdRVUZEYmtRc1RVRkJTU3hEUVVGRE5rUXNTMEZCVEN4RlFVRlpRU3hSUVVGUkxFTkJRVkk3UVVGRFdpeE5RVUZKTEVOQlFVTTVSQ3hMUVVGTUxFVkJRVmxCTEZGQlFWRXNRMEZCVWp0QlFVTmFMRTFCUVVrc1EwRkJRME1zUjBGQlRDeEZRVUZWUVN4TlFVRk5MRXRCUVV0MFJDeE5RVUZZT3p0QlFVVldMRTFCUVVrc1QwRkJUMjFJTEV0QlFWQXNTMEZCYVVJc1VVRkJja0lzUlVGQkswSTdRVUZETjBKQkxGbEJRVkZCTEUxQlFVMTVRaXhWUVVGT0xFTkJRV2xDTEVOQlFXcENMRU5CUVZJN1FVRkRSRHM3UVVGRlJIQklMRk5CUVU4c1QwRkJUekpHTEV0QlFWQXNTMEZCYVVJc1VVRkJha0lzU1VGQk5rSXNRMEZCUXpkRkxFMUJRVTAyUlN4TFFVRk9MRU5CUVhKRExFVkJRVzFFTEhWQ1FVRnVSRHRCUVVOQk0wWXNVMEZCVHpoQ0xFOUJRVTlFTEV0QlFXUXNSVUZCY1VJc1lVRkJja0k3TzBGQlJVRTdRVUZEUVN4TlFVRkpReXhSUVVGUlJDeExRVUZhTEVWQlFXMUNPMEZCUTI1Q0xFMUJRVWtzUzBGQlMzSkVMRTFCUVV3c1MwRkJaMElzUTBGQmNFSXNSVUZCZFVJN08wRkJSWFpDZDBJc1UwRkJUelpDTEZOQlFWTXNRMEZCVkN4SlFVRmpRU3hSUVVGUkxFdEJRVXR5UkN4TlFVRnNReXhGUVVFd1F5eHhRa0ZCTVVNN1FVRkRRWGRDTEZOQlFVODRRaXhQUVVGUExFTkJRVkFzU1VGQldVRXNUMEZCVHl4TFFVRkxkRVFzVFVGQkwwSXNSVUZCZFVNc2JVSkJRWFpET3p0QlFVVkJMRTlCUVVzc1NVRkJTVTBzU1VGQlNTdERMRXRCUVdJc1JVRkJiMEl2UXl4SlFVRkpaMFFzUjBGQmVFSXNSVUZCTmtKb1JDeEhRVUUzUWl4RlFVRnJRenRCUVVOb1F5eFRRVUZMUVN4RFFVRk1MRWxCUVZVMlJ5eExRVUZXTzBGQlEwUTdRVUZEUml4RFFYUkNSRHM3UVVGM1FrRndTU3hQUVVGUGEwVXNVMEZCVUN4RFFVRnBRalJHTEU5QlFXcENMRWRCUVRKQ0xGbEJRVms3UVVGRGNrTXNUVUZCU1RsRUxFMUJRVTBzUlVGQlZqdEJRVU5CTEUxQlFVbFNMRTFCUVUwc1MwRkJTM1pGTEUxQlFXWTdRVUZEUVN4UFFVRkxMRWxCUVVsTkxFbEJRVWtzUTBGQllpeEZRVUZuUWtFc1NVRkJTV2xGTEVkQlFYQkNMRVZCUVhsQ2FrVXNSMEZCZWtJc1JVRkJPRUk3UVVGRE5VSjVSU3hSUVVGSmVrVXNRMEZCU2l4SlFVRlRNRVVzVFVGQlRTeExRVUZMTVVVc1EwRkJUQ3hEUVVGT0xFTkJRVlE3UVVGRFFTeFJRVUZKUVN4TlFVRk5lRUlzVVVGQlVVY3NhVUpCUVd4Q0xFVkJRWEZETzBGQlEyNURPRVlzVlVGQlNYcEZMRWxCUVVrc1EwRkJVaXhKUVVGaExFdEJRV0k3UVVGRFFUdEJRVU5FTzBGQlEwWTdRVUZEUkN4VFFVRlBMR0ZCUVdGNVJTeEpRVUZKSzBRc1NVRkJTaXhEUVVGVExFZEJRVlFzUTBGQllpeEhRVUUyUWl4SFFVRndRenRCUVVORUxFTkJXRVE3TzBGQllVRTdPenM3UVVGSlFTOUtMRTlCUVU5clJTeFRRVUZRTEVOQlFXbENPRVlzWVVGQmFrSXNSMEZCYVVNc1dVRkJXVHRCUVVNelF5eE5RVUZKTEU5QlFVOTRTaXhWUVVGUUxFdEJRWE5DTEZkQlFURkNMRVZCUVhWRE8wRkJRM0pETEZGQlFVbFNMRTlCUVU5SkxHVkJRVmdzUlVGQk5FSTdRVUZETVVJc1lVRkJVU3hKUVVGSlNpeE5RVUZLTEVOQlFWY3NTVUZCV0N4RFFVRkVMRU5CUVcxQ2FVc3NUVUZCTVVJN1FVRkRSQ3hMUVVaRUxFMUJSVTg3UVVGRFRDeFZRVUZKTlVvc1RVRkJUU3hKUVVGSlJ5eFZRVUZLTEVOQlFXVXNTMEZCUzFNc1RVRkJjRUlzUTBGQlZqdEJRVU5CTEZkQlFVc3NTVUZCU1Uwc1NVRkJTU3hEUVVGU0xFVkJRVmRwUlN4TlFVRk5ia1lzU1VGQlNWa3NUVUZCTVVJc1JVRkJhME5OTEVsQlFVbHBSU3hIUVVGMFF5eEZRVUV5UTJwRkxFdEJRVXNzUTBGQmFFUTdRVUZEUld4Q0xGbEJRVWxyUWl4RFFVRktMRWxCUVZNc1MwRkJTMEVzUTBGQlRDeERRVUZVTzBGQlJFWXNUMEZGUVN4UFFVRlBiRUlzU1VGQlNUUktMRTFCUVZnN1FVRkRSRHRCUVVOR0xFZEJWRVFzVFVGVFR6dEJRVU5NTEZWQlFVMHNTVUZCU1RkSkxFdEJRVW9zUTBGQlZTeHZSRUZCVml4RFFVRk9PMEZCUTBRN1FVRkRSaXhEUVdKRU96dEJRV1ZCTzBGQlEwRTdPMEZCUlVFc1UwRkJVMG9zVlVGQlZDeERRVUZ4UW10Q0xFZEJRWEpDTEVWQlFUQkNPMEZCUTNoQ0xFMUJRVWxCTEVsQlFVbG5TU3hKUVVGU0xFVkJRV01zVDBGQlQyaEpMRWxCUVVsblNTeEpRVUZLTEVWQlFWQTdRVUZEWkN4VFFVRlBhRWtzU1VGQlNXbEpMRTlCUVVvc1EwRkJXU3haUVVGYUxFVkJRVEJDTEVWQlFURkNMRU5CUVZBN1FVRkRSRHM3UVVGRlJDeEpRVUZKUXl4TFFVRkxjRXNzVDBGQlQydEZMRk5CUVdoQ096dEJRVVZCT3pzN1FVRkhRV3hGTEU5QlFVOXhRaXhSUVVGUUxFZEJRV3RDTEZWQlFWVmtMRWRCUVZZc1JVRkJaVHRCUVVNdlFrRXNUVUZCU1dVc1UwRkJTaXhIUVVGblFpeEpRVUZvUWpzN1FVRkZRVHRCUVVOQlppeE5RVUZKT0Vvc1NVRkJTaXhIUVVGWE9Vb3NTVUZCU1N0R0xFZEJRV1k3UVVGRFFTOUdMRTFCUVVscFFpeEpRVUZLTEVkQlFWZHFRaXhKUVVGSmEwY3NSMEZCWmpzN1FVRkZRVHRCUVVOQmJFY3NUVUZCU1N0R0xFZEJRVW9zUjBGQlZUaEVMRWRCUVVjNVJDeEhRVUZpTzBGQlEwRXZSaXhOUVVGSmEwY3NSMEZCU2l4SFFVRlZNa1FzUjBGQlJ6TkVMRWRCUVdJN08wRkJSVUZzUnl4TlFVRkpjVUlzUzBGQlNpeEhRVUZaZDBrc1IwRkJSM2hKTEV0QlFXWTdRVUZEUVhKQ0xFMUJRVWs0UkN4UlFVRktMRWRCUVdVclJpeEhRVUZITDBZc1VVRkJiRUk3UVVGRFFUbEVMRTFCUVVrclNpeGpRVUZLTEVkQlFYRkNSaXhIUVVGSEwwWXNVVUZCZUVJN1FVRkRRVGxFTEUxQlFVbDNSU3hOUVVGS0xFZEJRV0Z4Uml4SFFVRkhja1lzVFVGQmFFSTdRVUZEUVhoRkxFMUJRVWx6UXl4SlFVRktMRWRCUVZkMVNDeEhRVUZIZGtnc1NVRkJaRHRCUVVOQmRFTXNUVUZCU1RKRkxFdEJRVW9zUjBGQldXdEdMRWRCUVVkc1JpeExRVUZtTzBGQlEwRXpSU3hOUVVGSmIwSXNVMEZCU2l4SFFVRm5RbmxKTEVkQlFVZDZTU3hUUVVGdVFqdEJRVU5CY0VJc1RVRkJTWGxITEZsQlFVb3NSMEZCYlVKdlJDeEhRVUZIY0VRc1dVRkJkRUk3UVVGRFFYcEhMRTFCUVVrd1J5eFpRVUZLTEVkQlFXMUNiVVFzUjBGQlIyNUVMRmxCUVhSQ08wRkJRMEV4Unl4TlFVRkpORWNzV1VGQlNpeEhRVUZ0UW1sRUxFZEJRVWRxUkN4WlFVRjBRanRCUVVOQk5VY3NUVUZCU1RaSExGbEJRVW9zUjBGQmJVSm5SQ3hIUVVGSGFFUXNXVUZCZEVJN1FVRkRRVGRITEUxQlFVazRSeXhSUVVGS0xFZEJRV1VyUXl4SFFVRkhMME1zVVVGQmJFSTdRVUZEUVRsSExFMUJRVWxwU0N4WFFVRktMRWRCUVd0Q05FTXNSMEZCUnpWRExGZEJRWEpDTzBGQlEwRnFTQ3hOUVVGSmEwZ3NWMEZCU2l4SFFVRnJRakpETEVkQlFVY3pReXhYUVVGeVFqdEJRVU5CYkVnc1RVRkJTVzlJTEZkQlFVb3NSMEZCYTBKNVF5eEhRVUZIZWtNc1YwRkJja0k3UVVGRFFYQklMRTFCUVVseFNDeFhRVUZLTEVkQlFXdENkME1zUjBGQlIzaERMRmRCUVhKQ08wRkJRMEZ5U0N4TlFVRkpkMGdzVjBGQlNpeEhRVUZyUW5GRExFZEJRVWR5UXl4WFFVRnlRanRCUVVOQmVFZ3NUVUZCU1hsSUxGZEJRVW9zUjBGQmEwSnZReXhIUVVGSGNFTXNWMEZCY2tJN1FVRkRRWHBJTEUxQlFVa3lTQ3haUVVGS0xFZEJRVzFDYTBNc1IwRkJSMnhETEZsQlFYUkNPMEZCUTBFelNDeE5RVUZKTkVnc1dVRkJTaXhIUVVGdFFtbERMRWRCUVVkcVF5eFpRVUYwUWp0QlFVTkJOVWdzVFVGQlNXOUhMRlZCUVVvc1IwRkJhVUo1UkN4SFFVRkhla1FzVlVGQmNFSTdRVUZEUVhCSExFMUJRVWxwU1N4aFFVRktMRWRCUVc5Q05FSXNSMEZCUnpWQ0xHRkJRWFpDTzBGQlEwRnFTU3hOUVVGSmEwa3NZVUZCU2l4SFFVRnZRakpDTEVkQlFVY3pRaXhoUVVGMlFqdEJRVU5CYkVrc1RVRkJTVzlKTEdGQlFVb3NSMEZCYjBKNVFpeEhRVUZIZWtJc1lVRkJka0k3UVVGRFFYQkpMRTFCUVVseFNTeGhRVUZLTEVkQlFXOUNkMElzUjBGQlIzaENMR0ZCUVhaQ08wRkJRMEZ5U1N4TlFVRkpjMGtzVTBGQlNpeEhRVUZuUW5WQ0xFZEJRVWQyUWl4VFFVRnVRanRCUVVOQmRFa3NUVUZCU1hsSkxGbEJRVW9zUjBGQmJVSnZRaXhIUVVGSGNFSXNXVUZCZEVJN1FVRkRRWHBKTEUxQlFVa3dTU3haUVVGS0xFZEJRVzFDYlVJc1IwRkJSMjVDTEZsQlFYUkNPMEZCUTBFeFNTeE5RVUZKTkVrc1dVRkJTaXhIUVVGdFFtbENMRWRCUVVkcVFpeFpRVUYwUWp0QlFVTkJOVWtzVFVGQlNUWkpMRmxCUVVvc1IwRkJiVUpuUWl4SFFVRkhhRUlzV1VGQmRFSTdRVUZEUVRkSkxFMUJRVWxuU2l4WlFVRktMRWRCUVcxQ1lTeEhRVUZIWWl4WlFVRjBRanRCUVVOQmFFb3NUVUZCU1dsS0xGbEJRVW9zUjBGQmJVSlpMRWRCUVVkYUxGbEJRWFJDTzBGQlEwRnFTaXhOUVVGSmJVb3NZVUZCU2l4SFFVRnZRbFVzUjBGQlIxWXNZVUZCZGtJN1FVRkRRVzVLTEUxQlFVbHZTaXhoUVVGS0xFZEJRVzlDVXl4SFFVRkhWQ3hoUVVGMlFqdEJRVU5CY0Vvc1RVRkJTWEZLTEVsQlFVb3NSMEZCVjFFc1IwRkJSMUlzU1VGQlpEdEJRVU5CY2tvc1RVRkJTWFZLTEU5QlFVb3NSMEZCWTAwc1IwRkJSMDRzVDBGQmFrSTdRVUZEUVhaS0xFMUJRVWw1U2l4aFFVRktMRWRCUVc5Q1NTeEhRVUZIU2l4aFFVRjJRanM3UVVGRlFTeFRRVUZQZWtvc1IwRkJVRHRCUVVORUxFTkJiRVJFT3p0QlFXOUVRVHRCUVVOQkxGTkJRVk0wUml4TFFVRlVMRU5CUVdkQ2IwVXNTMEZCYUVJc1JVRkJkVUl2UlN4SFFVRjJRaXhGUVVFMFFtZEdMRmxCUVRWQ0xFVkJRVEJETzBGQlEzaERMRTFCUVVrc1QwRkJUMFFzUzBGQlVDeExRVUZwUWl4UlFVRnlRaXhGUVVFclFpeFBRVUZQUXl4WlFVRlFPMEZCUXk5Q1JDeFZRVUZSTEVOQlFVTXNRMEZCUTBFc1MwRkJWaXhEUVVaM1F5eERRVVYwUWp0QlFVTnNRaXhOUVVGSlFTeFRRVUZUTDBVc1IwRkJZaXhGUVVGclFpeFBRVUZQUVN4SFFVRlFPMEZCUTJ4Q0xFMUJRVWtyUlN4VFFVRlRMRU5CUVdJc1JVRkJaMElzVDBGQlQwRXNTMEZCVUR0QlFVTm9Ra0VzVjBGQlV5OUZMRWRCUVZRN1FVRkRRU3hOUVVGSkswVXNVMEZCVXl4RFFVRmlMRVZCUVdkQ0xFOUJRVTlCTEV0QlFWQTdRVUZEYUVJc1UwRkJUeXhEUVVGUU8wRkJRMFE3TzBGQlJVUXNVMEZCVTNKS0xFMUJRVlFzUTBGQmFVSkVMRTFCUVdwQ0xFVkJRWGxDTzBGQlEzWkNPMEZCUTBFN1FVRkRRVHRCUVVOQlFTeFhRVUZUTEVOQlFVTXNRMEZCUXpKRkxFdEJRVXMyUlN4SlFVRk1MRU5CUVZVc1EwRkJRM2hLTEUxQlFWZ3NRMEZCV0R0QlFVTkJMRk5CUVU5QkxGTkJRVk1zUTBGQlZDeEhRVUZoTEVOQlFXSXNSMEZCYVVKQkxFMUJRWGhDTzBGQlEwUTdPMEZCUlVRc1UwRkJVM2xDTEU5QlFWUXNRMEZCYTBJNVFpeFBRVUZzUWl4RlFVRXlRanRCUVVONlFpeFRRVUZQTEVOQlFVTnhSU3hOUVVGTmRrTXNUMEZCVGl4SlFVRnBRaXhWUVVGVk9VSXNUMEZCVml4RlFVRnRRanRCUVVNeFF5eFhRVUZQT0Vvc1QwRkJUM2hITEZOQlFWQXNRMEZCYVVKSExGRkJRV3BDTEVOQlFUQkNZeXhKUVVFeFFpeERRVUVyUW5aRkxFOUJRUzlDTEUxQlFUUkRMR2RDUVVGdVJEdEJRVU5FTEVkQlJrMHNSVUZGU2tFc1QwRkdTU3hEUVVGUU8wRkJSMFE3TzBGQlJVUXNVMEZCVTJFc1ZVRkJWQ3hEUVVGeFFtSXNUMEZCY2tJc1JVRkJPRUk3UVVGRE5VSXNVMEZCVHpoQ0xGRkJRVkU1UWl4UFFVRlNMRXRCUVc5Q1dpeFBRVUZQTUVJc1VVRkJVQ3hEUVVGblFtUXNUMEZCYUVJc1EwRkJjRUlzU1VGRFNFRXNWMEZCVnl4UlFVRlBRU3hQUVVGUUxIbERRVUZQUVN4UFFVRlFMRTlCUVcxQ0xGRkJRVGxDTEVsQlEwRXNUMEZCVDBFc1VVRkJVVXNzVFVGQlppeExRVUV3UWl4UlFVWTVRanRCUVVkRU96dEJRVVZFTEZOQlFWTm5SaXhMUVVGVUxFTkJRV2RDTUVVc1EwRkJhRUlzUlVGQmJVSTdRVUZEYWtJc1RVRkJTVUVzU1VGQlNTeEZRVUZTTEVWQlFWa3NUMEZCVHl4TlFVRk5RU3hGUVVGRmRFY3NVVUZCUml4RFFVRlhMRVZCUVZnc1EwRkJZanRCUVVOYUxGTkJRVTl6Unl4RlFVRkZkRWNzVVVGQlJpeERRVUZYTEVWQlFWZ3NRMEZCVUR0QlFVTkVPenRCUVVWRUxGTkJRVk5xUXl4WFFVRlVMRU5CUVhOQ1JpeEhRVUYwUWl4RlFVRXlRanRCUVVONlFpeE5RVUZKTUVrc1dVRkJXU3hGUVVGb1FqdEJRVU5CTEU5QlFVc3NTVUZCU1hKS0xFbEJRVWtzUTBGQllpeEZRVUZuUWtFc1NVRkJTVmNzU1VGQlNXcENMRTFCUVhoQ0xFVkJRV2REVFN4SFFVRm9ReXhGUVVGeFF6dEJRVU51UXl4UlFVRkpVeXhKUVVGSlJTeEpRVUZKTWtnc1ZVRkJTaXhEUVVGbGRFa3NRMEZCWml4RFFVRlNPMEZCUTBFc1VVRkJTVk1zUzBGQlN5eEpRVUZVTEVWQlEwVTBTU3hWUVVGVlF5eEpRVUZXTEVOQlFXVXpTU3hKUVVGSk1rZ3NWVUZCU2l4RFFVRmxkRWtzUTBGQlppeERRVUZtTEVWQlJFWXNTMEZGU3p0QlFVTklMRlZCUVVrclF5eFJRVUZSTDBNc1EwRkJXanRCUVVOQkxGVkJRVWxUTEV0QlFVc3NUVUZCVEN4SlFVRmxRU3hMUVVGTExFMUJRWGhDTEVWQlFXZERWRHRCUVVOb1F5eFZRVUZKZFVvc1NVRkJTVU1zYlVKQlFXMUNOMGtzU1VGQlNXZEVMRXRCUVVvc1EwRkJWVm9zUzBGQlZpeEZRVUZwUWk5RExFbEJRVVVzUTBGQmJrSXNRMEZCYmtJc1JVRkJNRU1yUWl4TlFVRXhReXhEUVVGcFJDeERRVUZxUkN4RlFVRnZSREJJTEV0QlFYQkVMRU5CUVRCRUxFZEJRVEZFTEVOQlFWSTdRVUZEUVN4WFFVRkxMRWxCUVVsNlF5eEpRVUZKTEVOQlFXSXNSVUZCWjBKQkxFbEJRVWwxUXl4RlFVRkZOMG9zVFVGQmRFSXNSVUZCT0VKelNDeEhRVUU1UWp0QlFVTkZjVU1zYTBKQlFWVkRMRWxCUVZZc1EwRkJaWGhJTEZOQlFWTjVTQ3hGUVVGRmRrTXNRMEZCUml4RFFVRlVMRVZCUVdVc1JVRkJaaXhEUVVGbU8wRkJSRVk3UVVGRlJEdEJRVU5HTzBGQlEwUXNVMEZCVDNGRExGTkJRVkE3UVVGRFJEczdRVUZGUkN4VFFVRlRMMGNzV1VGQlZDeERRVUYxUWpOQ0xFZEJRWFpDTEVWQlFUUkNPMEZCUXpGQ0xFMUJRVWt3U1N4WlFVRlpMRVZCUVdoQ08wRkJRMEVzVDBGQlN5eEpRVUZKY2tvc1NVRkJTU3hEUVVGaUxFVkJRV2RDUVN4SlFVRkpWeXhKUVVGSmFrSXNUVUZCZUVJc1JVRkJaME5OTEVkQlFXaERMRVZCUVhGRE8wRkJRMjVETzBGQlEwRnhTaXhqUVVGVlF5eEpRVUZXTEVOQlFXVXpTU3hKUVVGSk1rZ3NWVUZCU2l4RFFVRmxkRWtzUTBGQlppeEpRVUZ2UWl4SlFVRnVRenRCUVVORU8wRkJRMFFzVTBGQlQzRktMRk5CUVZBN1FVRkRSRHM3UVVGRlJDeFRRVUZUTTBjc1kwRkJWQ3hEUVVGNVFpOUNMRWRCUVhwQ0xFVkJRVGhDTzBGQlF6VkNMRTFCUVVrclNTeERRVUZLTEVWQlFVOURMRVZCUVZBc1JVRkJWME1zUlVGQldEdEJRVU5CTEUxQlFVbFFMRmxCUVZrc1JVRkJhRUk3UVVGRFFTeFBRVUZMTEVsQlFVbHlTaXhKUVVGSkxFTkJRV0lzUlVGQlowSkJMRWxCUVVsWExFbEJRVWxxUWl4TlFVRjRRaXhGUVVGblEwMHNSMEZCYUVNc1JVRkJjVU03UVVGRGJrTXdTaXhSUVVGSkwwa3NTVUZCU1RKSUxGVkJRVW9zUTBGQlpYUkpMRU5CUVdZc1EwRkJTanRCUVVOQk1rb3NVMEZCUzBRc1MwRkJTeXhEUVVGV08wRkJRMEZGTEZOQlFVdEdMRWxCUVVrc1IwRkJWRHRCUVVOQlRDeGpRVUZWUXl4SlFVRldMRU5CUVdWTkxFVkJRV1k3UVVGRFFWQXNZMEZCVlVNc1NVRkJWaXhEUVVGbFN5eEZRVUZtTzBGQlEwUTdPMEZCUlVRc1UwRkJUMDRzVTBGQlVEdEJRVU5FT3p0QlFVVkVMRk5CUVZOMlNTeGhRVUZVTEVOQlFYZENTQ3hIUVVGNFFpeEZRVUUyUWp0QlFVTXpRaXhUUVVGUGRFTXNUMEZCVDNkTUxGZEJRVkFzUTBGQmJVSnNTaXhIUVVGdVFpeERRVUZRTzBGQlEwUTdPMEZCUlVRc1UwRkJVM2xDTEZWQlFWUXNRMEZCY1VJd1NDeEhRVUZ5UWl4RlFVRXdRa01zUjBGQk1VSXNSVUZCSzBKMFNTeE5RVUV2UWl4RlFVRjFReTlDTEUxQlFYWkRMRVZCUVN0RE8wRkJRemRETEUxQlFVa3dRaXhIUVVGS08wRkJRMEVzVDBGQlN5eEpRVUZKY0VJc1NVRkJTU3hEUVVGaUxFVkJRV2RDUVN4SlFVRkpUaXhOUVVGd1FpeEZRVUUwUWswc1IwRkJOVUlzUlVGQmFVTTdRVUZETDBJc1VVRkJTMEVzU1VGQlNYbENMRTFCUVVvc1NVRkJZM05KTEVsQlFVbHlTeXhOUVVGdVFpeEpRVUVyUWswc1MwRkJTemhLTEVsQlFVbHdTeXhOUVVFMVF5eEZRVU5GTzBGQlEwWnhTeXhSUVVGSkwwb3NTVUZCU1hsQ0xFMUJRVklzU1VGQmEwSnhTU3hKUVVGSk9Vb3NRMEZCU2l4RFFVRnNRanRCUVVORU8wRkJRMFFzVTBGQlQwRXNRMEZCVUR0QlFVTkVPenRCUVVWRUxGTkJRVk4xUlN4alFVRlVMRU5CUVhsQ05VUXNSMEZCZWtJc1JVRkJPRUk3UVVGRE5VSXNUVUZCU1R0QlFVTkdMRmRCUVU5eFNpeHRRa0ZCYlVKeVNpeEhRVUZ1UWl4RFFVRlFPMEZCUTBRc1IwRkdSQ3hEUVVWRkxFOUJRVTl6U2l4SFFVRlFMRVZCUVZrN1FVRkRXaXhYUVVGUE1Vb3NUMEZCVDJsRkxGbEJRVkFzUTBGQmIwSXNUVUZCY0VJc1EwRkJVQ3hEUVVSWkxFTkJRM1ZDTzBGQlEzQkRPMEZCUTBZN08wRkJSVVE3T3pzN08wRkJTMEVzVTBGQlUzTkRMRk5CUVZRc1EwRkJiMEpFTEV0QlFYQkNMRVZCUVRKQ2NVUXNSMEZCTTBJc1JVRkJaME03UVVGRE9VSm9TaXhUUVVGUExFOUJRVTh5Uml4TFFVRlFMRXRCUVdsQ0xGRkJRWGhDTEVWQlFXdERMSFZEUVVGc1F6dEJRVU5CTTBZc1UwRkJUekpHTEZOQlFWTXNRMEZCYUVJc1JVRkJiVUlzTUVSQlFXNUNPMEZCUTBFelJpeFRRVUZQTWtZc1UwRkJVM0ZFTEVkQlFXaENMRVZCUVhGQ0xEWkRRVUZ5UWp0QlFVTkJhRW9zVTBGQlQyMUVMRXRCUVVzNFJpeExRVUZNTEVOQlFWZDBSQ3hMUVVGWUxFMUJRWE5DUVN4TFFVRTNRaXhGUVVGdlF5eHJRMEZCY0VNN1FVRkRSRHM3UVVGRlJDeFRRVUZUVlN4VFFVRlVMRU5CUVc5Q1ZpeExRVUZ3UWl4RlFVRXlRbkZFTEVkQlFUTkNMRVZCUVdkRE5VWXNSMEZCYUVNc1JVRkJjVU03UVVGRGJrTndSQ3hUUVVGUExFOUJRVTh5Uml4TFFVRlFMRXRCUVdsQ0xGRkJRWGhDTEVWQlFXdERMSFZEUVVGc1F6dEJRVU5CTTBZc1UwRkJUekpHTEZOQlFWTnhSQ3hIUVVGb1FpeEZRVUZ4UWl4NVEwRkJja0k3UVVGRFFXaEtMRk5CUVU4eVJpeFRRVUZUZGtNc1IwRkJhRUlzUlVGQmNVSXNNRU5CUVhKQ08wRkJRMEZ3UkN4VFFVRlBiVVFzUzBGQlN6aEdMRXRCUVV3c1EwRkJWM1JFTEV0QlFWZ3NUVUZCYzBKQkxFdEJRVGRDTEVWQlFXOURMR3REUVVGd1F6dEJRVU5FT3p0QlFVVkVMRk5CUVZOclFpeFpRVUZVTEVOQlFYVkNiRUlzUzBGQmRrSXNSVUZCT0VKeFJDeEhRVUU1UWl4RlFVRnRRelZHTEVkQlFXNURMRVZCUVhkRE8wRkJRM1JEY0VRc1UwRkJUeXhQUVVGUE1rWXNTMEZCVUN4TFFVRnBRaXhSUVVGNFFpeEZRVUZyUXl4MVEwRkJiRU03UVVGRFFUTkdMRk5CUVU4eVJpeFRRVUZUY1VRc1IwRkJhRUlzUlVGQmNVSXNlVU5CUVhKQ08wRkJRMEZvU2l4VFFVRlBNa1lzVTBGQlUzWkRMRWRCUVdoQ0xFVkJRWEZDTERCRFFVRnlRanRCUVVORU96dEJRVVZFTEZOQlFWTndSQ3hOUVVGVUxFTkJRV2xDYTBvc1NVRkJha0lzUlVGQmRVSkRMRTlCUVhaQ0xFVkJRV2RETzBGQlF6bENMRTFCUVVrc1EwRkJRMFFzU1VGQlRDeEZRVUZYTEUxQlFVMHNTVUZCU1haTExFdEJRVW9zUTBGQlZYZExMRmRCUVZjc2EwSkJRWEpDTEVOQlFVNDdRVUZEV2lJc0ltWnBiR1VpT2lKcGJtUmxlQzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFJVnh1SUNvZ1ZHaGxJR0oxWm1abGNpQnRiMlIxYkdVZ1puSnZiU0J1YjJSbExtcHpMQ0JtYjNJZ2RHaGxJR0p5YjNkelpYSXVYRzRnS2x4dUlDb2dRR0YxZEdodmNpQWdJRVpsY205emN5QkJZbTkxYTJoaFpHbHFaV2dnUEdabGNtOXpjMEJtWlhKdmMzTXViM0puUGlBOGFIUjBjRG92TDJabGNtOXpjeTV2Y21jK1hHNGdLaUJBYkdsalpXNXpaU0FnVFVsVVhHNGdLaTljYmx4dWRtRnlJR0poYzJVMk5DQTlJSEpsY1hWcGNtVW9KMkpoYzJVMk5DMXFjeWNwWEc1MllYSWdhV1ZsWlRjMU5DQTlJSEpsY1hWcGNtVW9KMmxsWldVM05UUW5LVnh1WEc1bGVIQnZjblJ6TGtKMVptWmxjaUE5SUVKMVptWmxjbHh1Wlhod2IzSjBjeTVUYkc5M1FuVm1abVZ5SUQwZ1FuVm1abVZ5WEc1bGVIQnZjblJ6TGtsT1UxQkZRMVJmVFVGWVgwSlpWRVZUSUQwZ05UQmNia0oxWm1abGNpNXdiMjlzVTJsNlpTQTlJRGd4T1RKY2JseHVMeW9xWEc0Z0tpQkpaaUJnUW5WbVptVnlMbDkxYzJWVWVYQmxaRUZ5Y21GNWMyQTZYRzRnS2lBZ0lEMDlQU0IwY25WbElDQWdJRlZ6WlNCVmFXNTBPRUZ5Y21GNUlHbHRjR3hsYldWdWRHRjBhVzl1SUNobVlYTjBaWE4wS1Z4dUlDb2dJQ0E5UFQwZ1ptRnNjMlVnSUNCVmMyVWdUMkpxWldOMElHbHRjR3hsYldWdWRHRjBhVzl1SUNoamIyMXdZWFJwWW14bElHUnZkMjRnZEc4Z1NVVTJLVnh1SUNvdlhHNUNkV1ptWlhJdVgzVnpaVlI1Y0dWa1FYSnlZWGx6SUQwZ0tHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0x5OGdSR1YwWldOMElHbG1JR0p5YjNkelpYSWdjM1Z3Y0c5eWRITWdWSGx3WldRZ1FYSnlZWGx6TGlCVGRYQndiM0owWldRZ1luSnZkM05sY25NZ1lYSmxJRWxGSURFd0t5d2dSbWx5WldadmVDQTBLeXhjYmlBZ0x5OGdRMmh5YjIxbElEY3JMQ0JUWVdaaGNta2dOUzR4S3l3Z1QzQmxjbUVnTVRFdU5pc3NJR2xQVXlBMExqSXJMaUJKWmlCMGFHVWdZbkp2ZDNObGNpQmtiMlZ6SUc1dmRDQnpkWEJ3YjNKMElHRmtaR2x1WjF4dUlDQXZMeUJ3Y205d1pYSjBhV1Z6SUhSdklHQlZhVzUwT0VGeWNtRjVZQ0JwYm5OMFlXNWpaWE1zSUhSb1pXNGdkR2hoZENkeklIUm9aU0J6WVcxbElHRnpJRzV2SUdCVmFXNTBPRUZ5Y21GNVlDQnpkWEJ3YjNKMFhHNGdJQzh2SUdKbFkyRjFjMlVnZDJVZ2JtVmxaQ0IwYnlCaVpTQmhZbXhsSUhSdklHRmtaQ0JoYkd3Z2RHaGxJRzV2WkdVZ1FuVm1abVZ5SUVGUVNTQnRaWFJvYjJSekxpQlVhR2x6SUdseklHRnVJR2x6YzNWbFhHNGdJQzh2SUdsdUlFWnBjbVZtYjNnZ05DMHlPUzRnVG05M0lHWnBlR1ZrT2lCb2RIUndjem92TDJKMVozcHBiR3hoTG0xdmVtbHNiR0V1YjNKbkwzTm9iM2RmWW5WbkxtTm5hVDlwWkQwMk9UVTBNemhjYmlBZ2RISjVJSHRjYmlBZ0lDQjJZWElnWW5WbUlEMGdibVYzSUVGeWNtRjVRblZtWm1WeUtEQXBYRzRnSUNBZ2RtRnlJR0Z5Y2lBOUlHNWxkeUJWYVc1ME9FRnljbUY1S0dKMVppbGNiaUFnSUNCaGNuSXVabTl2SUQwZ1puVnVZM1JwYjI0Z0tDa2dleUJ5WlhSMWNtNGdORElnZlZ4dUlDQWdJSEpsZEhWeWJpQTBNaUE5UFQwZ1lYSnlMbVp2YnlncElDWW1YRzRnSUNBZ0lDQWdJSFI1Y0dWdlppQmhjbkl1YzNWaVlYSnlZWGtnUFQwOUlDZG1kVzVqZEdsdmJpY2dMeThnUTJoeWIyMWxJRGt0TVRBZ2JHRmpheUJnYzNWaVlYSnlZWGxnWEc0Z0lIMGdZMkYwWTJnZ0tHVXBJSHRjYmlBZ0lDQnlaWFIxY200Z1ptRnNjMlZjYmlBZ2ZWeHVmU2tvS1Z4dVhHNHZLaXBjYmlBcUlFTnNZWE56T2lCQ2RXWm1aWEpjYmlBcUlEMDlQVDA5UFQwOVBUMDlQVDFjYmlBcVhHNGdLaUJVYUdVZ1FuVm1abVZ5SUdOdmJuTjBjblZqZEc5eUlISmxkSFZ5Ym5NZ2FXNXpkR0Z1WTJWeklHOW1JR0JWYVc1ME9FRnljbUY1WUNCMGFHRjBJR0Z5WlNCaGRXZHRaVzUwWldSY2JpQXFJSGRwZEdnZ1puVnVZM1JwYjI0Z2NISnZjR1Z5ZEdsbGN5Qm1iM0lnWVd4c0lIUm9aU0J1YjJSbElHQkNkV1ptWlhKZ0lFRlFTU0JtZFc1amRHbHZibk11SUZkbElIVnpaVnh1SUNvZ1lGVnBiblE0UVhKeVlYbGdJSE52SUhSb1lYUWdjM0YxWVhKbElHSnlZV05yWlhRZ2JtOTBZWFJwYjI0Z2QyOXlhM01nWVhNZ1pYaHdaV04wWldRZ0xTMGdhWFFnY21WMGRYSnVjMXh1SUNvZ1lTQnphVzVuYkdVZ2IyTjBaWFF1WEc0Z0tseHVJQ29nUW5rZ1lYVm5iV1Z1ZEdsdVp5QjBhR1VnYVc1emRHRnVZMlZ6TENCM1pTQmpZVzRnWVhadmFXUWdiVzlrYVdaNWFXNW5JSFJvWlNCZ1ZXbHVkRGhCY25KaGVXQmNiaUFxSUhCeWIzUnZkSGx3WlM1Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnUW5WbVptVnlJQ2h6ZFdKcVpXTjBMQ0JsYm1OdlpHbHVaeXdnYm05YVpYSnZLU0I3WEc0Z0lHbG1JQ2doS0hSb2FYTWdhVzV6ZEdGdVkyVnZaaUJDZFdabVpYSXBLVnh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dRblZtWm1WeUtITjFZbXBsWTNRc0lHVnVZMjlrYVc1bkxDQnViMXBsY204cFhHNWNiaUFnZG1GeUlIUjVjR1VnUFNCMGVYQmxiMllnYzNWaWFtVmpkRnh1WEc0Z0lDOHZJRmR2Y210aGNtOTFibVE2SUc1dlpHVW5jeUJpWVhObE5qUWdhVzF3YkdWdFpXNTBZWFJwYjI0Z1lXeHNiM2R6SUdadmNpQnViMjR0Y0dGa1pHVmtJSE4wY21sdVozTmNiaUFnTHk4Z2QyaHBiR1VnWW1GelpUWTBMV3B6SUdSdlpYTWdibTkwTGx4dUlDQnBaaUFvWlc1amIyUnBibWNnUFQwOUlDZGlZWE5sTmpRbklDWW1JSFI1Y0dVZ1BUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdjM1ZpYW1WamRDQTlJSE4wY21sdVozUnlhVzBvYzNWaWFtVmpkQ2xjYmlBZ0lDQjNhR2xzWlNBb2MzVmlhbVZqZEM1c1pXNW5kR2dnSlNBMElDRTlQU0F3S1NCN1hHNGdJQ0FnSUNCemRXSnFaV04wSUQwZ2MzVmlhbVZqZENBcklDYzlKMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJQzh2SUVacGJtUWdkR2hsSUd4bGJtZDBhRnh1SUNCMllYSWdiR1Z1WjNSb1hHNGdJR2xtSUNoMGVYQmxJRDA5UFNBbmJuVnRZbVZ5SnlsY2JpQWdJQ0JzWlc1bmRHZ2dQU0JqYjJWeVkyVW9jM1ZpYW1WamRDbGNiaUFnWld4elpTQnBaaUFvZEhsd1pTQTlQVDBnSjNOMGNtbHVaeWNwWEc0Z0lDQWdiR1Z1WjNSb0lEMGdRblZtWm1WeUxtSjVkR1ZNWlc1bmRHZ29jM1ZpYW1WamRDd2daVzVqYjJScGJtY3BYRzRnSUdWc2MyVWdhV1lnS0hSNWNHVWdQVDA5SUNkdlltcGxZM1FuS1Z4dUlDQWdJR3hsYm1kMGFDQTlJR052WlhKalpTaHpkV0pxWldOMExteGxibWQwYUNrZ0x5OGdZWE56ZFcxbElIUm9ZWFFnYjJKcVpXTjBJR2x6SUdGeWNtRjVMV3hwYTJWY2JpQWdaV3h6WlZ4dUlDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25SbWx5YzNRZ1lYSm5kVzFsYm5RZ2JtVmxaSE1nZEc4Z1ltVWdZU0J1ZFcxaVpYSXNJR0Z5Y21GNUlHOXlJSE4wY21sdVp5NG5LVnh1WEc0Z0lIWmhjaUJpZFdaY2JpQWdhV1lnS0VKMVptWmxjaTVmZFhObFZIbHdaV1JCY25KaGVYTXBJSHRjYmlBZ0lDQXZMeUJRY21WbVpYSnlaV1E2SUZKbGRIVnliaUJoYmlCaGRXZHRaVzUwWldRZ1lGVnBiblE0UVhKeVlYbGdJR2x1YzNSaGJtTmxJR1p2Y2lCaVpYTjBJSEJsY21admNtMWhibU5sWEc0Z0lDQWdZblZtSUQwZ1FuVm1abVZ5TGw5aGRXZHRaVzUwS0c1bGR5QlZhVzUwT0VGeWNtRjVLR3hsYm1kMGFDa3BYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdMeThnUm1Gc2JHSmhZMnM2SUZKbGRIVnliaUJVU0VsVElHbHVjM1JoYm1ObElHOW1JRUoxWm1abGNpQW9ZM0psWVhSbFpDQmllU0JnYm1WM1lDbGNiaUFnSUNCaWRXWWdQU0IwYUdselhHNGdJQ0FnWW5WbUxteGxibWQwYUNBOUlHeGxibWQwYUZ4dUlDQWdJR0oxWmk1ZmFYTkNkV1ptWlhJZ1BTQjBjblZsWEc0Z0lIMWNibHh1SUNCMllYSWdhVnh1SUNCcFppQW9RblZtWm1WeUxsOTFjMlZVZVhCbFpFRnljbUY1Y3lBbUppQjBlWEJsYjJZZ2MzVmlhbVZqZEM1aWVYUmxUR1Z1WjNSb0lEMDlQU0FuYm5WdFltVnlKeWtnZTF4dUlDQWdJQzh2SUZOd1pXVmtJRzl3ZEdsdGFYcGhkR2x2YmlBdExTQjFjMlVnYzJWMElHbG1JSGRsSjNKbElHTnZjSGxwYm1jZ1puSnZiU0JoSUhSNWNHVmtJR0Z5Y21GNVhHNGdJQ0FnWW5WbUxsOXpaWFFvYzNWaWFtVmpkQ2xjYmlBZ2ZTQmxiSE5sSUdsbUlDaHBjMEZ5Y21GNWFYTm9LSE4xWW1wbFkzUXBLU0I3WEc0Z0lDQWdMeThnVkhKbFlYUWdZWEp5WVhrdGFYTm9JRzlpYW1WamRITWdZWE1nWVNCaWVYUmxJR0Z5Y21GNVhHNGdJQ0FnWm05eUlDaHBJRDBnTURzZ2FTQThJR3hsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNCcFppQW9RblZtWm1WeUxtbHpRblZtWm1WeUtITjFZbXBsWTNRcEtWeHVJQ0FnSUNBZ0lDQmlkV1piYVYwZ1BTQnpkV0pxWldOMExuSmxZV1JWU1c1ME9DaHBLVnh1SUNBZ0lDQWdaV3h6WlZ4dUlDQWdJQ0FnSUNCaWRXWmJhVjBnUFNCemRXSnFaV04wVzJsZFhHNGdJQ0FnZlZ4dUlDQjlJR1ZzYzJVZ2FXWWdLSFI1Y0dVZ1BUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdZblZtTG5keWFYUmxLSE4xWW1wbFkzUXNJREFzSUdWdVkyOWthVzVuS1Z4dUlDQjlJR1ZzYzJVZ2FXWWdLSFI1Y0dVZ1BUMDlJQ2R1ZFcxaVpYSW5JQ1ltSUNGQ2RXWm1aWEl1WDNWelpWUjVjR1ZrUVhKeVlYbHpJQ1ltSUNGdWIxcGxjbThwSUh0Y2JpQWdJQ0JtYjNJZ0tHa2dQU0F3T3lCcElEd2diR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUdKMVpsdHBYU0E5SURCY2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnWW5WbVhHNTlYRzVjYmk4dklGTlVRVlJKUXlCTlJWUklUMFJUWEc0dkx5QTlQVDA5UFQwOVBUMDlQVDA5UFZ4dVhHNUNkV1ptWlhJdWFYTkZibU52WkdsdVp5QTlJR1oxYm1OMGFXOXVJQ2hsYm1OdlpHbHVaeWtnZTF4dUlDQnpkMmwwWTJnZ0tGTjBjbWx1WnlobGJtTnZaR2x1WnlrdWRHOU1iM2RsY2tOaGMyVW9LU2tnZTF4dUlDQWdJR05oYzJVZ0oyaGxlQ2M2WEc0Z0lDQWdZMkZ6WlNBbmRYUm1PQ2M2WEc0Z0lDQWdZMkZ6WlNBbmRYUm1MVGduT2x4dUlDQWdJR05oYzJVZ0oyRnpZMmxwSnpwY2JpQWdJQ0JqWVhObElDZGlhVzVoY25rbk9seHVJQ0FnSUdOaGMyVWdKMkpoYzJVMk5DYzZYRzRnSUNBZ1kyRnpaU0FuY21GM0p6cGNiaUFnSUNCallYTmxJQ2QxWTNNeUp6cGNiaUFnSUNCallYTmxJQ2QxWTNNdE1pYzZYRzRnSUNBZ1kyRnpaU0FuZFhSbU1UWnNaU2M2WEc0Z0lDQWdZMkZ6WlNBbmRYUm1MVEUyYkdVbk9seHVJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVmNiaUFnSUNCa1pXWmhkV3gwT2x4dUlDQWdJQ0FnY21WMGRYSnVJR1poYkhObFhHNGdJSDFjYm4xY2JseHVRblZtWm1WeUxtbHpRblZtWm1WeUlEMGdablZ1WTNScGIyNGdLR0lwSUh0Y2JpQWdjbVYwZFhKdUlDRWhLR0lnSVQwOUlHNTFiR3dnSmlZZ1lpQWhQVDBnZFc1a1pXWnBibVZrSUNZbUlHSXVYMmx6UW5WbVptVnlLVnh1ZlZ4dVhHNUNkV1ptWlhJdVlubDBaVXhsYm1kMGFDQTlJR1oxYm1OMGFXOXVJQ2h6ZEhJc0lHVnVZMjlrYVc1bktTQjdYRzRnSUhaaGNpQnlaWFJjYmlBZ2MzUnlJRDBnYzNSeUlDc2dKeWRjYmlBZ2MzZHBkR05vSUNobGJtTnZaR2x1WnlCOGZDQW5kWFJtT0NjcElIdGNiaUFnSUNCallYTmxJQ2RvWlhnbk9seHVJQ0FnSUNBZ2NtVjBJRDBnYzNSeUxteGxibWQwYUNBdklESmNiaUFnSUNBZ0lHSnlaV0ZyWEc0Z0lDQWdZMkZ6WlNBbmRYUm1PQ2M2WEc0Z0lDQWdZMkZ6WlNBbmRYUm1MVGduT2x4dUlDQWdJQ0FnY21WMElEMGdkWFJtT0ZSdlFubDBaWE1vYzNSeUtTNXNaVzVuZEdoY2JpQWdJQ0FnSUdKeVpXRnJYRzRnSUNBZ1kyRnpaU0FuWVhOamFXa25PbHh1SUNBZ0lHTmhjMlVnSjJKcGJtRnllU2M2WEc0Z0lDQWdZMkZ6WlNBbmNtRjNKenBjYmlBZ0lDQWdJSEpsZENBOUlITjBjaTVzWlc1bmRHaGNiaUFnSUNBZ0lHSnlaV0ZyWEc0Z0lDQWdZMkZ6WlNBblltRnpaVFkwSnpwY2JpQWdJQ0FnSUhKbGRDQTlJR0poYzJVMk5GUnZRbmwwWlhNb2MzUnlLUzVzWlc1bmRHaGNiaUFnSUNBZ0lHSnlaV0ZyWEc0Z0lDQWdZMkZ6WlNBbmRXTnpNaWM2WEc0Z0lDQWdZMkZ6WlNBbmRXTnpMVEluT2x4dUlDQWdJR05oYzJVZ0ozVjBaakUyYkdVbk9seHVJQ0FnSUdOaGMyVWdKM1YwWmkweE5teGxKenBjYmlBZ0lDQWdJSEpsZENBOUlITjBjaTVzWlc1bmRHZ2dLaUF5WEc0Z0lDQWdJQ0JpY21WaGExeHVJQ0FnSUdSbFptRjFiSFE2WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMVZ1YTI1dmQyNGdaVzVqYjJScGJtY25LVnh1SUNCOVhHNGdJSEpsZEhWeWJpQnlaWFJjYm4xY2JseHVRblZtWm1WeUxtTnZibU5oZENBOUlHWjFibU4wYVc5dUlDaHNhWE4wTENCMGIzUmhiRXhsYm1kMGFDa2dlMXh1SUNCaGMzTmxjblFvYVhOQmNuSmhlU2hzYVhOMEtTd2dKMVZ6WVdkbE9pQkNkV1ptWlhJdVkyOXVZMkYwS0d4cGMzUXNJRnQwYjNSaGJFeGxibWQwYUYwcFhGeHVKeUFyWEc0Z0lDQWdJQ0FuYkdsemRDQnphRzkxYkdRZ1ltVWdZVzRnUVhKeVlYa3VKeWxjYmx4dUlDQnBaaUFvYkdsemRDNXNaVzVuZEdnZ1BUMDlJREFwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUVKMVptWmxjaWd3S1Z4dUlDQjlJR1ZzYzJVZ2FXWWdLR3hwYzNRdWJHVnVaM1JvSUQwOVBTQXhLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHeHBjM1JiTUYxY2JpQWdmVnh1WEc0Z0lIWmhjaUJwWEc0Z0lHbG1JQ2gwZVhCbGIyWWdkRzkwWVd4TVpXNW5kR2dnSVQwOUlDZHVkVzFpWlhJbktTQjdYRzRnSUNBZ2RHOTBZV3hNWlc1bmRHZ2dQU0F3WEc0Z0lDQWdabTl5SUNocElEMGdNRHNnYVNBOElHeHBjM1F1YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lIUnZkR0ZzVEdWdVozUm9JQ3M5SUd4cGMzUmJhVjB1YkdWdVozUm9YRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdkbUZ5SUdKMVppQTlJRzVsZHlCQ2RXWm1aWElvZEc5MFlXeE1aVzVuZEdncFhHNGdJSFpoY2lCd2IzTWdQU0F3WEc0Z0lHWnZjaUFvYVNBOUlEQTdJR2tnUENCc2FYTjBMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnZG1GeUlHbDBaVzBnUFNCc2FYTjBXMmxkWEc0Z0lDQWdhWFJsYlM1amIzQjVLR0oxWml3Z2NHOXpLVnh1SUNBZ0lIQnZjeUFyUFNCcGRHVnRMbXhsYm1kMGFGeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCaWRXWmNibjFjYmx4dUx5OGdRbFZHUmtWU0lFbE9VMVJCVGtORklFMUZWRWhQUkZOY2JpOHZJRDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVhHNWNibVoxYm1OMGFXOXVJRjlvWlhoWGNtbDBaU0FvWW5WbUxDQnpkSEpwYm1jc0lHOW1abk5sZEN3Z2JHVnVaM1JvS1NCN1hHNGdJRzltWm5ObGRDQTlJRTUxYldKbGNpaHZabVp6WlhRcElIeDhJREJjYmlBZ2RtRnlJSEpsYldGcGJtbHVaeUE5SUdKMVppNXNaVzVuZEdnZ0xTQnZabVp6WlhSY2JpQWdhV1lnS0NGc1pXNW5kR2dwSUh0Y2JpQWdJQ0JzWlc1bmRHZ2dQU0J5WlcxaGFXNXBibWRjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0JzWlc1bmRHZ2dQU0JPZFcxaVpYSW9iR1Z1WjNSb0tWeHVJQ0FnSUdsbUlDaHNaVzVuZEdnZ1BpQnlaVzFoYVc1cGJtY3BJSHRjYmlBZ0lDQWdJR3hsYm1kMGFDQTlJSEpsYldGcGJtbHVaMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJQzh2SUcxMWMzUWdZbVVnWVc0Z1pYWmxiaUJ1ZFcxaVpYSWdiMllnWkdsbmFYUnpYRzRnSUhaaGNpQnpkSEpNWlc0Z1BTQnpkSEpwYm1jdWJHVnVaM1JvWEc0Z0lHRnpjMlZ5ZENoemRISk1aVzRnSlNBeUlEMDlQU0F3TENBblNXNTJZV3hwWkNCb1pYZ2djM1J5YVc1bkp5bGNibHh1SUNCcFppQW9iR1Z1WjNSb0lENGdjM1J5VEdWdUlDOGdNaWtnZTF4dUlDQWdJR3hsYm1kMGFDQTlJSE4wY2t4bGJpQXZJREpjYmlBZ2ZWeHVJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUd4bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ2RtRnlJR0o1ZEdVZ1BTQndZWEp6WlVsdWRDaHpkSEpwYm1jdWMzVmljM1J5S0drZ0tpQXlMQ0F5S1N3Z01UWXBYRzRnSUNBZ1lYTnpaWEowS0NGcGMwNWhUaWhpZVhSbEtTd2dKMGx1ZG1Gc2FXUWdhR1Y0SUhOMGNtbHVaeWNwWEc0Z0lDQWdZblZtVzI5bVpuTmxkQ0FySUdsZElEMGdZbmwwWlZ4dUlDQjlYRzRnSUVKMVptWmxjaTVmWTJoaGNuTlhjbWwwZEdWdUlEMGdhU0FxSURKY2JpQWdjbVYwZFhKdUlHbGNibjFjYmx4dVpuVnVZM1JwYjI0Z1gzVjBaamhYY21sMFpTQW9ZblZtTENCemRISnBibWNzSUc5bVpuTmxkQ3dnYkdWdVozUm9LU0I3WEc0Z0lIWmhjaUJqYUdGeWMxZHlhWFIwWlc0Z1BTQkNkV1ptWlhJdVgyTm9ZWEp6VjNKcGRIUmxiaUE5WEc0Z0lDQWdZbXhwZEVKMVptWmxjaWgxZEdZNFZHOUNlWFJsY3loemRISnBibWNwTENCaWRXWXNJRzltWm5ObGRDd2diR1Z1WjNSb0tWeHVJQ0J5WlhSMWNtNGdZMmhoY25OWGNtbDBkR1Z1WEc1OVhHNWNibVoxYm1OMGFXOXVJRjloYzJOcGFWZHlhWFJsSUNoaWRXWXNJSE4wY21sdVp5d2diMlptYzJWMExDQnNaVzVuZEdncElIdGNiaUFnZG1GeUlHTm9ZWEp6VjNKcGRIUmxiaUE5SUVKMVptWmxjaTVmWTJoaGNuTlhjbWwwZEdWdUlEMWNiaUFnSUNCaWJHbDBRblZtWm1WeUtHRnpZMmxwVkc5Q2VYUmxjeWh6ZEhKcGJtY3BMQ0JpZFdZc0lHOW1abk5sZEN3Z2JHVnVaM1JvS1Z4dUlDQnlaWFIxY200Z1kyaGhjbk5YY21sMGRHVnVYRzU5WEc1Y2JtWjFibU4wYVc5dUlGOWlhVzVoY25sWGNtbDBaU0FvWW5WbUxDQnpkSEpwYm1jc0lHOW1abk5sZEN3Z2JHVnVaM1JvS1NCN1hHNGdJSEpsZEhWeWJpQmZZWE5qYVdsWGNtbDBaU2hpZFdZc0lITjBjbWx1Wnl3Z2IyWm1jMlYwTENCc1pXNW5kR2dwWEc1OVhHNWNibVoxYm1OMGFXOXVJRjlpWVhObE5qUlhjbWwwWlNBb1luVm1MQ0J6ZEhKcGJtY3NJRzltWm5ObGRDd2diR1Z1WjNSb0tTQjdYRzRnSUhaaGNpQmphR0Z5YzFkeWFYUjBaVzRnUFNCQ2RXWm1aWEl1WDJOb1lYSnpWM0pwZEhSbGJpQTlYRzRnSUNBZ1lteHBkRUoxWm1abGNpaGlZWE5sTmpSVWIwSjVkR1Z6S0hOMGNtbHVaeWtzSUdKMVppd2diMlptYzJWMExDQnNaVzVuZEdncFhHNGdJSEpsZEhWeWJpQmphR0Z5YzFkeWFYUjBaVzVjYm4xY2JseHVablZ1WTNScGIyNGdYM1YwWmpFMmJHVlhjbWwwWlNBb1luVm1MQ0J6ZEhKcGJtY3NJRzltWm5ObGRDd2diR1Z1WjNSb0tTQjdYRzRnSUhaaGNpQmphR0Z5YzFkeWFYUjBaVzRnUFNCQ2RXWm1aWEl1WDJOb1lYSnpWM0pwZEhSbGJpQTlYRzRnSUNBZ1lteHBkRUoxWm1abGNpaDFkR1l4Tm14bFZHOUNlWFJsY3loemRISnBibWNwTENCaWRXWXNJRzltWm5ObGRDd2diR1Z1WjNSb0tWeHVJQ0J5WlhSMWNtNGdZMmhoY25OWGNtbDBkR1Z1WEc1OVhHNWNia0oxWm1abGNpNXdjbTkwYjNSNWNHVXVkM0pwZEdVZ1BTQm1kVzVqZEdsdmJpQW9jM1J5YVc1bkxDQnZabVp6WlhRc0lHeGxibWQwYUN3Z1pXNWpiMlJwYm1jcElIdGNiaUFnTHk4Z1UzVndjRzl5ZENCaWIzUm9JQ2h6ZEhKcGJtY3NJRzltWm5ObGRDd2diR1Z1WjNSb0xDQmxibU52WkdsdVp5bGNiaUFnTHk4Z1lXNWtJSFJvWlNCc1pXZGhZM2tnS0hOMGNtbHVaeXdnWlc1amIyUnBibWNzSUc5bVpuTmxkQ3dnYkdWdVozUm9LVnh1SUNCcFppQW9hWE5HYVc1cGRHVW9iMlptYzJWMEtTa2dlMXh1SUNBZ0lHbG1JQ2doYVhOR2FXNXBkR1VvYkdWdVozUm9LU2tnZTF4dUlDQWdJQ0FnWlc1amIyUnBibWNnUFNCc1pXNW5kR2hjYmlBZ0lDQWdJR3hsYm1kMGFDQTlJSFZ1WkdWbWFXNWxaRnh1SUNBZ0lIMWNiaUFnZlNCbGJITmxJSHNnSUM4dklHeGxaMkZqZVZ4dUlDQWdJSFpoY2lCemQyRndJRDBnWlc1amIyUnBibWRjYmlBZ0lDQmxibU52WkdsdVp5QTlJRzltWm5ObGRGeHVJQ0FnSUc5bVpuTmxkQ0E5SUd4bGJtZDBhRnh1SUNBZ0lHeGxibWQwYUNBOUlITjNZWEJjYmlBZ2ZWeHVYRzRnSUc5bVpuTmxkQ0E5SUU1MWJXSmxjaWh2Wm1aelpYUXBJSHg4SURCY2JpQWdkbUZ5SUhKbGJXRnBibWx1WnlBOUlIUm9hWE11YkdWdVozUm9JQzBnYjJabWMyVjBYRzRnSUdsbUlDZ2hiR1Z1WjNSb0tTQjdYRzRnSUNBZ2JHVnVaM1JvSUQwZ2NtVnRZV2x1YVc1blhHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2JHVnVaM1JvSUQwZ1RuVnRZbVZ5S0d4bGJtZDBhQ2xjYmlBZ0lDQnBaaUFvYkdWdVozUm9JRDRnY21WdFlXbHVhVzVuS1NCN1hHNGdJQ0FnSUNCc1pXNW5kR2dnUFNCeVpXMWhhVzVwYm1kY2JpQWdJQ0I5WEc0Z0lIMWNiaUFnWlc1amIyUnBibWNnUFNCVGRISnBibWNvWlc1amIyUnBibWNnZkh3Z0ozVjBaamduS1M1MGIweHZkMlZ5UTJGelpTZ3BYRzVjYmlBZ2RtRnlJSEpsZEZ4dUlDQnpkMmwwWTJnZ0tHVnVZMjlrYVc1bktTQjdYRzRnSUNBZ1kyRnpaU0FuYUdWNEp6cGNiaUFnSUNBZ0lISmxkQ0E5SUY5b1pYaFhjbWwwWlNoMGFHbHpMQ0J6ZEhKcGJtY3NJRzltWm5ObGRDd2diR1Z1WjNSb0tWeHVJQ0FnSUNBZ1luSmxZV3RjYmlBZ0lDQmpZWE5sSUNkMWRHWTRKenBjYmlBZ0lDQmpZWE5sSUNkMWRHWXRPQ2M2WEc0Z0lDQWdJQ0J5WlhRZ1BTQmZkWFJtT0ZkeWFYUmxLSFJvYVhNc0lITjBjbWx1Wnl3Z2IyWm1jMlYwTENCc1pXNW5kR2dwWEc0Z0lDQWdJQ0JpY21WaGExeHVJQ0FnSUdOaGMyVWdKMkZ6WTJscEp6cGNiaUFnSUNBZ0lISmxkQ0E5SUY5aGMyTnBhVmR5YVhSbEtIUm9hWE1zSUhOMGNtbHVaeXdnYjJabWMyVjBMQ0JzWlc1bmRHZ3BYRzRnSUNBZ0lDQmljbVZoYTF4dUlDQWdJR05oYzJVZ0oySnBibUZ5ZVNjNlhHNGdJQ0FnSUNCeVpYUWdQU0JmWW1sdVlYSjVWM0pwZEdVb2RHaHBjeXdnYzNSeWFXNW5MQ0J2Wm1aelpYUXNJR3hsYm1kMGFDbGNiaUFnSUNBZ0lHSnlaV0ZyWEc0Z0lDQWdZMkZ6WlNBblltRnpaVFkwSnpwY2JpQWdJQ0FnSUhKbGRDQTlJRjlpWVhObE5qUlhjbWwwWlNoMGFHbHpMQ0J6ZEhKcGJtY3NJRzltWm5ObGRDd2diR1Z1WjNSb0tWeHVJQ0FnSUNBZ1luSmxZV3RjYmlBZ0lDQmpZWE5sSUNkMVkzTXlKenBjYmlBZ0lDQmpZWE5sSUNkMVkzTXRNaWM2WEc0Z0lDQWdZMkZ6WlNBbmRYUm1NVFpzWlNjNlhHNGdJQ0FnWTJGelpTQW5kWFJtTFRFMmJHVW5PbHh1SUNBZ0lDQWdjbVYwSUQwZ1gzVjBaakUyYkdWWGNtbDBaU2gwYUdsekxDQnpkSEpwYm1jc0lHOW1abk5sZEN3Z2JHVnVaM1JvS1Z4dUlDQWdJQ0FnWW5KbFlXdGNiaUFnSUNCa1pXWmhkV3gwT2x4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2RWYm10dWIzZHVJR1Z1WTI5a2FXNW5KeWxjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdjbVYwWEc1OVhHNWNia0oxWm1abGNpNXdjbTkwYjNSNWNHVXVkRzlUZEhKcGJtY2dQU0JtZFc1amRHbHZiaUFvWlc1amIyUnBibWNzSUhOMFlYSjBMQ0JsYm1RcElIdGNiaUFnZG1GeUlITmxiR1lnUFNCMGFHbHpYRzVjYmlBZ1pXNWpiMlJwYm1jZ1BTQlRkSEpwYm1jb1pXNWpiMlJwYm1jZ2ZId2dKM1YwWmpnbktTNTBiMHh2ZDJWeVEyRnpaU2dwWEc0Z0lITjBZWEowSUQwZ1RuVnRZbVZ5S0hOMFlYSjBLU0I4ZkNBd1hHNGdJR1Z1WkNBOUlDaGxibVFnSVQwOUlIVnVaR1ZtYVc1bFpDbGNiaUFnSUNBL0lFNTFiV0psY2lobGJtUXBYRzRnSUNBZ09pQmxibVFnUFNCelpXeG1MbXhsYm1kMGFGeHVYRzRnSUM4dklFWmhjM1J3WVhSb0lHVnRjSFI1SUhOMGNtbHVaM05jYmlBZ2FXWWdLR1Z1WkNBOVBUMGdjM1JoY25RcFhHNGdJQ0FnY21WMGRYSnVJQ2NuWEc1Y2JpQWdkbUZ5SUhKbGRGeHVJQ0J6ZDJsMFkyZ2dLR1Z1WTI5a2FXNW5LU0I3WEc0Z0lDQWdZMkZ6WlNBbmFHVjRKenBjYmlBZ0lDQWdJSEpsZENBOUlGOW9aWGhUYkdsalpTaHpaV3htTENCemRHRnlkQ3dnWlc1a0tWeHVJQ0FnSUNBZ1luSmxZV3RjYmlBZ0lDQmpZWE5sSUNkMWRHWTRKenBjYmlBZ0lDQmpZWE5sSUNkMWRHWXRPQ2M2WEc0Z0lDQWdJQ0J5WlhRZ1BTQmZkWFJtT0ZOc2FXTmxLSE5sYkdZc0lITjBZWEowTENCbGJtUXBYRzRnSUNBZ0lDQmljbVZoYTF4dUlDQWdJR05oYzJVZ0oyRnpZMmxwSnpwY2JpQWdJQ0FnSUhKbGRDQTlJRjloYzJOcGFWTnNhV05sS0hObGJHWXNJSE4wWVhKMExDQmxibVFwWEc0Z0lDQWdJQ0JpY21WaGExeHVJQ0FnSUdOaGMyVWdKMkpwYm1GeWVTYzZYRzRnSUNBZ0lDQnlaWFFnUFNCZlltbHVZWEo1VTJ4cFkyVW9jMlZzWml3Z2MzUmhjblFzSUdWdVpDbGNiaUFnSUNBZ0lHSnlaV0ZyWEc0Z0lDQWdZMkZ6WlNBblltRnpaVFkwSnpwY2JpQWdJQ0FnSUhKbGRDQTlJRjlpWVhObE5qUlRiR2xqWlNoelpXeG1MQ0J6ZEdGeWRDd2daVzVrS1Z4dUlDQWdJQ0FnWW5KbFlXdGNiaUFnSUNCallYTmxJQ2QxWTNNeUp6cGNiaUFnSUNCallYTmxJQ2QxWTNNdE1pYzZYRzRnSUNBZ1kyRnpaU0FuZFhSbU1UWnNaU2M2WEc0Z0lDQWdZMkZ6WlNBbmRYUm1MVEUyYkdVbk9seHVJQ0FnSUNBZ2NtVjBJRDBnWDNWMFpqRTJiR1ZUYkdsalpTaHpaV3htTENCemRHRnlkQ3dnWlc1a0tWeHVJQ0FnSUNBZ1luSmxZV3RjYmlBZ0lDQmtaV1poZFd4ME9seHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkVmJtdHViM2R1SUdWdVkyOWthVzVuSnlsY2JpQWdmVnh1SUNCeVpYUjFjbTRnY21WMFhHNTlYRzVjYmtKMVptWmxjaTV3Y205MGIzUjVjR1V1ZEc5S1UwOU9JRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lIUjVjR1U2SUNkQ2RXWm1aWEluTEZ4dUlDQWdJR1JoZEdFNklFRnljbUY1TG5CeWIzUnZkSGx3WlM1emJHbGpaUzVqWVd4c0tIUm9hWE11WDJGeWNpQjhmQ0IwYUdsekxDQXdLVnh1SUNCOVhHNTlYRzVjYmk4dklHTnZjSGtvZEdGeVoyVjBRblZtWm1WeUxDQjBZWEpuWlhSVGRHRnlkRDB3TENCemIzVnlZMlZUZEdGeWREMHdMQ0J6YjNWeVkyVkZibVE5WW5WbVptVnlMbXhsYm1kMGFDbGNia0oxWm1abGNpNXdjbTkwYjNSNWNHVXVZMjl3ZVNBOUlHWjFibU4wYVc5dUlDaDBZWEpuWlhRc0lIUmhjbWRsZEY5emRHRnlkQ3dnYzNSaGNuUXNJR1Z1WkNrZ2UxeHVJQ0IyWVhJZ2MyOTFjbU5sSUQwZ2RHaHBjMXh1WEc0Z0lHbG1JQ2doYzNSaGNuUXBJSE4wWVhKMElEMGdNRnh1SUNCcFppQW9JV1Z1WkNBbUppQmxibVFnSVQwOUlEQXBJR1Z1WkNBOUlIUm9hWE11YkdWdVozUm9YRzRnSUdsbUlDZ2hkR0Z5WjJWMFgzTjBZWEowS1NCMFlYSm5aWFJmYzNSaGNuUWdQU0F3WEc1Y2JpQWdMeThnUTI5d2VTQXdJR0o1ZEdWek95QjNaU2R5WlNCa2IyNWxYRzRnSUdsbUlDaGxibVFnUFQwOUlITjBZWEowS1NCeVpYUjFjbTVjYmlBZ2FXWWdLSFJoY21kbGRDNXNaVzVuZEdnZ1BUMDlJREFnZkh3Z2MyOTFjbU5sTG14bGJtZDBhQ0E5UFQwZ01Da2djbVYwZFhKdVhHNWNiaUFnTHk4Z1JtRjBZV3dnWlhKeWIzSWdZMjl1WkdsMGFXOXVjMXh1SUNCaGMzTmxjblFvWlc1a0lENDlJSE4wWVhKMExDQW5jMjkxY21ObFJXNWtJRHdnYzI5MWNtTmxVM1JoY25RbktWeHVJQ0JoYzNObGNuUW9kR0Z5WjJWMFgzTjBZWEowSUQ0OUlEQWdKaVlnZEdGeVoyVjBYM04wWVhKMElEd2dkR0Z5WjJWMExteGxibWQwYUN4Y2JpQWdJQ0FnSUNkMFlYSm5aWFJUZEdGeWRDQnZkWFFnYjJZZ1ltOTFibVJ6SnlsY2JpQWdZWE56WlhKMEtITjBZWEowSUQ0OUlEQWdKaVlnYzNSaGNuUWdQQ0J6YjNWeVkyVXViR1Z1WjNSb0xDQW5jMjkxY21ObFUzUmhjblFnYjNWMElHOW1JR0p2ZFc1a2N5Y3BYRzRnSUdGemMyVnlkQ2hsYm1RZ1BqMGdNQ0FtSmlCbGJtUWdQRDBnYzI5MWNtTmxMbXhsYm1kMGFDd2dKM052ZFhKalpVVnVaQ0J2ZFhRZ2IyWWdZbTkxYm1Sekp5bGNibHh1SUNBdkx5QkJjbVVnZDJVZ2IyOWlQMXh1SUNCcFppQW9aVzVrSUQ0Z2RHaHBjeTVzWlc1bmRHZ3BYRzRnSUNBZ1pXNWtJRDBnZEdocGN5NXNaVzVuZEdoY2JpQWdhV1lnS0hSaGNtZGxkQzVzWlc1bmRHZ2dMU0IwWVhKblpYUmZjM1JoY25RZ1BDQmxibVFnTFNCemRHRnlkQ2xjYmlBZ0lDQmxibVFnUFNCMFlYSm5aWFF1YkdWdVozUm9JQzBnZEdGeVoyVjBYM04wWVhKMElDc2djM1JoY25SY2JseHVJQ0IyWVhJZ2JHVnVJRDBnWlc1a0lDMGdjM1JoY25SY2JseHVJQ0JwWmlBb2JHVnVJRHdnTVRBd0lIeDhJQ0ZDZFdabVpYSXVYM1Z6WlZSNWNHVmtRWEp5WVhsektTQjdYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQnNaVzQ3SUdrckt5bGNiaUFnSUNBZ0lIUmhjbWRsZEZ0cElDc2dkR0Z5WjJWMFgzTjBZWEowWFNBOUlIUm9hWE5iYVNBcklITjBZWEowWFZ4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUhSaGNtZGxkQzVmYzJWMEtIUm9hWE11YzNWaVlYSnlZWGtvYzNSaGNuUXNJSE4wWVhKMElDc2diR1Z1S1N3Z2RHRnlaMlYwWDNOMFlYSjBLVnh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUY5aVlYTmxOalJUYkdsalpTQW9ZblZtTENCemRHRnlkQ3dnWlc1a0tTQjdYRzRnSUdsbUlDaHpkR0Z5ZENBOVBUMGdNQ0FtSmlCbGJtUWdQVDA5SUdKMVppNXNaVzVuZEdncElIdGNiaUFnSUNCeVpYUjFjbTRnWW1GelpUWTBMbVp5YjIxQ2VYUmxRWEp5WVhrb1luVm1LVnh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJSEpsZEhWeWJpQmlZWE5sTmpRdVpuSnZiVUo1ZEdWQmNuSmhlU2hpZFdZdWMyeHBZMlVvYzNSaGNuUXNJR1Z1WkNrcFhHNGdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdYM1YwWmpoVGJHbGpaU0FvWW5WbUxDQnpkR0Z5ZEN3Z1pXNWtLU0I3WEc0Z0lIWmhjaUJ5WlhNZ1BTQW5KMXh1SUNCMllYSWdkRzF3SUQwZ0p5ZGNiaUFnWlc1a0lEMGdUV0YwYUM1dGFXNG9ZblZtTG14bGJtZDBhQ3dnWlc1a0tWeHVYRzRnSUdadmNpQW9kbUZ5SUdrZ1BTQnpkR0Z5ZERzZ2FTQThJR1Z1WkRzZ2FTc3JLU0I3WEc0Z0lDQWdhV1lnS0dKMVpsdHBYU0E4UFNBd2VEZEdLU0I3WEc0Z0lDQWdJQ0J5WlhNZ0t6MGdaR1ZqYjJSbFZYUm1PRU5vWVhJb2RHMXdLU0FySUZOMGNtbHVaeTVtY205dFEyaGhja052WkdVb1luVm1XMmxkS1Z4dUlDQWdJQ0FnZEcxd0lEMGdKeWRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2RHMXdJQ3M5SUNjbEp5QXJJR0oxWmx0cFhTNTBiMU4wY21sdVp5Z3hOaWxjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdjbVZ6SUNzZ1pHVmpiMlJsVlhSbU9FTm9ZWElvZEcxd0tWeHVmVnh1WEc1bWRXNWpkR2x2YmlCZllYTmphV2xUYkdsalpTQW9ZblZtTENCemRHRnlkQ3dnWlc1a0tTQjdYRzRnSUhaaGNpQnlaWFFnUFNBbkoxeHVJQ0JsYm1RZ1BTQk5ZWFJvTG0xcGJpaGlkV1l1YkdWdVozUm9MQ0JsYm1RcFhHNWNiaUFnWm05eUlDaDJZWElnYVNBOUlITjBZWEowT3lCcElEd2daVzVrT3lCcEt5c3BYRzRnSUNBZ2NtVjBJQ3M5SUZOMGNtbHVaeTVtY205dFEyaGhja052WkdVb1luVm1XMmxkS1Z4dUlDQnlaWFIxY200Z2NtVjBYRzU5WEc1Y2JtWjFibU4wYVc5dUlGOWlhVzVoY25sVGJHbGpaU0FvWW5WbUxDQnpkR0Z5ZEN3Z1pXNWtLU0I3WEc0Z0lISmxkSFZ5YmlCZllYTmphV2xUYkdsalpTaGlkV1lzSUhOMFlYSjBMQ0JsYm1RcFhHNTlYRzVjYm1aMWJtTjBhVzl1SUY5b1pYaFRiR2xqWlNBb1luVm1MQ0J6ZEdGeWRDd2daVzVrS1NCN1hHNGdJSFpoY2lCc1pXNGdQU0JpZFdZdWJHVnVaM1JvWEc1Y2JpQWdhV1lnS0NGemRHRnlkQ0I4ZkNCemRHRnlkQ0E4SURBcElITjBZWEowSUQwZ01GeHVJQ0JwWmlBb0lXVnVaQ0I4ZkNCbGJtUWdQQ0F3SUh4OElHVnVaQ0ErSUd4bGJpa2daVzVrSUQwZ2JHVnVYRzVjYmlBZ2RtRnlJRzkxZENBOUlDY25YRzRnSUdadmNpQW9kbUZ5SUdrZ1BTQnpkR0Z5ZERzZ2FTQThJR1Z1WkRzZ2FTc3JLU0I3WEc0Z0lDQWdiM1YwSUNzOUlIUnZTR1Y0S0dKMVpsdHBYU2xjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdiM1YwWEc1OVhHNWNibVoxYm1OMGFXOXVJRjkxZEdZeE5teGxVMnhwWTJVZ0tHSjFaaXdnYzNSaGNuUXNJR1Z1WkNrZ2UxeHVJQ0IyWVhJZ1lubDBaWE1nUFNCaWRXWXVjMnhwWTJVb2MzUmhjblFzSUdWdVpDbGNiaUFnZG1GeUlISmxjeUE5SUNjblhHNGdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnWW5sMFpYTXViR1Z1WjNSb095QnBJQ3M5SURJcElIdGNiaUFnSUNCeVpYTWdLejBnVTNSeWFXNW5MbVp5YjIxRGFHRnlRMjlrWlNoaWVYUmxjMXRwWFNBcklHSjVkR1Z6VzJrck1WMGdLaUF5TlRZcFhHNGdJSDFjYmlBZ2NtVjBkWEp1SUhKbGMxeHVmVnh1WEc1Q2RXWm1aWEl1Y0hKdmRHOTBlWEJsTG5Oc2FXTmxJRDBnWm5WdVkzUnBiMjRnS0hOMFlYSjBMQ0JsYm1RcElIdGNiaUFnZG1GeUlHeGxiaUE5SUhSb2FYTXViR1Z1WjNSb1hHNGdJSE4wWVhKMElEMGdZMnhoYlhBb2MzUmhjblFzSUd4bGJpd2dNQ2xjYmlBZ1pXNWtJRDBnWTJ4aGJYQW9aVzVrTENCc1pXNHNJR3hsYmlsY2JseHVJQ0JwWmlBb1FuVm1abVZ5TGw5MWMyVlVlWEJsWkVGeWNtRjVjeWtnZTF4dUlDQWdJSEpsZEhWeWJpQkNkV1ptWlhJdVgyRjFaMjFsYm5Rb2RHaHBjeTV6ZFdKaGNuSmhlU2h6ZEdGeWRDd2daVzVrS1NsY2JpQWdmU0JsYkhObElIdGNiaUFnSUNCMllYSWdjMnhwWTJWTVpXNGdQU0JsYm1RZ0xTQnpkR0Z5ZEZ4dUlDQWdJSFpoY2lCdVpYZENkV1lnUFNCdVpYY2dRblZtWm1WeUtITnNhV05sVEdWdUxDQjFibVJsWm1sdVpXUXNJSFJ5ZFdVcFhHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCemJHbGpaVXhsYmpzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0J1WlhkQ2RXWmJhVjBnUFNCMGFHbHpXMmtnS3lCemRHRnlkRjFjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUc1bGQwSjFabHh1SUNCOVhHNTlYRzVjYmk4dklHQm5aWFJnSUhkcGJHd2dZbVVnY21WdGIzWmxaQ0JwYmlCT2IyUmxJREF1TVRNclhHNUNkV1ptWlhJdWNISnZkRzkwZVhCbExtZGxkQ0E5SUdaMWJtTjBhVzl1SUNodlptWnpaWFFwSUh0Y2JpQWdZMjl1YzI5c1pTNXNiMmNvSnk1blpYUW9LU0JwY3lCa1pYQnlaV05oZEdWa0xpQkJZMk5sYzNNZ2RYTnBibWNnWVhKeVlYa2dhVzVrWlhobGN5QnBibk4wWldGa0xpY3BYRzRnSUhKbGRIVnliaUIwYUdsekxuSmxZV1JWU1c1ME9DaHZabVp6WlhRcFhHNTlYRzVjYmk4dklHQnpaWFJnSUhkcGJHd2dZbVVnY21WdGIzWmxaQ0JwYmlCT2IyUmxJREF1TVRNclhHNUNkV1ptWlhJdWNISnZkRzkwZVhCbExuTmxkQ0E5SUdaMWJtTjBhVzl1SUNoMkxDQnZabVp6WlhRcElIdGNiaUFnWTI5dWMyOXNaUzVzYjJjb0p5NXpaWFFvS1NCcGN5QmtaWEJ5WldOaGRHVmtMaUJCWTJObGMzTWdkWE5wYm1jZ1lYSnlZWGtnYVc1a1pYaGxjeUJwYm5OMFpXRmtMaWNwWEc0Z0lISmxkSFZ5YmlCMGFHbHpMbmR5YVhSbFZVbHVkRGdvZGl3Z2IyWm1jMlYwS1Z4dWZWeHVYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbkpsWVdSVlNXNTBPQ0E5SUdaMWJtTjBhVzl1SUNodlptWnpaWFFzSUc1dlFYTnpaWEowS1NCN1hHNGdJR2xtSUNnaGJtOUJjM05sY25RcElIdGNiaUFnSUNCaGMzTmxjblFvYjJabWMyVjBJQ0U5UFNCMWJtUmxabWx1WldRZ0ppWWdiMlptYzJWMElDRTlQU0J1ZFd4c0xDQW5iV2x6YzJsdVp5QnZabVp6WlhRbktWeHVJQ0FnSUdGemMyVnlkQ2h2Wm1aelpYUWdQQ0IwYUdsekxteGxibWQwYUN3Z0oxUnllV2x1WnlCMGJ5QnlaV0ZrSUdKbGVXOXVaQ0JpZFdabVpYSWdiR1Z1WjNSb0p5bGNiaUFnZlZ4dVhHNGdJR2xtSUNodlptWnpaWFFnUGowZ2RHaHBjeTVzWlc1bmRHZ3BYRzRnSUNBZ2NtVjBkWEp1WEc1Y2JpQWdjbVYwZFhKdUlIUm9hWE5iYjJabWMyVjBYVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmZjbVZoWkZWSmJuUXhOaUFvWW5WbUxDQnZabVp6WlhRc0lHeHBkSFJzWlVWdVpHbGhiaXdnYm05QmMzTmxjblFwSUh0Y2JpQWdhV1lnS0NGdWIwRnpjMlZ5ZENrZ2UxeHVJQ0FnSUdGemMyVnlkQ2gwZVhCbGIyWWdiR2wwZEd4bFJXNWthV0Z1SUQwOVBTQW5ZbTl2YkdWaGJpY3NJQ2R0YVhOemFXNW5JRzl5SUdsdWRtRnNhV1FnWlc1a2FXRnVKeWxjYmlBZ0lDQmhjM05sY25Rb2IyWm1jMlYwSUNFOVBTQjFibVJsWm1sdVpXUWdKaVlnYjJabWMyVjBJQ0U5UFNCdWRXeHNMQ0FuYldsemMybHVaeUJ2Wm1aelpYUW5LVnh1SUNBZ0lHRnpjMlZ5ZENodlptWnpaWFFnS3lBeElEd2dZblZtTG14bGJtZDBhQ3dnSjFSeWVXbHVaeUIwYnlCeVpXRmtJR0psZVc5dVpDQmlkV1ptWlhJZ2JHVnVaM1JvSnlsY2JpQWdmVnh1WEc0Z0lIWmhjaUJzWlc0Z1BTQmlkV1l1YkdWdVozUm9YRzRnSUdsbUlDaHZabVp6WlhRZ1BqMGdiR1Z1S1Z4dUlDQWdJSEpsZEhWeWJseHVYRzRnSUhaaGNpQjJZV3hjYmlBZ2FXWWdLR3hwZEhSc1pVVnVaR2xoYmlrZ2UxeHVJQ0FnSUhaaGJDQTlJR0oxWmx0dlptWnpaWFJkWEc0Z0lDQWdhV1lnS0c5bVpuTmxkQ0FySURFZ1BDQnNaVzRwWEc0Z0lDQWdJQ0IyWVd3Z2ZEMGdZblZtVzI5bVpuTmxkQ0FySURGZElEdzhJRGhjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0IyWVd3Z1BTQmlkV1piYjJabWMyVjBYU0E4UENBNFhHNGdJQ0FnYVdZZ0tHOW1abk5sZENBcklERWdQQ0JzWlc0cFhHNGdJQ0FnSUNCMllXd2dmRDBnWW5WbVcyOW1abk5sZENBcklERmRYRzRnSUgxY2JpQWdjbVYwZFhKdUlIWmhiRnh1ZlZ4dVhHNUNkV1ptWlhJdWNISnZkRzkwZVhCbExuSmxZV1JWU1c1ME1UWk1SU0E5SUdaMWJtTjBhVzl1SUNodlptWnpaWFFzSUc1dlFYTnpaWEowS1NCN1hHNGdJSEpsZEhWeWJpQmZjbVZoWkZWSmJuUXhOaWgwYUdsekxDQnZabVp6WlhRc0lIUnlkV1VzSUc1dlFYTnpaWEowS1Z4dWZWeHVYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbkpsWVdSVlNXNTBNVFpDUlNBOUlHWjFibU4wYVc5dUlDaHZabVp6WlhRc0lHNXZRWE56WlhKMEtTQjdYRzRnSUhKbGRIVnliaUJmY21WaFpGVkpiblF4TmloMGFHbHpMQ0J2Wm1aelpYUXNJR1poYkhObExDQnViMEZ6YzJWeWRDbGNibjFjYmx4dVpuVnVZM1JwYjI0Z1gzSmxZV1JWU1c1ME16SWdLR0oxWml3Z2IyWm1jMlYwTENCc2FYUjBiR1ZGYm1ScFlXNHNJRzV2UVhOelpYSjBLU0I3WEc0Z0lHbG1JQ2doYm05QmMzTmxjblFwSUh0Y2JpQWdJQ0JoYzNObGNuUW9kSGx3Wlc5bUlHeHBkSFJzWlVWdVpHbGhiaUE5UFQwZ0oySnZiMnhsWVc0bkxDQW5iV2x6YzJsdVp5QnZjaUJwYm5aaGJHbGtJR1Z1WkdsaGJpY3BYRzRnSUNBZ1lYTnpaWEowS0c5bVpuTmxkQ0FoUFQwZ2RXNWtaV1pwYm1Wa0lDWW1JRzltWm5ObGRDQWhQVDBnYm5Wc2JDd2dKMjFwYzNOcGJtY2diMlptYzJWMEp5bGNiaUFnSUNCaGMzTmxjblFvYjJabWMyVjBJQ3NnTXlBOElHSjFaaTVzWlc1bmRHZ3NJQ2RVY25scGJtY2dkRzhnY21WaFpDQmlaWGx2Ym1RZ1luVm1abVZ5SUd4bGJtZDBhQ2NwWEc0Z0lIMWNibHh1SUNCMllYSWdiR1Z1SUQwZ1luVm1MbXhsYm1kMGFGeHVJQ0JwWmlBb2IyWm1jMlYwSUQ0OUlHeGxiaWxjYmlBZ0lDQnlaWFIxY201Y2JseHVJQ0IyWVhJZ2RtRnNYRzRnSUdsbUlDaHNhWFIwYkdWRmJtUnBZVzRwSUh0Y2JpQWdJQ0JwWmlBb2IyWm1jMlYwSUNzZ01pQThJR3hsYmlsY2JpQWdJQ0FnSUhaaGJDQTlJR0oxWmx0dlptWnpaWFFnS3lBeVhTQThQQ0F4Tmx4dUlDQWdJR2xtSUNodlptWnpaWFFnS3lBeElEd2diR1Z1S1Z4dUlDQWdJQ0FnZG1Gc0lIdzlJR0oxWmx0dlptWnpaWFFnS3lBeFhTQThQQ0E0WEc0Z0lDQWdkbUZzSUh3OUlHSjFabHR2Wm1aelpYUmRYRzRnSUNBZ2FXWWdLRzltWm5ObGRDQXJJRE1nUENCc1pXNHBYRzRnSUNBZ0lDQjJZV3dnUFNCMllXd2dLeUFvWW5WbVcyOW1abk5sZENBcklETmRJRHc4SURJMElENCtQaUF3S1Z4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUdsbUlDaHZabVp6WlhRZ0t5QXhJRHdnYkdWdUtWeHVJQ0FnSUNBZ2RtRnNJRDBnWW5WbVcyOW1abk5sZENBcklERmRJRHc4SURFMlhHNGdJQ0FnYVdZZ0tHOW1abk5sZENBcklESWdQQ0JzWlc0cFhHNGdJQ0FnSUNCMllXd2dmRDBnWW5WbVcyOW1abk5sZENBcklESmRJRHc4SURoY2JpQWdJQ0JwWmlBb2IyWm1jMlYwSUNzZ015QThJR3hsYmlsY2JpQWdJQ0FnSUhaaGJDQjhQU0JpZFdaYmIyWm1jMlYwSUNzZ00xMWNiaUFnSUNCMllXd2dQU0IyWVd3Z0t5QW9ZblZtVzI5bVpuTmxkRjBnUER3Z01qUWdQajQrSURBcFhHNGdJSDFjYmlBZ2NtVjBkWEp1SUhaaGJGeHVmVnh1WEc1Q2RXWm1aWEl1Y0hKdmRHOTBlWEJsTG5KbFlXUlZTVzUwTXpKTVJTQTlJR1oxYm1OMGFXOXVJQ2h2Wm1aelpYUXNJRzV2UVhOelpYSjBLU0I3WEc0Z0lISmxkSFZ5YmlCZmNtVmhaRlZKYm5Rek1paDBhR2x6TENCdlptWnpaWFFzSUhSeWRXVXNJRzV2UVhOelpYSjBLVnh1ZlZ4dVhHNUNkV1ptWlhJdWNISnZkRzkwZVhCbExuSmxZV1JWU1c1ME16SkNSU0E5SUdaMWJtTjBhVzl1SUNodlptWnpaWFFzSUc1dlFYTnpaWEowS1NCN1hHNGdJSEpsZEhWeWJpQmZjbVZoWkZWSmJuUXpNaWgwYUdsekxDQnZabVp6WlhRc0lHWmhiSE5sTENCdWIwRnpjMlZ5ZENsY2JuMWNibHh1UW5WbVptVnlMbkJ5YjNSdmRIbHdaUzV5WldGa1NXNTBPQ0E5SUdaMWJtTjBhVzl1SUNodlptWnpaWFFzSUc1dlFYTnpaWEowS1NCN1hHNGdJR2xtSUNnaGJtOUJjM05sY25RcElIdGNiaUFnSUNCaGMzTmxjblFvYjJabWMyVjBJQ0U5UFNCMWJtUmxabWx1WldRZ0ppWWdiMlptYzJWMElDRTlQU0J1ZFd4c0xGeHVJQ0FnSUNBZ0lDQW5iV2x6YzJsdVp5QnZabVp6WlhRbktWeHVJQ0FnSUdGemMyVnlkQ2h2Wm1aelpYUWdQQ0IwYUdsekxteGxibWQwYUN3Z0oxUnllV2x1WnlCMGJ5QnlaV0ZrSUdKbGVXOXVaQ0JpZFdabVpYSWdiR1Z1WjNSb0p5bGNiaUFnZlZ4dVhHNGdJR2xtSUNodlptWnpaWFFnUGowZ2RHaHBjeTVzWlc1bmRHZ3BYRzRnSUNBZ2NtVjBkWEp1WEc1Y2JpQWdkbUZ5SUc1bFp5QTlJSFJvYVhOYmIyWm1jMlYwWFNBbUlEQjRPREJjYmlBZ2FXWWdLRzVsWnlsY2JpQWdJQ0J5WlhSMWNtNGdLREI0Wm1ZZ0xTQjBhR2x6VzI5bVpuTmxkRjBnS3lBeEtTQXFJQzB4WEc0Z0lHVnNjMlZjYmlBZ0lDQnlaWFIxY200Z2RHaHBjMXR2Wm1aelpYUmRYRzU5WEc1Y2JtWjFibU4wYVc5dUlGOXlaV0ZrU1c1ME1UWWdLR0oxWml3Z2IyWm1jMlYwTENCc2FYUjBiR1ZGYm1ScFlXNHNJRzV2UVhOelpYSjBLU0I3WEc0Z0lHbG1JQ2doYm05QmMzTmxjblFwSUh0Y2JpQWdJQ0JoYzNObGNuUW9kSGx3Wlc5bUlHeHBkSFJzWlVWdVpHbGhiaUE5UFQwZ0oySnZiMnhsWVc0bkxDQW5iV2x6YzJsdVp5QnZjaUJwYm5aaGJHbGtJR1Z1WkdsaGJpY3BYRzRnSUNBZ1lYTnpaWEowS0c5bVpuTmxkQ0FoUFQwZ2RXNWtaV1pwYm1Wa0lDWW1JRzltWm5ObGRDQWhQVDBnYm5Wc2JDd2dKMjFwYzNOcGJtY2diMlptYzJWMEp5bGNiaUFnSUNCaGMzTmxjblFvYjJabWMyVjBJQ3NnTVNBOElHSjFaaTVzWlc1bmRHZ3NJQ2RVY25scGJtY2dkRzhnY21WaFpDQmlaWGx2Ym1RZ1luVm1abVZ5SUd4bGJtZDBhQ2NwWEc0Z0lIMWNibHh1SUNCMllYSWdiR1Z1SUQwZ1luVm1MbXhsYm1kMGFGeHVJQ0JwWmlBb2IyWm1jMlYwSUQ0OUlHeGxiaWxjYmlBZ0lDQnlaWFIxY201Y2JseHVJQ0IyWVhJZ2RtRnNJRDBnWDNKbFlXUlZTVzUwTVRZb1luVm1MQ0J2Wm1aelpYUXNJR3hwZEhSc1pVVnVaR2xoYml3Z2RISjFaU2xjYmlBZ2RtRnlJRzVsWnlBOUlIWmhiQ0FtSURCNE9EQXdNRnh1SUNCcFppQW9ibVZuS1Z4dUlDQWdJSEpsZEhWeWJpQW9NSGhtWm1abUlDMGdkbUZzSUNzZ01Ta2dLaUF0TVZ4dUlDQmxiSE5sWEc0Z0lDQWdjbVYwZFhKdUlIWmhiRnh1ZlZ4dVhHNUNkV1ptWlhJdWNISnZkRzkwZVhCbExuSmxZV1JKYm5ReE5reEZJRDBnWm5WdVkzUnBiMjRnS0c5bVpuTmxkQ3dnYm05QmMzTmxjblFwSUh0Y2JpQWdjbVYwZFhKdUlGOXlaV0ZrU1c1ME1UWW9kR2hwY3l3Z2IyWm1jMlYwTENCMGNuVmxMQ0J1YjBGemMyVnlkQ2xjYm4xY2JseHVRblZtWm1WeUxuQnliM1J2ZEhsd1pTNXlaV0ZrU1c1ME1UWkNSU0E5SUdaMWJtTjBhVzl1SUNodlptWnpaWFFzSUc1dlFYTnpaWEowS1NCN1hHNGdJSEpsZEhWeWJpQmZjbVZoWkVsdWRERTJLSFJvYVhNc0lHOW1abk5sZEN3Z1ptRnNjMlVzSUc1dlFYTnpaWEowS1Z4dWZWeHVYRzVtZFc1amRHbHZiaUJmY21WaFpFbHVkRE15SUNoaWRXWXNJRzltWm5ObGRDd2diR2wwZEd4bFJXNWthV0Z1TENCdWIwRnpjMlZ5ZENrZ2UxeHVJQ0JwWmlBb0lXNXZRWE56WlhKMEtTQjdYRzRnSUNBZ1lYTnpaWEowS0hSNWNHVnZaaUJzYVhSMGJHVkZibVJwWVc0Z1BUMDlJQ2RpYjI5c1pXRnVKeXdnSjIxcGMzTnBibWNnYjNJZ2FXNTJZV3hwWkNCbGJtUnBZVzRuS1Z4dUlDQWdJR0Z6YzJWeWRDaHZabVp6WlhRZ0lUMDlJSFZ1WkdWbWFXNWxaQ0FtSmlCdlptWnpaWFFnSVQwOUlHNTFiR3dzSUNkdGFYTnphVzVuSUc5bVpuTmxkQ2NwWEc0Z0lDQWdZWE56WlhKMEtHOW1abk5sZENBcklETWdQQ0JpZFdZdWJHVnVaM1JvTENBblZISjVhVzVuSUhSdklISmxZV1FnWW1WNWIyNWtJR0oxWm1abGNpQnNaVzVuZEdnbktWeHVJQ0I5WEc1Y2JpQWdkbUZ5SUd4bGJpQTlJR0oxWmk1c1pXNW5kR2hjYmlBZ2FXWWdLRzltWm5ObGRDQStQU0JzWlc0cFhHNGdJQ0FnY21WMGRYSnVYRzVjYmlBZ2RtRnlJSFpoYkNBOUlGOXlaV0ZrVlVsdWRETXlLR0oxWml3Z2IyWm1jMlYwTENCc2FYUjBiR1ZGYm1ScFlXNHNJSFJ5ZFdVcFhHNGdJSFpoY2lCdVpXY2dQU0IyWVd3Z0ppQXdlRGd3TURBd01EQXdYRzRnSUdsbUlDaHVaV2NwWEc0Z0lDQWdjbVYwZFhKdUlDZ3dlR1ptWm1abVptWm1JQzBnZG1Gc0lDc2dNU2tnS2lBdE1WeHVJQ0JsYkhObFhHNGdJQ0FnY21WMGRYSnVJSFpoYkZ4dWZWeHVYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbkpsWVdSSmJuUXpNa3hGSUQwZ1puVnVZM1JwYjI0Z0tHOW1abk5sZEN3Z2JtOUJjM05sY25RcElIdGNiaUFnY21WMGRYSnVJRjl5WldGa1NXNTBNeklvZEdocGN5d2diMlptYzJWMExDQjBjblZsTENCdWIwRnpjMlZ5ZENsY2JuMWNibHh1UW5WbVptVnlMbkJ5YjNSdmRIbHdaUzV5WldGa1NXNTBNekpDUlNBOUlHWjFibU4wYVc5dUlDaHZabVp6WlhRc0lHNXZRWE56WlhKMEtTQjdYRzRnSUhKbGRIVnliaUJmY21WaFpFbHVkRE15S0hSb2FYTXNJRzltWm5ObGRDd2dabUZzYzJVc0lHNXZRWE56WlhKMEtWeHVmVnh1WEc1bWRXNWpkR2x2YmlCZmNtVmhaRVpzYjJGMElDaGlkV1lzSUc5bVpuTmxkQ3dnYkdsMGRHeGxSVzVrYVdGdUxDQnViMEZ6YzJWeWRDa2dlMXh1SUNCcFppQW9JVzV2UVhOelpYSjBLU0I3WEc0Z0lDQWdZWE56WlhKMEtIUjVjR1Z2WmlCc2FYUjBiR1ZGYm1ScFlXNGdQVDA5SUNkaWIyOXNaV0Z1Snl3Z0oyMXBjM05wYm1jZ2IzSWdhVzUyWVd4cFpDQmxibVJwWVc0bktWeHVJQ0FnSUdGemMyVnlkQ2h2Wm1aelpYUWdLeUF6SUR3Z1luVm1MbXhsYm1kMGFDd2dKMVJ5ZVdsdVp5QjBieUJ5WldGa0lHSmxlVzl1WkNCaWRXWm1aWElnYkdWdVozUm9KeWxjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUJwWldWbE56VTBMbkpsWVdRb1luVm1MQ0J2Wm1aelpYUXNJR3hwZEhSc1pVVnVaR2xoYml3Z01qTXNJRFFwWEc1OVhHNWNia0oxWm1abGNpNXdjbTkwYjNSNWNHVXVjbVZoWkVac2IyRjBURVVnUFNCbWRXNWpkR2x2YmlBb2IyWm1jMlYwTENCdWIwRnpjMlZ5ZENrZ2UxeHVJQ0J5WlhSMWNtNGdYM0psWVdSR2JHOWhkQ2gwYUdsekxDQnZabVp6WlhRc0lIUnlkV1VzSUc1dlFYTnpaWEowS1Z4dWZWeHVYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbkpsWVdSR2JHOWhkRUpGSUQwZ1puVnVZM1JwYjI0Z0tHOW1abk5sZEN3Z2JtOUJjM05sY25RcElIdGNiaUFnY21WMGRYSnVJRjl5WldGa1JteHZZWFFvZEdocGN5d2diMlptYzJWMExDQm1ZV3h6WlN3Z2JtOUJjM05sY25RcFhHNTlYRzVjYm1aMWJtTjBhVzl1SUY5eVpXRmtSRzkxWW14bElDaGlkV1lzSUc5bVpuTmxkQ3dnYkdsMGRHeGxSVzVrYVdGdUxDQnViMEZ6YzJWeWRDa2dlMXh1SUNCcFppQW9JVzV2UVhOelpYSjBLU0I3WEc0Z0lDQWdZWE56WlhKMEtIUjVjR1Z2WmlCc2FYUjBiR1ZGYm1ScFlXNGdQVDA5SUNkaWIyOXNaV0Z1Snl3Z0oyMXBjM05wYm1jZ2IzSWdhVzUyWVd4cFpDQmxibVJwWVc0bktWeHVJQ0FnSUdGemMyVnlkQ2h2Wm1aelpYUWdLeUEzSUR3Z1luVm1MbXhsYm1kMGFDd2dKMVJ5ZVdsdVp5QjBieUJ5WldGa0lHSmxlVzl1WkNCaWRXWm1aWElnYkdWdVozUm9KeWxjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUJwWldWbE56VTBMbkpsWVdRb1luVm1MQ0J2Wm1aelpYUXNJR3hwZEhSc1pVVnVaR2xoYml3Z05USXNJRGdwWEc1OVhHNWNia0oxWm1abGNpNXdjbTkwYjNSNWNHVXVjbVZoWkVSdmRXSnNaVXhGSUQwZ1puVnVZM1JwYjI0Z0tHOW1abk5sZEN3Z2JtOUJjM05sY25RcElIdGNiaUFnY21WMGRYSnVJRjl5WldGa1JHOTFZbXhsS0hSb2FYTXNJRzltWm5ObGRDd2dkSEoxWlN3Z2JtOUJjM05sY25RcFhHNTlYRzVjYmtKMVptWmxjaTV3Y205MGIzUjVjR1V1Y21WaFpFUnZkV0pzWlVKRklEMGdablZ1WTNScGIyNGdLRzltWm5ObGRDd2dibTlCYzNObGNuUXBJSHRjYmlBZ2NtVjBkWEp1SUY5eVpXRmtSRzkxWW14bEtIUm9hWE1zSUc5bVpuTmxkQ3dnWm1Gc2MyVXNJRzV2UVhOelpYSjBLVnh1ZlZ4dVhHNUNkV1ptWlhJdWNISnZkRzkwZVhCbExuZHlhWFJsVlVsdWREZ2dQU0JtZFc1amRHbHZiaUFvZG1Gc2RXVXNJRzltWm5ObGRDd2dibTlCYzNObGNuUXBJSHRjYmlBZ2FXWWdLQ0Z1YjBGemMyVnlkQ2tnZTF4dUlDQWdJR0Z6YzJWeWRDaDJZV3gxWlNBaFBUMGdkVzVrWldacGJtVmtJQ1ltSUhaaGJIVmxJQ0U5UFNCdWRXeHNMQ0FuYldsemMybHVaeUIyWVd4MVpTY3BYRzRnSUNBZ1lYTnpaWEowS0c5bVpuTmxkQ0FoUFQwZ2RXNWtaV1pwYm1Wa0lDWW1JRzltWm5ObGRDQWhQVDBnYm5Wc2JDd2dKMjFwYzNOcGJtY2diMlptYzJWMEp5bGNiaUFnSUNCaGMzTmxjblFvYjJabWMyVjBJRHdnZEdocGN5NXNaVzVuZEdnc0lDZDBjbmxwYm1jZ2RHOGdkM0pwZEdVZ1ltVjViMjVrSUdKMVptWmxjaUJzWlc1bmRHZ25LVnh1SUNBZ0lIWmxjbWxtZFdsdWRDaDJZV3gxWlN3Z01IaG1aaWxjYmlBZ2ZWeHVYRzRnSUdsbUlDaHZabVp6WlhRZ1BqMGdkR2hwY3k1c1pXNW5kR2dwSUhKbGRIVnlibHh1WEc0Z0lIUm9hWE5iYjJabWMyVjBYU0E5SUhaaGJIVmxYRzU5WEc1Y2JtWjFibU4wYVc5dUlGOTNjbWwwWlZWSmJuUXhOaUFvWW5WbUxDQjJZV3gxWlN3Z2IyWm1jMlYwTENCc2FYUjBiR1ZGYm1ScFlXNHNJRzV2UVhOelpYSjBLU0I3WEc0Z0lHbG1JQ2doYm05QmMzTmxjblFwSUh0Y2JpQWdJQ0JoYzNObGNuUW9kbUZzZFdVZ0lUMDlJSFZ1WkdWbWFXNWxaQ0FtSmlCMllXeDFaU0FoUFQwZ2JuVnNiQ3dnSjIxcGMzTnBibWNnZG1Gc2RXVW5LVnh1SUNBZ0lHRnpjMlZ5ZENoMGVYQmxiMllnYkdsMGRHeGxSVzVrYVdGdUlEMDlQU0FuWW05dmJHVmhiaWNzSUNkdGFYTnphVzVuSUc5eUlHbHVkbUZzYVdRZ1pXNWthV0Z1SnlsY2JpQWdJQ0JoYzNObGNuUW9iMlptYzJWMElDRTlQU0IxYm1SbFptbHVaV1FnSmlZZ2IyWm1jMlYwSUNFOVBTQnVkV3hzTENBbmJXbHpjMmx1WnlCdlptWnpaWFFuS1Z4dUlDQWdJR0Z6YzJWeWRDaHZabVp6WlhRZ0t5QXhJRHdnWW5WbUxteGxibWQwYUN3Z0ozUnllV2x1WnlCMGJ5QjNjbWwwWlNCaVpYbHZibVFnWW5WbVptVnlJR3hsYm1kMGFDY3BYRzRnSUNBZ2RtVnlhV1oxYVc1MEtIWmhiSFZsTENBd2VHWm1abVlwWEc0Z0lIMWNibHh1SUNCMllYSWdiR1Z1SUQwZ1luVm1MbXhsYm1kMGFGeHVJQ0JwWmlBb2IyWm1jMlYwSUQ0OUlHeGxiaWxjYmlBZ0lDQnlaWFIxY201Y2JseHVJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Dd2dhaUE5SUUxaGRHZ3ViV2x1S0d4bGJpQXRJRzltWm5ObGRDd2dNaWs3SUdrZ1BDQnFPeUJwS3lzcElIdGNiaUFnSUNCaWRXWmJiMlptYzJWMElDc2dhVjBnUFZ4dUlDQWdJQ0FnSUNBb2RtRnNkV1VnSmlBb01IaG1aaUE4UENBb09DQXFJQ2hzYVhSMGJHVkZibVJwWVc0Z1B5QnBJRG9nTVNBdElHa3BLU2twSUQ0K1BseHVJQ0FnSUNBZ0lDQWdJQ0FnS0d4cGRIUnNaVVZ1WkdsaGJpQS9JR2tnT2lBeElDMGdhU2tnS2lBNFhHNGdJSDFjYm4xY2JseHVRblZtWm1WeUxuQnliM1J2ZEhsd1pTNTNjbWwwWlZWSmJuUXhOa3hGSUQwZ1puVnVZM1JwYjI0Z0tIWmhiSFZsTENCdlptWnpaWFFzSUc1dlFYTnpaWEowS1NCN1hHNGdJRjkzY21sMFpWVkpiblF4TmloMGFHbHpMQ0IyWVd4MVpTd2diMlptYzJWMExDQjBjblZsTENCdWIwRnpjMlZ5ZENsY2JuMWNibHh1UW5WbVptVnlMbkJ5YjNSdmRIbHdaUzUzY21sMFpWVkpiblF4TmtKRklEMGdablZ1WTNScGIyNGdLSFpoYkhWbExDQnZabVp6WlhRc0lHNXZRWE56WlhKMEtTQjdYRzRnSUY5M2NtbDBaVlZKYm5ReE5paDBhR2x6TENCMllXeDFaU3dnYjJabWMyVjBMQ0JtWVd4elpTd2dibTlCYzNObGNuUXBYRzU5WEc1Y2JtWjFibU4wYVc5dUlGOTNjbWwwWlZWSmJuUXpNaUFvWW5WbUxDQjJZV3gxWlN3Z2IyWm1jMlYwTENCc2FYUjBiR1ZGYm1ScFlXNHNJRzV2UVhOelpYSjBLU0I3WEc0Z0lHbG1JQ2doYm05QmMzTmxjblFwSUh0Y2JpQWdJQ0JoYzNObGNuUW9kbUZzZFdVZ0lUMDlJSFZ1WkdWbWFXNWxaQ0FtSmlCMllXeDFaU0FoUFQwZ2JuVnNiQ3dnSjIxcGMzTnBibWNnZG1Gc2RXVW5LVnh1SUNBZ0lHRnpjMlZ5ZENoMGVYQmxiMllnYkdsMGRHeGxSVzVrYVdGdUlEMDlQU0FuWW05dmJHVmhiaWNzSUNkdGFYTnphVzVuSUc5eUlHbHVkbUZzYVdRZ1pXNWthV0Z1SnlsY2JpQWdJQ0JoYzNObGNuUW9iMlptYzJWMElDRTlQU0IxYm1SbFptbHVaV1FnSmlZZ2IyWm1jMlYwSUNFOVBTQnVkV3hzTENBbmJXbHpjMmx1WnlCdlptWnpaWFFuS1Z4dUlDQWdJR0Z6YzJWeWRDaHZabVp6WlhRZ0t5QXpJRHdnWW5WbUxteGxibWQwYUN3Z0ozUnllV2x1WnlCMGJ5QjNjbWwwWlNCaVpYbHZibVFnWW5WbVptVnlJR3hsYm1kMGFDY3BYRzRnSUNBZ2RtVnlhV1oxYVc1MEtIWmhiSFZsTENBd2VHWm1abVptWm1abUtWeHVJQ0I5WEc1Y2JpQWdkbUZ5SUd4bGJpQTlJR0oxWmk1c1pXNW5kR2hjYmlBZ2FXWWdLRzltWm5ObGRDQStQU0JzWlc0cFhHNGdJQ0FnY21WMGRYSnVYRzVjYmlBZ1ptOXlJQ2gyWVhJZ2FTQTlJREFzSUdvZ1BTQk5ZWFJvTG0xcGJpaHNaVzRnTFNCdlptWnpaWFFzSURRcE95QnBJRHdnYWpzZ2FTc3JLU0I3WEc0Z0lDQWdZblZtVzI5bVpuTmxkQ0FySUdsZElEMWNiaUFnSUNBZ0lDQWdLSFpoYkhWbElENCtQaUFvYkdsMGRHeGxSVzVrYVdGdUlEOGdhU0E2SURNZ0xTQnBLU0FxSURncElDWWdNSGhtWmx4dUlDQjlYRzU5WEc1Y2JrSjFabVpsY2k1d2NtOTBiM1I1Y0dVdWQzSnBkR1ZWU1c1ME16Sk1SU0E5SUdaMWJtTjBhVzl1SUNoMllXeDFaU3dnYjJabWMyVjBMQ0J1YjBGemMyVnlkQ2tnZTF4dUlDQmZkM0pwZEdWVlNXNTBNeklvZEdocGN5d2dkbUZzZFdVc0lHOW1abk5sZEN3Z2RISjFaU3dnYm05QmMzTmxjblFwWEc1OVhHNWNia0oxWm1abGNpNXdjbTkwYjNSNWNHVXVkM0pwZEdWVlNXNTBNekpDUlNBOUlHWjFibU4wYVc5dUlDaDJZV3gxWlN3Z2IyWm1jMlYwTENCdWIwRnpjMlZ5ZENrZ2UxeHVJQ0JmZDNKcGRHVlZTVzUwTXpJb2RHaHBjeXdnZG1Gc2RXVXNJRzltWm5ObGRDd2dabUZzYzJVc0lHNXZRWE56WlhKMEtWeHVmVnh1WEc1Q2RXWm1aWEl1Y0hKdmRHOTBlWEJsTG5keWFYUmxTVzUwT0NBOUlHWjFibU4wYVc5dUlDaDJZV3gxWlN3Z2IyWm1jMlYwTENCdWIwRnpjMlZ5ZENrZ2UxeHVJQ0JwWmlBb0lXNXZRWE56WlhKMEtTQjdYRzRnSUNBZ1lYTnpaWEowS0haaGJIVmxJQ0U5UFNCMWJtUmxabWx1WldRZ0ppWWdkbUZzZFdVZ0lUMDlJRzUxYkd3c0lDZHRhWE56YVc1bklIWmhiSFZsSnlsY2JpQWdJQ0JoYzNObGNuUW9iMlptYzJWMElDRTlQU0IxYm1SbFptbHVaV1FnSmlZZ2IyWm1jMlYwSUNFOVBTQnVkV3hzTENBbmJXbHpjMmx1WnlCdlptWnpaWFFuS1Z4dUlDQWdJR0Z6YzJWeWRDaHZabVp6WlhRZ1BDQjBhR2x6TG14bGJtZDBhQ3dnSjFSeWVXbHVaeUIwYnlCM2NtbDBaU0JpWlhsdmJtUWdZblZtWm1WeUlHeGxibWQwYUNjcFhHNGdJQ0FnZG1WeWFXWnphVzUwS0haaGJIVmxMQ0F3ZURkbUxDQXRNSGc0TUNsY2JpQWdmVnh1WEc0Z0lHbG1JQ2h2Wm1aelpYUWdQajBnZEdocGN5NXNaVzVuZEdncFhHNGdJQ0FnY21WMGRYSnVYRzVjYmlBZ2FXWWdLSFpoYkhWbElENDlJREFwWEc0Z0lDQWdkR2hwY3k1M2NtbDBaVlZKYm5RNEtIWmhiSFZsTENCdlptWnpaWFFzSUc1dlFYTnpaWEowS1Z4dUlDQmxiSE5sWEc0Z0lDQWdkR2hwY3k1M2NtbDBaVlZKYm5RNEtEQjRabVlnS3lCMllXeDFaU0FySURFc0lHOW1abk5sZEN3Z2JtOUJjM05sY25RcFhHNTlYRzVjYm1aMWJtTjBhVzl1SUY5M2NtbDBaVWx1ZERFMklDaGlkV1lzSUhaaGJIVmxMQ0J2Wm1aelpYUXNJR3hwZEhSc1pVVnVaR2xoYml3Z2JtOUJjM05sY25RcElIdGNiaUFnYVdZZ0tDRnViMEZ6YzJWeWRDa2dlMXh1SUNBZ0lHRnpjMlZ5ZENoMllXeDFaU0FoUFQwZ2RXNWtaV1pwYm1Wa0lDWW1JSFpoYkhWbElDRTlQU0J1ZFd4c0xDQW5iV2x6YzJsdVp5QjJZV3gxWlNjcFhHNGdJQ0FnWVhOelpYSjBLSFI1Y0dWdlppQnNhWFIwYkdWRmJtUnBZVzRnUFQwOUlDZGliMjlzWldGdUp5d2dKMjFwYzNOcGJtY2diM0lnYVc1MllXeHBaQ0JsYm1ScFlXNG5LVnh1SUNBZ0lHRnpjMlZ5ZENodlptWnpaWFFnSVQwOUlIVnVaR1ZtYVc1bFpDQW1KaUJ2Wm1aelpYUWdJVDA5SUc1MWJHd3NJQ2R0YVhOemFXNW5JRzltWm5ObGRDY3BYRzRnSUNBZ1lYTnpaWEowS0c5bVpuTmxkQ0FySURFZ1BDQmlkV1l1YkdWdVozUm9MQ0FuVkhKNWFXNW5JSFJ2SUhkeWFYUmxJR0psZVc5dVpDQmlkV1ptWlhJZ2JHVnVaM1JvSnlsY2JpQWdJQ0IyWlhKcFpuTnBiblFvZG1Gc2RXVXNJREI0TjJabVppd2dMVEI0T0RBd01DbGNiaUFnZlZ4dVhHNGdJSFpoY2lCc1pXNGdQU0JpZFdZdWJHVnVaM1JvWEc0Z0lHbG1JQ2h2Wm1aelpYUWdQajBnYkdWdUtWeHVJQ0FnSUhKbGRIVnlibHh1WEc0Z0lHbG1JQ2gyWVd4MVpTQStQU0F3S1Z4dUlDQWdJRjkzY21sMFpWVkpiblF4TmloaWRXWXNJSFpoYkhWbExDQnZabVp6WlhRc0lHeHBkSFJzWlVWdVpHbGhiaXdnYm05QmMzTmxjblFwWEc0Z0lHVnNjMlZjYmlBZ0lDQmZkM0pwZEdWVlNXNTBNVFlvWW5WbUxDQXdlR1ptWm1ZZ0t5QjJZV3gxWlNBcklERXNJRzltWm5ObGRDd2diR2wwZEd4bFJXNWthV0Z1TENCdWIwRnpjMlZ5ZENsY2JuMWNibHh1UW5WbVptVnlMbkJ5YjNSdmRIbHdaUzUzY21sMFpVbHVkREUyVEVVZ1BTQm1kVzVqZEdsdmJpQW9kbUZzZFdVc0lHOW1abk5sZEN3Z2JtOUJjM05sY25RcElIdGNiaUFnWDNkeWFYUmxTVzUwTVRZb2RHaHBjeXdnZG1Gc2RXVXNJRzltWm5ObGRDd2dkSEoxWlN3Z2JtOUJjM05sY25RcFhHNTlYRzVjYmtKMVptWmxjaTV3Y205MGIzUjVjR1V1ZDNKcGRHVkpiblF4TmtKRklEMGdablZ1WTNScGIyNGdLSFpoYkhWbExDQnZabVp6WlhRc0lHNXZRWE56WlhKMEtTQjdYRzRnSUY5M2NtbDBaVWx1ZERFMktIUm9hWE1zSUhaaGJIVmxMQ0J2Wm1aelpYUXNJR1poYkhObExDQnViMEZ6YzJWeWRDbGNibjFjYmx4dVpuVnVZM1JwYjI0Z1gzZHlhWFJsU1c1ME16SWdLR0oxWml3Z2RtRnNkV1VzSUc5bVpuTmxkQ3dnYkdsMGRHeGxSVzVrYVdGdUxDQnViMEZ6YzJWeWRDa2dlMXh1SUNCcFppQW9JVzV2UVhOelpYSjBLU0I3WEc0Z0lDQWdZWE56WlhKMEtIWmhiSFZsSUNFOVBTQjFibVJsWm1sdVpXUWdKaVlnZG1Gc2RXVWdJVDA5SUc1MWJHd3NJQ2R0YVhOemFXNW5JSFpoYkhWbEp5bGNiaUFnSUNCaGMzTmxjblFvZEhsd1pXOW1JR3hwZEhSc1pVVnVaR2xoYmlBOVBUMGdKMkp2YjJ4bFlXNG5MQ0FuYldsemMybHVaeUJ2Y2lCcGJuWmhiR2xrSUdWdVpHbGhiaWNwWEc0Z0lDQWdZWE56WlhKMEtHOW1abk5sZENBaFBUMGdkVzVrWldacGJtVmtJQ1ltSUc5bVpuTmxkQ0FoUFQwZ2JuVnNiQ3dnSjIxcGMzTnBibWNnYjJabWMyVjBKeWxjYmlBZ0lDQmhjM05sY25Rb2IyWm1jMlYwSUNzZ015QThJR0oxWmk1c1pXNW5kR2dzSUNkVWNubHBibWNnZEc4Z2QzSnBkR1VnWW1WNWIyNWtJR0oxWm1abGNpQnNaVzVuZEdnbktWeHVJQ0FnSUhabGNtbG1jMmx1ZENoMllXeDFaU3dnTUhnM1ptWm1abVptWml3Z0xUQjRPREF3TURBd01EQXBYRzRnSUgxY2JseHVJQ0IyWVhJZ2JHVnVJRDBnWW5WbUxteGxibWQwYUZ4dUlDQnBaaUFvYjJabWMyVjBJRDQ5SUd4bGJpbGNiaUFnSUNCeVpYUjFjbTVjYmx4dUlDQnBaaUFvZG1Gc2RXVWdQajBnTUNsY2JpQWdJQ0JmZDNKcGRHVlZTVzUwTXpJb1luVm1MQ0IyWVd4MVpTd2diMlptYzJWMExDQnNhWFIwYkdWRmJtUnBZVzRzSUc1dlFYTnpaWEowS1Z4dUlDQmxiSE5sWEc0Z0lDQWdYM2R5YVhSbFZVbHVkRE15S0dKMVppd2dNSGhtWm1abVptWm1aaUFySUhaaGJIVmxJQ3NnTVN3Z2IyWm1jMlYwTENCc2FYUjBiR1ZGYm1ScFlXNHNJRzV2UVhOelpYSjBLVnh1ZlZ4dVhHNUNkV1ptWlhJdWNISnZkRzkwZVhCbExuZHlhWFJsU1c1ME16Sk1SU0E5SUdaMWJtTjBhVzl1SUNoMllXeDFaU3dnYjJabWMyVjBMQ0J1YjBGemMyVnlkQ2tnZTF4dUlDQmZkM0pwZEdWSmJuUXpNaWgwYUdsekxDQjJZV3gxWlN3Z2IyWm1jMlYwTENCMGNuVmxMQ0J1YjBGemMyVnlkQ2xjYm4xY2JseHVRblZtWm1WeUxuQnliM1J2ZEhsd1pTNTNjbWwwWlVsdWRETXlRa1VnUFNCbWRXNWpkR2x2YmlBb2RtRnNkV1VzSUc5bVpuTmxkQ3dnYm05QmMzTmxjblFwSUh0Y2JpQWdYM2R5YVhSbFNXNTBNeklvZEdocGN5d2dkbUZzZFdVc0lHOW1abk5sZEN3Z1ptRnNjMlVzSUc1dlFYTnpaWEowS1Z4dWZWeHVYRzVtZFc1amRHbHZiaUJmZDNKcGRHVkdiRzloZENBb1luVm1MQ0IyWVd4MVpTd2diMlptYzJWMExDQnNhWFIwYkdWRmJtUnBZVzRzSUc1dlFYTnpaWEowS1NCN1hHNGdJR2xtSUNnaGJtOUJjM05sY25RcElIdGNiaUFnSUNCaGMzTmxjblFvZG1Gc2RXVWdJVDA5SUhWdVpHVm1hVzVsWkNBbUppQjJZV3gxWlNBaFBUMGdiblZzYkN3Z0oyMXBjM05wYm1jZ2RtRnNkV1VuS1Z4dUlDQWdJR0Z6YzJWeWRDaDBlWEJsYjJZZ2JHbDBkR3hsUlc1a2FXRnVJRDA5UFNBblltOXZiR1ZoYmljc0lDZHRhWE56YVc1bklHOXlJR2x1ZG1Gc2FXUWdaVzVrYVdGdUp5bGNiaUFnSUNCaGMzTmxjblFvYjJabWMyVjBJQ0U5UFNCMWJtUmxabWx1WldRZ0ppWWdiMlptYzJWMElDRTlQU0J1ZFd4c0xDQW5iV2x6YzJsdVp5QnZabVp6WlhRbktWeHVJQ0FnSUdGemMyVnlkQ2h2Wm1aelpYUWdLeUF6SUR3Z1luVm1MbXhsYm1kMGFDd2dKMVJ5ZVdsdVp5QjBieUIzY21sMFpTQmlaWGx2Ym1RZ1luVm1abVZ5SUd4bGJtZDBhQ2NwWEc0Z0lDQWdkbVZ5YVdaSlJVVkZOelUwS0haaGJIVmxMQ0F6TGpRd01qZ3lNelEyTmpNNE5USTRPRFpsS3pNNExDQXRNeTQwTURJNE1qTTBOall6T0RVeU9EZzJaU3N6T0NsY2JpQWdmVnh1WEc0Z0lIWmhjaUJzWlc0Z1BTQmlkV1l1YkdWdVozUm9YRzRnSUdsbUlDaHZabVp6WlhRZ1BqMGdiR1Z1S1Z4dUlDQWdJSEpsZEhWeWJseHVYRzRnSUdsbFpXVTNOVFF1ZDNKcGRHVW9ZblZtTENCMllXeDFaU3dnYjJabWMyVjBMQ0JzYVhSMGJHVkZibVJwWVc0c0lESXpMQ0EwS1Z4dWZWeHVYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbmR5YVhSbFJteHZZWFJNUlNBOUlHWjFibU4wYVc5dUlDaDJZV3gxWlN3Z2IyWm1jMlYwTENCdWIwRnpjMlZ5ZENrZ2UxeHVJQ0JmZDNKcGRHVkdiRzloZENoMGFHbHpMQ0IyWVd4MVpTd2diMlptYzJWMExDQjBjblZsTENCdWIwRnpjMlZ5ZENsY2JuMWNibHh1UW5WbVptVnlMbkJ5YjNSdmRIbHdaUzUzY21sMFpVWnNiMkYwUWtVZ1BTQm1kVzVqZEdsdmJpQW9kbUZzZFdVc0lHOW1abk5sZEN3Z2JtOUJjM05sY25RcElIdGNiaUFnWDNkeWFYUmxSbXh2WVhRb2RHaHBjeXdnZG1Gc2RXVXNJRzltWm5ObGRDd2dabUZzYzJVc0lHNXZRWE56WlhKMEtWeHVmVnh1WEc1bWRXNWpkR2x2YmlCZmQzSnBkR1ZFYjNWaWJHVWdLR0oxWml3Z2RtRnNkV1VzSUc5bVpuTmxkQ3dnYkdsMGRHeGxSVzVrYVdGdUxDQnViMEZ6YzJWeWRDa2dlMXh1SUNCcFppQW9JVzV2UVhOelpYSjBLU0I3WEc0Z0lDQWdZWE56WlhKMEtIWmhiSFZsSUNFOVBTQjFibVJsWm1sdVpXUWdKaVlnZG1Gc2RXVWdJVDA5SUc1MWJHd3NJQ2R0YVhOemFXNW5JSFpoYkhWbEp5bGNiaUFnSUNCaGMzTmxjblFvZEhsd1pXOW1JR3hwZEhSc1pVVnVaR2xoYmlBOVBUMGdKMkp2YjJ4bFlXNG5MQ0FuYldsemMybHVaeUJ2Y2lCcGJuWmhiR2xrSUdWdVpHbGhiaWNwWEc0Z0lDQWdZWE56WlhKMEtHOW1abk5sZENBaFBUMGdkVzVrWldacGJtVmtJQ1ltSUc5bVpuTmxkQ0FoUFQwZ2JuVnNiQ3dnSjIxcGMzTnBibWNnYjJabWMyVjBKeWxjYmlBZ0lDQmhjM05sY25Rb2IyWm1jMlYwSUNzZ055QThJR0oxWmk1c1pXNW5kR2dzWEc0Z0lDQWdJQ0FnSUNkVWNubHBibWNnZEc4Z2QzSnBkR1VnWW1WNWIyNWtJR0oxWm1abGNpQnNaVzVuZEdnbktWeHVJQ0FnSUhabGNtbG1TVVZGUlRjMU5DaDJZV3gxWlN3Z01TNDNPVGMyT1RNeE16UTROakl6TVRVM1JTc3pNRGdzSUMweExqYzVOelk1TXpFek5EZzJNak14TlRkRkt6TXdPQ2xjYmlBZ2ZWeHVYRzRnSUhaaGNpQnNaVzRnUFNCaWRXWXViR1Z1WjNSb1hHNGdJR2xtSUNodlptWnpaWFFnUGowZ2JHVnVLVnh1SUNBZ0lISmxkSFZ5Ymx4dVhHNGdJR2xsWldVM05UUXVkM0pwZEdVb1luVm1MQ0IyWVd4MVpTd2diMlptYzJWMExDQnNhWFIwYkdWRmJtUnBZVzRzSURVeUxDQTRLVnh1ZlZ4dVhHNUNkV1ptWlhJdWNISnZkRzkwZVhCbExuZHlhWFJsUkc5MVlteGxURVVnUFNCbWRXNWpkR2x2YmlBb2RtRnNkV1VzSUc5bVpuTmxkQ3dnYm05QmMzTmxjblFwSUh0Y2JpQWdYM2R5YVhSbFJHOTFZbXhsS0hSb2FYTXNJSFpoYkhWbExDQnZabVp6WlhRc0lIUnlkV1VzSUc1dlFYTnpaWEowS1Z4dWZWeHVYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbmR5YVhSbFJHOTFZbXhsUWtVZ1BTQm1kVzVqZEdsdmJpQW9kbUZzZFdVc0lHOW1abk5sZEN3Z2JtOUJjM05sY25RcElIdGNiaUFnWDNkeWFYUmxSRzkxWW14bEtIUm9hWE1zSUhaaGJIVmxMQ0J2Wm1aelpYUXNJR1poYkhObExDQnViMEZ6YzJWeWRDbGNibjFjYmx4dUx5OGdabWxzYkNoMllXeDFaU3dnYzNSaGNuUTlNQ3dnWlc1a1BXSjFabVpsY2k1c1pXNW5kR2dwWEc1Q2RXWm1aWEl1Y0hKdmRHOTBlWEJsTG1acGJHd2dQU0JtZFc1amRHbHZiaUFvZG1Gc2RXVXNJSE4wWVhKMExDQmxibVFwSUh0Y2JpQWdhV1lnS0NGMllXeDFaU2tnZG1Gc2RXVWdQU0F3WEc0Z0lHbG1JQ2doYzNSaGNuUXBJSE4wWVhKMElEMGdNRnh1SUNCcFppQW9JV1Z1WkNrZ1pXNWtJRDBnZEdocGN5NXNaVzVuZEdoY2JseHVJQ0JwWmlBb2RIbHdaVzltSUhaaGJIVmxJRDA5UFNBbmMzUnlhVzVuSnlrZ2UxeHVJQ0FnSUhaaGJIVmxJRDBnZG1Gc2RXVXVZMmhoY2tOdlpHVkJkQ2d3S1Z4dUlDQjlYRzVjYmlBZ1lYTnpaWEowS0hSNWNHVnZaaUIyWVd4MVpTQTlQVDBnSjI1MWJXSmxjaWNnSmlZZ0lXbHpUbUZPS0haaGJIVmxLU3dnSjNaaGJIVmxJR2x6SUc1dmRDQmhJRzUxYldKbGNpY3BYRzRnSUdGemMyVnlkQ2hsYm1RZ1BqMGdjM1JoY25Rc0lDZGxibVFnUENCemRHRnlkQ2NwWEc1Y2JpQWdMeThnUm1sc2JDQXdJR0o1ZEdWek95QjNaU2R5WlNCa2IyNWxYRzRnSUdsbUlDaGxibVFnUFQwOUlITjBZWEowS1NCeVpYUjFjbTVjYmlBZ2FXWWdLSFJvYVhNdWJHVnVaM1JvSUQwOVBTQXdLU0J5WlhSMWNtNWNibHh1SUNCaGMzTmxjblFvYzNSaGNuUWdQajBnTUNBbUppQnpkR0Z5ZENBOElIUm9hWE11YkdWdVozUm9MQ0FuYzNSaGNuUWdiM1YwSUc5bUlHSnZkVzVrY3ljcFhHNGdJR0Z6YzJWeWRDaGxibVFnUGowZ01DQW1KaUJsYm1RZ1BEMGdkR2hwY3k1c1pXNW5kR2dzSUNkbGJtUWdiM1YwSUc5bUlHSnZkVzVrY3ljcFhHNWNiaUFnWm05eUlDaDJZWElnYVNBOUlITjBZWEowT3lCcElEd2daVzVrT3lCcEt5c3BJSHRjYmlBZ0lDQjBhR2x6VzJsZElEMGdkbUZzZFdWY2JpQWdmVnh1ZlZ4dVhHNUNkV1ptWlhJdWNISnZkRzkwZVhCbExtbHVjM0JsWTNRZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lIWmhjaUJ2ZFhRZ1BTQmJYVnh1SUNCMllYSWdiR1Z1SUQwZ2RHaHBjeTVzWlc1bmRHaGNiaUFnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCc1pXNDdJR2tyS3lrZ2UxeHVJQ0FnSUc5MWRGdHBYU0E5SUhSdlNHVjRLSFJvYVhOYmFWMHBYRzRnSUNBZ2FXWWdLR2tnUFQwOUlHVjRjRzl5ZEhNdVNVNVRVRVZEVkY5TlFWaGZRbGxVUlZNcElIdGNiaUFnSUNBZ0lHOTFkRnRwSUNzZ01WMGdQU0FuTGk0dUoxeHVJQ0FnSUNBZ1luSmxZV3RjYmlBZ0lDQjlYRzRnSUgxY2JpQWdjbVYwZFhKdUlDYzhRblZtWm1WeUlDY2dLeUJ2ZFhRdWFtOXBiaWduSUNjcElDc2dKejRuWEc1OVhHNWNiaThxS2x4dUlDb2dRM0psWVhSbGN5QmhJRzVsZHlCZ1FYSnlZWGxDZFdabVpYSmdJSGRwZEdnZ2RHaGxJQ3BqYjNCcFpXUXFJRzFsYlc5eWVTQnZaaUIwYUdVZ1luVm1abVZ5SUdsdWMzUmhibU5sTGx4dUlDb2dRV1JrWldRZ2FXNGdUbTlrWlNBd0xqRXlMaUJQYm14NUlHRjJZV2xzWVdKc1pTQnBiaUJpY205M2MyVnljeUIwYUdGMElITjFjSEJ2Y25RZ1FYSnlZWGxDZFdabVpYSXVYRzRnS2k5Y2JrSjFabVpsY2k1d2NtOTBiM1I1Y0dVdWRHOUJjbkpoZVVKMVptWmxjaUE5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnYVdZZ0tIUjVjR1Z2WmlCVmFXNTBPRUZ5Y21GNUlDRTlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0FnSUdsbUlDaENkV1ptWlhJdVgzVnpaVlI1Y0dWa1FYSnlZWGx6S1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnS0c1bGR5QkNkV1ptWlhJb2RHaHBjeWtwTG1KMVptWmxjbHh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCMllYSWdZblZtSUQwZ2JtVjNJRlZwYm5RNFFYSnlZWGtvZEdocGN5NXNaVzVuZEdncFhHNGdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdNQ3dnYkdWdUlEMGdZblZtTG14bGJtZDBhRHNnYVNBOElHeGxianNnYVNBclBTQXhLVnh1SUNBZ0lDQWdJQ0JpZFdaYmFWMGdQU0IwYUdselcybGRYRzRnSUNBZ0lDQnlaWFIxY200Z1luVm1MbUoxWm1abGNseHVJQ0FnSUgxY2JpQWdmU0JsYkhObElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjBKMVptWmxjaTUwYjBGeWNtRjVRblZtWm1WeUlHNXZkQ0J6ZFhCd2IzSjBaV1FnYVc0Z2RHaHBjeUJpY205M2MyVnlKeWxjYmlBZ2ZWeHVmVnh1WEc0dkx5QklSVXhRUlZJZ1JsVk9RMVJKVDA1VFhHNHZMeUE5UFQwOVBUMDlQVDA5UFQwOVBUMDlYRzVjYm1aMWJtTjBhVzl1SUhOMGNtbHVaM1J5YVcwZ0tITjBjaWtnZTF4dUlDQnBaaUFvYzNSeUxuUnlhVzBwSUhKbGRIVnliaUJ6ZEhJdWRISnBiU2dwWEc0Z0lISmxkSFZ5YmlCemRISXVjbVZ3YkdGalpTZ3ZYbHhjY3l0OFhGeHpLeVF2Wnl3Z0p5Y3BYRzU5WEc1Y2JuWmhjaUJDVUNBOUlFSjFabVpsY2k1d2NtOTBiM1I1Y0dWY2JseHVMeW9xWEc0Z0tpQkJkV2R0Wlc1MElHRWdWV2x1ZERoQmNuSmhlU0FxYVc1emRHRnVZMlVxSUNodWIzUWdkR2hsSUZWcGJuUTRRWEp5WVhrZ1kyeGhjM01oS1NCM2FYUm9JRUoxWm1abGNpQnRaWFJvYjJSelhHNGdLaTljYmtKMVptWmxjaTVmWVhWbmJXVnVkQ0E5SUdaMWJtTjBhVzl1SUNoaGNuSXBJSHRjYmlBZ1lYSnlMbDlwYzBKMVptWmxjaUE5SUhSeWRXVmNibHh1SUNBdkx5QnpZWFpsSUhKbFptVnlaVzVqWlNCMGJ5QnZjbWxuYVc1aGJDQlZhVzUwT0VGeWNtRjVJR2RsZEM5elpYUWdiV1YwYUc5a2N5QmlaV1p2Y21VZ2IzWmxjbmR5YVhScGJtZGNiaUFnWVhKeUxsOW5aWFFnUFNCaGNuSXVaMlYwWEc0Z0lHRnljaTVmYzJWMElEMGdZWEp5TG5ObGRGeHVYRzRnSUM4dklHUmxjSEpsWTJGMFpXUXNJSGRwYkd3Z1ltVWdjbVZ0YjNabFpDQnBiaUJ1YjJSbElEQXVNVE1yWEc0Z0lHRnljaTVuWlhRZ1BTQkNVQzVuWlhSY2JpQWdZWEp5TG5ObGRDQTlJRUpRTG5ObGRGeHVYRzRnSUdGeWNpNTNjbWwwWlNBOUlFSlFMbmR5YVhSbFhHNGdJR0Z5Y2k1MGIxTjBjbWx1WnlBOUlFSlFMblJ2VTNSeWFXNW5YRzRnSUdGeWNpNTBiMHh2WTJGc1pWTjBjbWx1WnlBOUlFSlFMblJ2VTNSeWFXNW5YRzRnSUdGeWNpNTBiMHBUVDA0Z1BTQkNVQzUwYjBwVFQwNWNiaUFnWVhKeUxtTnZjSGtnUFNCQ1VDNWpiM0I1WEc0Z0lHRnljaTV6YkdsalpTQTlJRUpRTG5Oc2FXTmxYRzRnSUdGeWNpNXlaV0ZrVlVsdWREZ2dQU0JDVUM1eVpXRmtWVWx1ZERoY2JpQWdZWEp5TG5KbFlXUlZTVzUwTVRaTVJTQTlJRUpRTG5KbFlXUlZTVzUwTVRaTVJWeHVJQ0JoY25JdWNtVmhaRlZKYm5ReE5rSkZJRDBnUWxBdWNtVmhaRlZKYm5ReE5rSkZYRzRnSUdGeWNpNXlaV0ZrVlVsdWRETXlURVVnUFNCQ1VDNXlaV0ZrVlVsdWRETXlURVZjYmlBZ1lYSnlMbkpsWVdSVlNXNTBNekpDUlNBOUlFSlFMbkpsWVdSVlNXNTBNekpDUlZ4dUlDQmhjbkl1Y21WaFpFbHVkRGdnUFNCQ1VDNXlaV0ZrU1c1ME9GeHVJQ0JoY25JdWNtVmhaRWx1ZERFMlRFVWdQU0JDVUM1eVpXRmtTVzUwTVRaTVJWeHVJQ0JoY25JdWNtVmhaRWx1ZERFMlFrVWdQU0JDVUM1eVpXRmtTVzUwTVRaQ1JWeHVJQ0JoY25JdWNtVmhaRWx1ZERNeVRFVWdQU0JDVUM1eVpXRmtTVzUwTXpKTVJWeHVJQ0JoY25JdWNtVmhaRWx1ZERNeVFrVWdQU0JDVUM1eVpXRmtTVzUwTXpKQ1JWeHVJQ0JoY25JdWNtVmhaRVpzYjJGMFRFVWdQU0JDVUM1eVpXRmtSbXh2WVhSTVJWeHVJQ0JoY25JdWNtVmhaRVpzYjJGMFFrVWdQU0JDVUM1eVpXRmtSbXh2WVhSQ1JWeHVJQ0JoY25JdWNtVmhaRVJ2ZFdKc1pVeEZJRDBnUWxBdWNtVmhaRVJ2ZFdKc1pVeEZYRzRnSUdGeWNpNXlaV0ZrUkc5MVlteGxRa1VnUFNCQ1VDNXlaV0ZrUkc5MVlteGxRa1ZjYmlBZ1lYSnlMbmR5YVhSbFZVbHVkRGdnUFNCQ1VDNTNjbWwwWlZWSmJuUTRYRzRnSUdGeWNpNTNjbWwwWlZWSmJuUXhOa3hGSUQwZ1FsQXVkM0pwZEdWVlNXNTBNVFpNUlZ4dUlDQmhjbkl1ZDNKcGRHVlZTVzUwTVRaQ1JTQTlJRUpRTG5keWFYUmxWVWx1ZERFMlFrVmNiaUFnWVhKeUxuZHlhWFJsVlVsdWRETXlURVVnUFNCQ1VDNTNjbWwwWlZWSmJuUXpNa3hGWEc0Z0lHRnljaTUzY21sMFpWVkpiblF6TWtKRklEMGdRbEF1ZDNKcGRHVlZTVzUwTXpKQ1JWeHVJQ0JoY25JdWQzSnBkR1ZKYm5RNElEMGdRbEF1ZDNKcGRHVkpiblE0WEc0Z0lHRnljaTUzY21sMFpVbHVkREUyVEVVZ1BTQkNVQzUzY21sMFpVbHVkREUyVEVWY2JpQWdZWEp5TG5keWFYUmxTVzUwTVRaQ1JTQTlJRUpRTG5keWFYUmxTVzUwTVRaQ1JWeHVJQ0JoY25JdWQzSnBkR1ZKYm5Rek1reEZJRDBnUWxBdWQzSnBkR1ZKYm5Rek1reEZYRzRnSUdGeWNpNTNjbWwwWlVsdWRETXlRa1VnUFNCQ1VDNTNjbWwwWlVsdWRETXlRa1ZjYmlBZ1lYSnlMbmR5YVhSbFJteHZZWFJNUlNBOUlFSlFMbmR5YVhSbFJteHZZWFJNUlZ4dUlDQmhjbkl1ZDNKcGRHVkdiRzloZEVKRklEMGdRbEF1ZDNKcGRHVkdiRzloZEVKRlhHNGdJR0Z5Y2k1M2NtbDBaVVJ2ZFdKc1pVeEZJRDBnUWxBdWQzSnBkR1ZFYjNWaWJHVk1SVnh1SUNCaGNuSXVkM0pwZEdWRWIzVmliR1ZDUlNBOUlFSlFMbmR5YVhSbFJHOTFZbXhsUWtWY2JpQWdZWEp5TG1acGJHd2dQU0JDVUM1bWFXeHNYRzRnSUdGeWNpNXBibk53WldOMElEMGdRbEF1YVc1emNHVmpkRnh1SUNCaGNuSXVkRzlCY25KaGVVSjFabVpsY2lBOUlFSlFMblJ2UVhKeVlYbENkV1ptWlhKY2JseHVJQ0J5WlhSMWNtNGdZWEp5WEc1OVhHNWNiaTh2SUhOc2FXTmxLSE4wWVhKMExDQmxibVFwWEc1bWRXNWpkR2x2YmlCamJHRnRjQ0FvYVc1a1pYZ3NJR3hsYml3Z1pHVm1ZWFZzZEZaaGJIVmxLU0I3WEc0Z0lHbG1JQ2gwZVhCbGIyWWdhVzVrWlhnZ0lUMDlJQ2R1ZFcxaVpYSW5LU0J5WlhSMWNtNGdaR1ZtWVhWc2RGWmhiSFZsWEc0Z0lHbHVaR1Y0SUQwZ2ZuNXBibVJsZURzZ0lDOHZJRU52WlhKalpTQjBieUJwYm5SbFoyVnlMbHh1SUNCcFppQW9hVzVrWlhnZ1BqMGdiR1Z1S1NCeVpYUjFjbTRnYkdWdVhHNGdJR2xtSUNocGJtUmxlQ0ErUFNBd0tTQnlaWFIxY200Z2FXNWtaWGhjYmlBZ2FXNWtaWGdnS3owZ2JHVnVYRzRnSUdsbUlDaHBibVJsZUNBK1BTQXdLU0J5WlhSMWNtNGdhVzVrWlhoY2JpQWdjbVYwZFhKdUlEQmNibjFjYmx4dVpuVnVZM1JwYjI0Z1kyOWxjbU5sSUNoc1pXNW5kR2dwSUh0Y2JpQWdMeThnUTI5bGNtTmxJR3hsYm1kMGFDQjBieUJoSUc1MWJXSmxjaUFvY0c5emMybGliSGtnVG1GT0tTd2djbTkxYm1RZ2RYQmNiaUFnTHk4Z2FXNGdZMkZ6WlNCcGRDZHpJR1p5WVdOMGFXOXVZV3dnS0dVdVp5NGdNVEl6TGpRMU5pa2dkR2hsYmlCa2J5QmhYRzRnSUM4dklHUnZkV0pzWlNCdVpXZGhkR1VnZEc4Z1kyOWxjbU5sSUdFZ1RtRk9JSFJ2SURBdUlFVmhjM2tzSUhKcFoyaDBQMXh1SUNCc1pXNW5kR2dnUFNCK2ZrMWhkR2d1WTJWcGJDZ3JiR1Z1WjNSb0tWeHVJQ0J5WlhSMWNtNGdiR1Z1WjNSb0lEd2dNQ0EvSURBZ09pQnNaVzVuZEdoY2JuMWNibHh1Wm5WdVkzUnBiMjRnYVhOQmNuSmhlU0FvYzNWaWFtVmpkQ2tnZTF4dUlDQnlaWFIxY200Z0tFRnljbUY1TG1selFYSnlZWGtnZkh3Z1puVnVZM1JwYjI0Z0tITjFZbXBsWTNRcElIdGNiaUFnSUNCeVpYUjFjbTRnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzUwYjFOMGNtbHVaeTVqWVd4c0tITjFZbXBsWTNRcElEMDlQU0FuVzI5aWFtVmpkQ0JCY25KaGVWMG5YRzRnSUgwcEtITjFZbXBsWTNRcFhHNTlYRzVjYm1aMWJtTjBhVzl1SUdselFYSnlZWGxwYzJnZ0tITjFZbXBsWTNRcElIdGNiaUFnY21WMGRYSnVJR2x6UVhKeVlYa29jM1ZpYW1WamRDa2dmSHdnUW5WbVptVnlMbWx6UW5WbVptVnlLSE4xWW1wbFkzUXBJSHg4WEc0Z0lDQWdJQ0J6ZFdKcVpXTjBJQ1ltSUhSNWNHVnZaaUJ6ZFdKcVpXTjBJRDA5UFNBbmIySnFaV04wSnlBbUpseHVJQ0FnSUNBZ2RIbHdaVzltSUhOMVltcGxZM1F1YkdWdVozUm9JRDA5UFNBbmJuVnRZbVZ5SjF4dWZWeHVYRzVtZFc1amRHbHZiaUIwYjBobGVDQW9iaWtnZTF4dUlDQnBaaUFvYmlBOElERTJLU0J5WlhSMWNtNGdKekFuSUNzZ2JpNTBiMU4wY21sdVp5Z3hOaWxjYmlBZ2NtVjBkWEp1SUc0dWRHOVRkSEpwYm1jb01UWXBYRzU5WEc1Y2JtWjFibU4wYVc5dUlIVjBaamhVYjBKNWRHVnpJQ2h6ZEhJcElIdGNiaUFnZG1GeUlHSjVkR1ZCY25KaGVTQTlJRnRkWEc0Z0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2djM1J5TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ2RtRnlJR0lnUFNCemRISXVZMmhoY2tOdlpHVkJkQ2hwS1Z4dUlDQWdJR2xtSUNoaUlEdzlJREI0TjBZcFhHNGdJQ0FnSUNCaWVYUmxRWEp5WVhrdWNIVnphQ2h6ZEhJdVkyaGhja052WkdWQmRDaHBLU2xjYmlBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUhaaGNpQnpkR0Z5ZENBOUlHbGNiaUFnSUNBZ0lHbG1JQ2hpSUQ0OUlEQjRSRGd3TUNBbUppQmlJRHc5SURCNFJFWkdSaWtnYVNzclhHNGdJQ0FnSUNCMllYSWdhQ0E5SUdWdVkyOWtaVlZTU1VOdmJYQnZibVZ1ZENoemRISXVjMnhwWTJVb2MzUmhjblFzSUdrck1Ta3BMbk4xWW5OMGNpZ3hLUzV6Y0d4cGRDZ25KU2NwWEc0Z0lDQWdJQ0JtYjNJZ0tIWmhjaUJxSUQwZ01Ec2dhaUE4SUdndWJHVnVaM1JvT3lCcUt5c3BYRzRnSUNBZ0lDQWdJR0o1ZEdWQmNuSmhlUzV3ZFhOb0tIQmhjbk5sU1c1MEtHaGJhbDBzSURFMktTbGNiaUFnSUNCOVhHNGdJSDFjYmlBZ2NtVjBkWEp1SUdKNWRHVkJjbkpoZVZ4dWZWeHVYRzVtZFc1amRHbHZiaUJoYzJOcGFWUnZRbmwwWlhNZ0tITjBjaWtnZTF4dUlDQjJZWElnWW5sMFpVRnljbUY1SUQwZ1cxMWNiaUFnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCemRISXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0F2THlCT2IyUmxKM01nWTI5a1pTQnpaV1Z0Y3lCMGJ5QmlaU0JrYjJsdVp5QjBhR2x6SUdGdVpDQnViM1FnSmlBd2VEZEdMaTVjYmlBZ0lDQmllWFJsUVhKeVlYa3VjSFZ6YUNoemRISXVZMmhoY2tOdlpHVkJkQ2hwS1NBbUlEQjRSa1lwWEc0Z0lIMWNiaUFnY21WMGRYSnVJR0o1ZEdWQmNuSmhlVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQjFkR1l4Tm14bFZHOUNlWFJsY3lBb2MzUnlLU0I3WEc0Z0lIWmhjaUJqTENCb2FTd2diRzljYmlBZ2RtRnlJR0o1ZEdWQmNuSmhlU0E5SUZ0ZFhHNGdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnYzNSeUxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdZeUE5SUhOMGNpNWphR0Z5UTI5a1pVRjBLR2twWEc0Z0lDQWdhR2tnUFNCaklENCtJRGhjYmlBZ0lDQnNieUE5SUdNZ0pTQXlOVFpjYmlBZ0lDQmllWFJsUVhKeVlYa3VjSFZ6YUNoc2J5bGNiaUFnSUNCaWVYUmxRWEp5WVhrdWNIVnphQ2hvYVNsY2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCaWVYUmxRWEp5WVhsY2JuMWNibHh1Wm5WdVkzUnBiMjRnWW1GelpUWTBWRzlDZVhSbGN5QW9jM1J5S1NCN1hHNGdJSEpsZEhWeWJpQmlZWE5sTmpRdWRHOUNlWFJsUVhKeVlYa29jM1J5S1Z4dWZWeHVYRzVtZFc1amRHbHZiaUJpYkdsMFFuVm1abVZ5SUNoemNtTXNJR1J6ZEN3Z2IyWm1jMlYwTENCc1pXNW5kR2dwSUh0Y2JpQWdkbUZ5SUhCdmMxeHVJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUd4bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ2FXWWdLQ2hwSUNzZ2IyWm1jMlYwSUQ0OUlHUnpkQzVzWlc1bmRHZ3BJSHg4SUNocElENDlJSE55WXk1c1pXNW5kR2dwS1Z4dUlDQWdJQ0FnWW5KbFlXdGNiaUFnSUNCa2MzUmJhU0FySUc5bVpuTmxkRjBnUFNCemNtTmJhVjFjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdhVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmtaV052WkdWVmRHWTRRMmhoY2lBb2MzUnlLU0I3WEc0Z0lIUnllU0I3WEc0Z0lDQWdjbVYwZFhKdUlHUmxZMjlrWlZWU1NVTnZiWEJ2Ym1WdWRDaHpkSElwWEc0Z0lIMGdZMkYwWTJnZ0tHVnljaWtnZTF4dUlDQWdJSEpsZEhWeWJpQlRkSEpwYm1jdVpuSnZiVU5vWVhKRGIyUmxLREI0UmtaR1JDa2dMeThnVlZSR0lEZ2dhVzUyWVd4cFpDQmphR0Z5WEc0Z0lIMWNibjFjYmx4dUx5cGNiaUFxSUZkbElHaGhkbVVnZEc4Z2JXRnJaU0J6ZFhKbElIUm9ZWFFnZEdobElIWmhiSFZsSUdseklHRWdkbUZzYVdRZ2FXNTBaV2RsY2k0Z1ZHaHBjeUJ0WldGdWN5QjBhR0YwSUdsMFhHNGdLaUJwY3lCdWIyNHRibVZuWVhScGRtVXVJRWwwSUdoaGN5QnVieUJtY21GamRHbHZibUZzSUdOdmJYQnZibVZ1ZENCaGJtUWdkR2hoZENCcGRDQmtiMlZ6SUc1dmRGeHVJQ29nWlhoalpXVmtJSFJvWlNCdFlYaHBiWFZ0SUdGc2JHOTNaV1FnZG1Gc2RXVXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlIWmxjbWxtZFdsdWRDQW9kbUZzZFdVc0lHMWhlQ2tnZTF4dUlDQmhjM05sY25Rb2RIbHdaVzltSUhaaGJIVmxJRDA5UFNBbmJuVnRZbVZ5Snl3Z0oyTmhibTV2ZENCM2NtbDBaU0JoSUc1dmJpMXVkVzFpWlhJZ1lYTWdZU0J1ZFcxaVpYSW5LVnh1SUNCaGMzTmxjblFvZG1Gc2RXVWdQajBnTUN3Z0ozTndaV05wWm1sbFpDQmhJRzVsWjJGMGFYWmxJSFpoYkhWbElHWnZjaUIzY21sMGFXNW5JR0Z1SUhWdWMybG5ibVZrSUhaaGJIVmxKeWxjYmlBZ1lYTnpaWEowS0haaGJIVmxJRHc5SUcxaGVDd2dKM1poYkhWbElHbHpJR3hoY21kbGNpQjBhR0Z1SUcxaGVHbHRkVzBnZG1Gc2RXVWdabTl5SUhSNWNHVW5LVnh1SUNCaGMzTmxjblFvVFdGMGFDNW1iRzl2Y2loMllXeDFaU2tnUFQwOUlIWmhiSFZsTENBbmRtRnNkV1VnYUdGeklHRWdabkpoWTNScGIyNWhiQ0JqYjIxd2IyNWxiblFuS1Z4dWZWeHVYRzVtZFc1amRHbHZiaUIyWlhKcFpuTnBiblFnS0haaGJIVmxMQ0J0WVhnc0lHMXBiaWtnZTF4dUlDQmhjM05sY25Rb2RIbHdaVzltSUhaaGJIVmxJRDA5UFNBbmJuVnRZbVZ5Snl3Z0oyTmhibTV2ZENCM2NtbDBaU0JoSUc1dmJpMXVkVzFpWlhJZ1lYTWdZU0J1ZFcxaVpYSW5LVnh1SUNCaGMzTmxjblFvZG1Gc2RXVWdQRDBnYldGNExDQW5kbUZzZFdVZ2JHRnlaMlZ5SUhSb1lXNGdiV0Y0YVcxMWJTQmhiR3h2ZDJWa0lIWmhiSFZsSnlsY2JpQWdZWE56WlhKMEtIWmhiSFZsSUQ0OUlHMXBiaXdnSjNaaGJIVmxJSE50WVd4c1pYSWdkR2hoYmlCdGFXNXBiWFZ0SUdGc2JHOTNaV1FnZG1Gc2RXVW5LVnh1SUNCaGMzTmxjblFvVFdGMGFDNW1iRzl2Y2loMllXeDFaU2tnUFQwOUlIWmhiSFZsTENBbmRtRnNkV1VnYUdGeklHRWdabkpoWTNScGIyNWhiQ0JqYjIxd2IyNWxiblFuS1Z4dWZWeHVYRzVtZFc1amRHbHZiaUIyWlhKcFprbEZSVVUzTlRRZ0tIWmhiSFZsTENCdFlYZ3NJRzFwYmlrZ2UxeHVJQ0JoYzNObGNuUW9kSGx3Wlc5bUlIWmhiSFZsSUQwOVBTQW5iblZ0WW1WeUp5d2dKMk5oYm01dmRDQjNjbWwwWlNCaElHNXZiaTF1ZFcxaVpYSWdZWE1nWVNCdWRXMWlaWEluS1Z4dUlDQmhjM05sY25Rb2RtRnNkV1VnUEQwZ2JXRjRMQ0FuZG1Gc2RXVWdiR0Z5WjJWeUlIUm9ZVzRnYldGNGFXMTFiU0JoYkd4dmQyVmtJSFpoYkhWbEp5bGNiaUFnWVhOelpYSjBLSFpoYkhWbElENDlJRzFwYml3Z0ozWmhiSFZsSUhOdFlXeHNaWElnZEdoaGJpQnRhVzVwYlhWdElHRnNiRzkzWldRZ2RtRnNkV1VuS1Z4dWZWeHVYRzVtZFc1amRHbHZiaUJoYzNObGNuUWdLSFJsYzNRc0lHMWxjM05oWjJVcElIdGNiaUFnYVdZZ0tDRjBaWE4wS1NCMGFISnZkeUJ1WlhjZ1JYSnliM0lvYldWemMyRm5aU0I4ZkNBblJtRnBiR1ZrSUdGemMyVnlkR2x2YmljcFhHNTlYRzRpWFgwPVxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJlL1UrOTdcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi8uLlxcXFwuLlxcXFxub2RlX21vZHVsZXNcXFxcYnVmZmVyXFxcXGluZGV4LmpzXCIsXCIvLi5cXFxcLi5cXFxcbm9kZV9tb2R1bGVzXFxcXGJ1ZmZlclwiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbTtcbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDE7XG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxO1xuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDE7XG4gIHZhciBuQml0cyA9IC03O1xuICB2YXIgaSA9IGlzTEUgPyBuQnl0ZXMgLSAxIDogMDtcbiAgdmFyIGQgPSBpc0xFID8gLTEgOiAxO1xuICB2YXIgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXTtcblxuICBpICs9IGQ7XG5cbiAgZSA9IHMgJiAoMSA8PCAtbkJpdHMpIC0gMTtcbiAgcyA+Pj0gLW5CaXRzO1xuICBuQml0cyArPSBlTGVuO1xuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gZSAqIDI1NiArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIG0gPSBlICYgKDEgPDwgLW5CaXRzKSAtIDE7XG4gIGUgPj49IC1uQml0cztcbiAgbkJpdHMgKz0gbUxlbjtcbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IG0gKiAyNTYgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXM7XG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKHMgPyAtMSA6IDEpICogSW5maW5pdHk7XG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKTtcbiAgICBlID0gZSAtIGVCaWFzO1xuICB9XG4gIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pO1xufTtcblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgYztcbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDE7XG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxO1xuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDE7XG4gIHZhciBydCA9IG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwO1xuICB2YXIgaSA9IGlzTEUgPyAwIDogbkJ5dGVzIC0gMTtcbiAgdmFyIGQgPSBpc0xFID8gMSA6IC0xO1xuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCB2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwID8gMSA6IDA7XG5cbiAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSk7XG5cbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDA7XG4gICAgZSA9IGVNYXg7XG4gIH0gZWxzZSB7XG4gICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpO1xuICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLTtcbiAgICAgIGMgKj0gMjtcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKTtcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKys7XG4gICAgICBjIC89IDI7XG4gICAgfVxuXG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMDtcbiAgICAgIGUgPSBlTWF4O1xuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAodmFsdWUgKiBjIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKTtcbiAgICAgIGUgPSBlICsgZUJpYXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKTtcbiAgICAgIGUgPSAwO1xuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IGUgPDwgbUxlbiB8IG07XG4gIGVMZW4gKz0gbUxlbjtcbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyODtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbWx1WkdWNExtcHpJbDBzSW01aGJXVnpJanBiSW1WNGNHOXlkSE1pTENKeVpXRmtJaXdpWW5WbVptVnlJaXdpYjJabWMyVjBJaXdpYVhOTVJTSXNJbTFNWlc0aUxDSnVRbmwwWlhNaUxDSmxJaXdpYlNJc0ltVk1aVzRpTENKbFRXRjRJaXdpWlVKcFlYTWlMQ0p1UW1sMGN5SXNJbWtpTENKa0lpd2ljeUlzSWs1aFRpSXNJa2x1Wm1sdWFYUjVJaXdpVFdGMGFDSXNJbkJ2ZHlJc0luZHlhWFJsSWl3aWRtRnNkV1VpTENKaklpd2ljblFpTENKaFluTWlMQ0pwYzA1aFRpSXNJbVpzYjI5eUlpd2liRzluSWl3aVRFNHlJbDBzSW0xaGNIQnBibWR6SWpvaU96dEJRVUZCUVN4UlFVRlJReXhKUVVGU0xFZEJRV1VzVlVGQlZVTXNUVUZCVml4RlFVRnJRa01zVFVGQmJFSXNSVUZCTUVKRExFbEJRVEZDTEVWQlFXZERReXhKUVVGb1F5eEZRVUZ6UTBNc1RVRkJkRU1zUlVGQk9FTTdRVUZETTBRc1RVRkJTVU1zUTBGQlNpeEZRVUZQUXl4RFFVRlFPMEZCUTBFc1RVRkJTVU1zVDBGQlQwZ3NVMEZCVXl4RFFVRlVMRWRCUVdGRUxFbEJRV0lzUjBGQmIwSXNRMEZCTDBJN1FVRkRRU3hOUVVGSlN5eFBRVUZQTEVOQlFVTXNTMEZCUzBRc1NVRkJUaXhKUVVGakxFTkJRWHBDTzBGQlEwRXNUVUZCU1VVc1VVRkJVVVFzVVVGQlVTeERRVUZ3UWp0QlFVTkJMRTFCUVVsRkxGRkJRVkVzUTBGQlF5eERRVUZpTzBGQlEwRXNUVUZCU1VNc1NVRkJTVlFzVDBGQlVVVXNVMEZCVXl4RFFVRnFRaXhIUVVGelFpeERRVUU1UWp0QlFVTkJMRTFCUVVsUkxFbEJRVWxXTEU5QlFVOHNRMEZCUXl4RFFVRlNMRWRCUVZrc1EwRkJjRUk3UVVGRFFTeE5RVUZKVnl4SlFVRkpZaXhQUVVGUFF5eFRRVUZUVlN4RFFVRm9RaXhEUVVGU096dEJRVVZCUVN4UFFVRkxReXhEUVVGTU96dEJRVVZCVUN4TlFVRkpVU3hKUVVGTExFTkJRVU1zUzBGQlRTeERRVUZEU0N4TFFVRlNMRWxCUVd0Q0xFTkJRVE5DTzBGQlEwRkhMRkZCUVU4c1EwRkJRMGdzUzBGQlVqdEJRVU5CUVN4WFFVRlRTQ3hKUVVGVU8wRkJRMEVzVTBGQlQwY3NVVUZCVVN4RFFVRm1MRVZCUVd0Q1RDeEpRVUZKUVN4SlFVRkpMRWRCUVVvc1IwRkJWVXdzVDBGQlQwTXNVMEZCVTFVc1EwRkJhRUlzUTBGQlpDeEZRVUZyUTBFc1MwRkJTME1zUTBGQmRrTXNSVUZCTUVOR0xGTkJRVk1zUTBGQmNrVXNSVUZCZDBVc1EwRkJSVHM3UVVGRk1VVktMRTFCUVVsRUxFbEJRVXNzUTBGQlF5eExRVUZOTEVOQlFVTkxMRXRCUVZJc1NVRkJhMElzUTBGQk0wSTdRVUZEUVV3c1VVRkJUeXhEUVVGRFN5eExRVUZTTzBGQlEwRkJMRmRCUVZOUUxFbEJRVlE3UVVGRFFTeFRRVUZQVHl4UlFVRlJMRU5CUVdZc1JVRkJhMEpLTEVsQlFVbEJMRWxCUVVrc1IwRkJTaXhIUVVGVlRpeFBRVUZQUXl4VFFVRlRWU3hEUVVGb1FpeERRVUZrTEVWQlFXdERRU3hMUVVGTFF5eERRVUYyUXl4RlFVRXdRMFlzVTBGQlV5eERRVUZ5UlN4RlFVRjNSU3hEUVVGRk96dEJRVVV4UlN4TlFVRkpUQ3hOUVVGTkxFTkJRVllzUlVGQllUdEJRVU5ZUVN4UlFVRkpMRWxCUVVsSkxFdEJRVkk3UVVGRFJDeEhRVVpFTEUxQlJVOHNTVUZCU1Vvc1RVRkJUVWNzU1VGQlZpeEZRVUZuUWp0QlFVTnlRaXhYUVVGUFJpeEpRVUZKVVN4SFFVRktMRWRCUVZjc1EwRkJRMFFzU1VGQlNTeERRVUZETEVOQlFVd3NSMEZCVXl4RFFVRldMRWxCUVdWRkxGRkJRV3BETzBGQlEwUXNSMEZHVFN4TlFVVkJPMEZCUTB4VUxGRkJRVWxCTEVsQlFVbFZMRXRCUVV0RExFZEJRVXdzUTBGQlV5eERRVUZVTEVWQlFWbGtMRWxCUVZvc1EwRkJVanRCUVVOQlJTeFJRVUZKUVN4SlFVRkpTU3hMUVVGU08wRkJRMFE3UVVGRFJDeFRRVUZQTEVOQlFVTkpMRWxCUVVrc1EwRkJReXhEUVVGTUxFZEJRVk1zUTBGQlZpeEpRVUZsVUN4RFFVRm1MRWRCUVcxQ1ZTeExRVUZMUXl4SFFVRk1MRU5CUVZNc1EwRkJWQ3hGUVVGWldpeEpRVUZKUml4SlFVRm9RaXhEUVVFeFFqdEJRVU5FTEVOQkwwSkVPenRCUVdsRFFVd3NVVUZCVVc5Q0xFdEJRVklzUjBGQlowSXNWVUZCVld4Q0xFMUJRVllzUlVGQmEwSnRRaXhMUVVGc1FpeEZRVUY1UW14Q0xFMUJRWHBDTEVWQlFXbERReXhKUVVGcVF5eEZRVUYxUTBNc1NVRkJka01zUlVGQk5rTkRMRTFCUVRkRExFVkJRWEZFTzBGQlEyNUZMRTFCUVVsRExFTkJRVW9zUlVGQlQwTXNRMEZCVUN4RlFVRlZZeXhEUVVGV08wRkJRMEVzVFVGQlNXSXNUMEZCVDBnc1UwRkJVeXhEUVVGVUxFZEJRV0ZFTEVsQlFXSXNSMEZCYjBJc1EwRkJMMEk3UVVGRFFTeE5RVUZKU3l4UFFVRlBMRU5CUVVNc1MwRkJTMFFzU1VGQlRpeEpRVUZqTEVOQlFYcENPMEZCUTBFc1RVRkJTVVVzVVVGQlVVUXNVVUZCVVN4RFFVRndRanRCUVVOQkxFMUJRVWxoTEV0QlFVMXNRaXhUUVVGVExFVkJRVlFzUjBGQlkyRXNTMEZCUzBNc1IwRkJUQ3hEUVVGVExFTkJRVlFzUlVGQldTeERRVUZETEVWQlFXSXNTVUZCYlVKRUxFdEJRVXRETEVkQlFVd3NRMEZCVXl4RFFVRlVMRVZCUVZrc1EwRkJReXhGUVVGaUxFTkJRV3BETEVkQlFXOUVMRU5CUVRsRU8wRkJRMEVzVFVGQlNVNHNTVUZCU1ZRc1QwRkJUeXhEUVVGUUxFZEJRVmxGTEZOQlFWTXNRMEZCTjBJN1FVRkRRU3hOUVVGSlVTeEpRVUZKVml4UFFVRlBMRU5CUVZBc1IwRkJWeXhEUVVGRExFTkJRWEJDTzBGQlEwRXNUVUZCU1Zjc1NVRkJTVTBzVVVGQlVTeERRVUZTTEVsQlFXTkJMRlZCUVZVc1EwRkJWaXhKUVVGbExFbEJRVWxCTEV0QlFVb3NSMEZCV1N4RFFVRjZReXhIUVVFNFF5eERRVUU1UXl4SFFVRnJSQ3hEUVVFeFJEczdRVUZGUVVFc1ZVRkJVVWdzUzBGQlMwMHNSMEZCVEN4RFFVRlRTQ3hMUVVGVUxFTkJRVkk3TzBGQlJVRXNUVUZCU1Vrc1RVRkJUVW9zUzBGQlRpeExRVUZuUWtFc1ZVRkJWVW9zVVVGQk9VSXNSVUZCZDBNN1FVRkRkRU5VTEZGQlFVbHBRaXhOUVVGTlNpeExRVUZPTEVsQlFXVXNRMEZCWml4SFFVRnRRaXhEUVVGMlFqdEJRVU5CWkN4UlFVRkpSeXhKUVVGS08wRkJRMFFzUjBGSVJDeE5RVWRQTzBGQlEweElMRkZCUVVsWExFdEJRVXRSTEV0QlFVd3NRMEZCVjFJc1MwRkJTMU1zUjBGQlRDeERRVUZUVGl4TFFVRlVMRWxCUVd0Q1NDeExRVUZMVlN4SFFVRnNReXhEUVVGS08wRkJRMEVzVVVGQlNWQXNVMEZCVTBNc1NVRkJTVW9zUzBGQlMwTXNSMEZCVEN4RFFVRlRMRU5CUVZRc1JVRkJXU3hEUVVGRFdpeERRVUZpTEVOQlFXSXNTVUZCWjBNc1EwRkJjRU1zUlVGQmRVTTdRVUZEY2tOQk8wRkJRMEZsTEZkQlFVc3NRMEZCVER0QlFVTkVPMEZCUTBRc1VVRkJTV1lzU1VGQlNVa3NTMEZCU2l4SlFVRmhMRU5CUVdwQ0xFVkJRVzlDTzBGQlEyeENWU3hsUVVGVFJTeExRVUZMUkN4RFFVRmtPMEZCUTBRc1MwRkdSQ3hOUVVWUE8wRkJRMHhFTEdWQlFWTkZMRXRCUVV0TUxFdEJRVXRETEVkQlFVd3NRMEZCVXl4RFFVRlVMRVZCUVZrc1NVRkJTVklzUzBGQmFFSXNRMEZCWkR0QlFVTkVPMEZCUTBRc1VVRkJTVlVzVVVGQlVVTXNRMEZCVWl4SlFVRmhMRU5CUVdwQ0xFVkJRVzlDTzBGQlEyeENaanRCUVVOQlpTeFhRVUZMTEVOQlFVdzdRVUZEUkRzN1FVRkZSQ3hSUVVGSlppeEpRVUZKU1N4TFFVRktMRWxCUVdGRUxFbEJRV3BDTEVWQlFYVkNPMEZCUTNKQ1JpeFZRVUZKTEVOQlFVbzdRVUZEUVVRc1ZVRkJTVWNzU1VGQlNqdEJRVU5FTEV0QlNFUXNUVUZIVHl4SlFVRkpTQ3hKUVVGSlNTeExRVUZLTEVsQlFXRXNRMEZCYWtJc1JVRkJiMEk3UVVGRGVrSklMRlZCUVVrc1EwRkJRMkVzVVVGQlVVTXNRMEZCVWl4SFFVRlpMRU5CUVdJc1NVRkJhMEpLTEV0QlFVdERMRWRCUVV3c1EwRkJVeXhEUVVGVUxFVkJRVmxrTEVsQlFWb3NRMEZCZEVJN1FVRkRRVVVzVlVGQlNVRXNTVUZCU1Vrc1MwRkJVanRCUVVORUxFdEJTRTBzVFVGSFFUdEJRVU5NU0N4VlFVRkpZU3hSUVVGUlNDeExRVUZMUXl4SFFVRk1MRU5CUVZNc1EwRkJWQ3hGUVVGWlVpeFJRVUZSTEVOQlFYQkNMRU5CUVZJc1IwRkJhVU5QTEV0QlFVdERMRWRCUVV3c1EwRkJVeXhEUVVGVUxFVkJRVmxrTEVsQlFWb3NRMEZCY2tNN1FVRkRRVVVzVlVGQlNTeERRVUZLTzBGQlEwUTdRVUZEUmpzN1FVRkZSQ3hUUVVGUFJpeFJRVUZSTEVOQlFXWXNSVUZCYTBKSUxFOUJRVTlETEZOQlFWTlZMRU5CUVdoQ0xFbEJRWEZDVEN4SlFVRkpMRWxCUVhwQ0xFVkJRU3RDU3l4TFFVRkxReXhEUVVGd1F5eEZRVUYxUTA0c1MwRkJTeXhIUVVFMVF5eEZRVUZwUkVnc1VVRkJVU3hEUVVFelJTeEZRVUU0UlN4RFFVRkZPenRCUVVWb1JrVXNUVUZCUzBFc1MwRkJTMFlzU1VGQlRpeEhRVUZqUnl4RFFVRnNRanRCUVVOQlF5eFZRVUZSU2l4SlFVRlNPMEZCUTBFc1UwRkJUMGtzVDBGQlR5eERRVUZrTEVWQlFXbENVQ3hQUVVGUFF5eFRRVUZUVlN4RFFVRm9RaXhKUVVGeFFrNHNTVUZCU1N4SlFVRjZRaXhGUVVFclFrMHNTMEZCUzBNc1EwRkJjRU1zUlVGQmRVTlFMRXRCUVVzc1IwRkJOVU1zUlVGQmFVUkZMRkZCUVZFc1EwRkJNVVVzUlVGQk5rVXNRMEZCUlRzN1FVRkZMMFZRTEZOQlFVOURMRk5CUVZOVkxFTkJRVlFzUjBGQllVTXNRMEZCY0VJc1MwRkJNRUpETEVsQlFVa3NSMEZCT1VJN1FVRkRSQ3hEUVd4RVJDSXNJbVpwYkdVaU9pSnBibVJsZUM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbVY0Y0c5eWRITXVjbVZoWkNBOUlHWjFibU4wYVc5dUlDaGlkV1ptWlhJc0lHOW1abk5sZEN3Z2FYTk1SU3dnYlV4bGJpd2dia0o1ZEdWektTQjdYRzRnSUhaaGNpQmxMQ0J0WEc0Z0lIWmhjaUJsVEdWdUlEMGdia0o1ZEdWeklDb2dPQ0F0SUcxTVpXNGdMU0F4WEc0Z0lIWmhjaUJsVFdGNElEMGdLREVnUER3Z1pVeGxiaWtnTFNBeFhHNGdJSFpoY2lCbFFtbGhjeUE5SUdWTllYZ2dQajRnTVZ4dUlDQjJZWElnYmtKcGRITWdQU0F0TjF4dUlDQjJZWElnYVNBOUlHbHpURVVnUHlBb2JrSjVkR1Z6SUMwZ01Ta2dPaUF3WEc0Z0lIWmhjaUJrSUQwZ2FYTk1SU0EvSUMweElEb2dNVnh1SUNCMllYSWdjeUE5SUdKMVptWmxjbHR2Wm1aelpYUWdLeUJwWFZ4dVhHNGdJR2tnS3owZ1pGeHVYRzRnSUdVZ1BTQnpJQ1lnS0NneElEdzhJQ2d0YmtKcGRITXBLU0F0SURFcFhHNGdJSE1nUGo0OUlDZ3Ria0pwZEhNcFhHNGdJRzVDYVhSeklDczlJR1ZNWlc1Y2JpQWdabTl5SUNnN0lHNUNhWFJ6SUQ0Z01Ec2daU0E5SUdVZ0tpQXlOVFlnS3lCaWRXWm1aWEpiYjJabWMyVjBJQ3NnYVYwc0lHa2dLejBnWkN3Z2JrSnBkSE1nTFQwZ09Da2dlMzFjYmx4dUlDQnRJRDBnWlNBbUlDZ29NU0E4UENBb0xXNUNhWFJ6S1NrZ0xTQXhLVnh1SUNCbElENCtQU0FvTFc1Q2FYUnpLVnh1SUNCdVFtbDBjeUFyUFNCdFRHVnVYRzRnSUdadmNpQW9PeUJ1UW1sMGN5QStJREE3SUcwZ1BTQnRJQ29nTWpVMklDc2dZblZtWm1WeVcyOW1abk5sZENBcklHbGRMQ0JwSUNzOUlHUXNJRzVDYVhSeklDMDlJRGdwSUh0OVhHNWNiaUFnYVdZZ0tHVWdQVDA5SURBcElIdGNiaUFnSUNCbElEMGdNU0F0SUdWQ2FXRnpYRzRnSUgwZ1pXeHpaU0JwWmlBb1pTQTlQVDBnWlUxaGVDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCdElEOGdUbUZPSURvZ0tDaHpJRDhnTFRFZ09pQXhLU0FxSUVsdVptbHVhWFI1S1Z4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUcwZ1BTQnRJQ3NnVFdGMGFDNXdiM2NvTWl3Z2JVeGxiaWxjYmlBZ0lDQmxJRDBnWlNBdElHVkNhV0Z6WEc0Z0lIMWNiaUFnY21WMGRYSnVJQ2h6SUQ4Z0xURWdPaUF4S1NBcUlHMGdLaUJOWVhSb0xuQnZkeWd5TENCbElDMGdiVXhsYmlsY2JuMWNibHh1Wlhod2IzSjBjeTUzY21sMFpTQTlJR1oxYm1OMGFXOXVJQ2hpZFdabVpYSXNJSFpoYkhWbExDQnZabVp6WlhRc0lHbHpURVVzSUcxTVpXNHNJRzVDZVhSbGN5a2dlMXh1SUNCMllYSWdaU3dnYlN3Z1kxeHVJQ0IyWVhJZ1pVeGxiaUE5SUc1Q2VYUmxjeUFxSURnZ0xTQnRUR1Z1SUMwZ01WeHVJQ0IyWVhJZ1pVMWhlQ0E5SUNneElEdzhJR1ZNWlc0cElDMGdNVnh1SUNCMllYSWdaVUpwWVhNZ1BTQmxUV0Y0SUQ0K0lERmNiaUFnZG1GeUlISjBJRDBnS0cxTVpXNGdQVDA5SURJeklEOGdUV0YwYUM1d2IzY29NaXdnTFRJMEtTQXRJRTFoZEdndWNHOTNLRElzSUMwM055a2dPaUF3S1Z4dUlDQjJZWElnYVNBOUlHbHpURVVnUHlBd0lEb2dLRzVDZVhSbGN5QXRJREVwWEc0Z0lIWmhjaUJrSUQwZ2FYTk1SU0EvSURFZ09pQXRNVnh1SUNCMllYSWdjeUE5SUhaaGJIVmxJRHdnTUNCOGZDQW9kbUZzZFdVZ1BUMDlJREFnSmlZZ01TQXZJSFpoYkhWbElEd2dNQ2tnUHlBeElEb2dNRnh1WEc0Z0lIWmhiSFZsSUQwZ1RXRjBhQzVoWW5Nb2RtRnNkV1VwWEc1Y2JpQWdhV1lnS0dselRtRk9LSFpoYkhWbEtTQjhmQ0IyWVd4MVpTQTlQVDBnU1c1bWFXNXBkSGtwSUh0Y2JpQWdJQ0J0SUQwZ2FYTk9ZVTRvZG1Gc2RXVXBJRDhnTVNBNklEQmNiaUFnSUNCbElEMGdaVTFoZUZ4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUdVZ1BTQk5ZWFJvTG1ac2IyOXlLRTFoZEdndWJHOW5LSFpoYkhWbEtTQXZJRTFoZEdndVRFNHlLVnh1SUNBZ0lHbG1JQ2gyWVd4MVpTQXFJQ2hqSUQwZ1RXRjBhQzV3YjNjb01pd2dMV1VwS1NBOElERXBJSHRjYmlBZ0lDQWdJR1V0TFZ4dUlDQWdJQ0FnWXlBcVBTQXlYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaGxJQ3NnWlVKcFlYTWdQajBnTVNrZ2UxeHVJQ0FnSUNBZ2RtRnNkV1VnS3owZ2NuUWdMeUJqWEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lIWmhiSFZsSUNzOUlISjBJQ29nVFdGMGFDNXdiM2NvTWl3Z01TQXRJR1ZDYVdGektWeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb2RtRnNkV1VnS2lCaklENDlJRElwSUh0Y2JpQWdJQ0FnSUdVcksxeHVJQ0FnSUNBZ1l5QXZQU0F5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0dVZ0t5QmxRbWxoY3lBK1BTQmxUV0Y0S1NCN1hHNGdJQ0FnSUNCdElEMGdNRnh1SUNBZ0lDQWdaU0E5SUdWTllYaGNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tHVWdLeUJsUW1saGN5QStQU0F4S1NCN1hHNGdJQ0FnSUNCdElEMGdLSFpoYkhWbElDb2dZeUF0SURFcElDb2dUV0YwYUM1d2IzY29NaXdnYlV4bGJpbGNiaUFnSUNBZ0lHVWdQU0JsSUNzZ1pVSnBZWE5jYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2JTQTlJSFpoYkhWbElDb2dUV0YwYUM1d2IzY29NaXdnWlVKcFlYTWdMU0F4S1NBcUlFMWhkR2d1Y0c5M0tESXNJRzFNWlc0cFhHNGdJQ0FnSUNCbElEMGdNRnh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJR1p2Y2lBb095QnRUR1Z1SUQ0OUlEZzdJR0oxWm1abGNsdHZabVp6WlhRZ0t5QnBYU0E5SUcwZ0ppQXdlR1ptTENCcElDczlJR1FzSUcwZ0x6MGdNalUyTENCdFRHVnVJQzA5SURncElIdDlYRzVjYmlBZ1pTQTlJQ2hsSUR3OElHMU1aVzRwSUh3Z2JWeHVJQ0JsVEdWdUlDczlJRzFNWlc1Y2JpQWdabTl5SUNnN0lHVk1aVzRnUGlBd095QmlkV1ptWlhKYmIyWm1jMlYwSUNzZ2FWMGdQU0JsSUNZZ01IaG1aaXdnYVNBclBTQmtMQ0JsSUM4OUlESTFOaXdnWlV4bGJpQXRQU0E0S1NCN2ZWeHVYRzRnSUdKMVptWmxjbHR2Wm1aelpYUWdLeUJwSUMwZ1pGMGdmRDBnY3lBcUlERXlPRnh1ZlZ4dUlsMTlcbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiZS9VKzk3XCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvLi5cXFxcLi5cXFxcbm9kZV9tb2R1bGVzXFxcXGllZWU3NTRcXFxcaW5kZXguanNcIixcIi8uLlxcXFwuLlxcXFxub2RlX21vZHVsZXNcXFxcaWVlZTc1NFwiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcbid1c2Ugc3RyaWN0JztcblxuLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG5cbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY2FuU2V0SW1tZWRpYXRlID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnNldEltbWVkaWF0ZTtcbiAgICB2YXIgY2FuUG9zdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wb3N0TWVzc2FnZSAmJiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcjtcblxuICAgIGlmIChjYW5TZXRJbW1lZGlhdGUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChmKSB7XG4gICAgICAgICAgICByZXR1cm4gd2luZG93LnNldEltbWVkaWF0ZShmKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoY2FuUG9zdCkge1xuICAgICAgICB2YXIgcXVldWUgPSBbXTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBzb3VyY2UgPSBldi5zb3VyY2U7XG4gICAgICAgICAgICBpZiAoKHNvdXJjZSA9PT0gd2luZG93IHx8IHNvdXJjZSA9PT0gbnVsbCkgJiYgZXYuZGF0YSA9PT0gJ3Byb2Nlc3MtdGljaycpIHtcbiAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICBpZiAocXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZm4gPSBxdWV1ZS5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICBmbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgdHJ1ZSk7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5leHRUaWNrKGZuKSB7XG4gICAgICAgICAgICBxdWV1ZS5wdXNoKGZuKTtcbiAgICAgICAgICAgIHdpbmRvdy5wb3N0TWVzc2FnZSgncHJvY2Vzcy10aWNrJywgJyonKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dFRpY2soZm4pIHtcbiAgICAgICAgc2V0VGltZW91dChmbiwgMCk7XG4gICAgfTtcbn0oKTtcblxucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG4vLyBUT0RPKHNodHlsbWFuKVxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICcvJztcbn07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1KeWIzZHpaWEl1YW5NaVhTd2libUZ0WlhNaU9sc2ljSEp2WTJWemN5SXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlMQ0p1WlhoMFZHbGpheUlzSW1OaGJsTmxkRWx0YldWa2FXRjBaU0lzSW5kcGJtUnZkeUlzSW5ObGRFbHRiV1ZrYVdGMFpTSXNJbU5oYmxCdmMzUWlMQ0p3YjNOMFRXVnpjMkZuWlNJc0ltRmtaRVYyWlc1MFRHbHpkR1Z1WlhJaUxDSm1JaXdpY1hWbGRXVWlMQ0psZGlJc0luTnZkWEpqWlNJc0ltUmhkR0VpTENKemRHOXdVSEp2Y0dGbllYUnBiMjRpTENKc1pXNW5kR2dpTENKbWJpSXNJbk5vYVdaMElpd2ljSFZ6YUNJc0luTmxkRlJwYldWdmRYUWlMQ0owYVhSc1pTSXNJbUp5YjNkelpYSWlMQ0psYm5ZaUxDSmhjbWQySWl3aWJtOXZjQ0lzSW05dUlpd2lZV1JrVEdsemRHVnVaWElpTENKdmJtTmxJaXdpYjJabUlpd2ljbVZ0YjNabFRHbHpkR1Z1WlhJaUxDSnlaVzF2ZG1WQmJHeE1hWE4wWlc1bGNuTWlMQ0psYldsMElpd2lZbWx1WkdsdVp5SXNJbTVoYldVaUxDSkZjbkp2Y2lJc0ltTjNaQ0lzSW1Ob1pHbHlJaXdpWkdseUlsMHNJbTFoY0hCcGJtZHpJam9pT3p0QlFVRkJPenRCUVVWQkxFbEJRVWxCTEZWQlFWVkRMRTlCUVU5RExFOUJRVkFzUjBGQmFVSXNSVUZCTDBJN08wRkJSVUZHTEZGQlFWRkhMRkZCUVZJc1IwRkJiMElzV1VGQldUdEJRVU0xUWl4UlFVRkpReXhyUWtGQmEwSXNUMEZCVDBNc1RVRkJVQ3hMUVVGclFpeFhRVUZzUWl4SlFVTnVRa0VzVDBGQlQwTXNXVUZFVmp0QlFVVkJMRkZCUVVsRExGVkJRVlVzVDBGQlQwWXNUVUZCVUN4TFFVRnJRaXhYUVVGc1FpeEpRVU5ZUVN4UFFVRlBSeXhYUVVSSkxFbEJRMWRJTEU5QlFVOUpMR2RDUVVSb1F6czdRVUZKUVN4UlFVRkpUQ3hsUVVGS0xFVkJRWEZDTzBGQlEycENMR1ZCUVU4c1ZVRkJWVTBzUTBGQlZpeEZRVUZoTzBGQlFVVXNiVUpCUVU5TUxFOUJRVTlETEZsQlFWQXNRMEZCYjBKSkxFTkJRWEJDTEVOQlFWQTdRVUZCSzBJc1UwRkJja1E3UVVGRFNEczdRVUZGUkN4UlFVRkpTQ3hQUVVGS0xFVkJRV0U3UVVGRFZDeFpRVUZKU1N4UlFVRlJMRVZCUVZvN1FVRkRRVTRzWlVGQlQwa3NaMEpCUVZBc1EwRkJkMElzVTBGQmVFSXNSVUZCYlVNc1ZVRkJWVWNzUlVGQlZpeEZRVUZqTzBGQlF6ZERMR2RDUVVGSlF5eFRRVUZUUkN4SFFVRkhReXhOUVVGb1FqdEJRVU5CTEdkQ1FVRkpMRU5CUVVOQkxGZEJRVmRTTEUxQlFWZ3NTVUZCY1VKUkxGZEJRVmNzU1VGQmFrTXNTMEZCTUVORUxFZEJRVWRGTEVsQlFVZ3NTMEZCV1N4alFVRXhSQ3hGUVVFd1JUdEJRVU4wUlVZc2JVSkJRVWRITEdWQlFVZzdRVUZEUVN4dlFrRkJTVW9zVFVGQlRVc3NUVUZCVGl4SFFVRmxMRU5CUVc1Q0xFVkJRWE5DTzBGQlEyeENMSGRDUVVGSlF5eExRVUZMVGl4TlFVRk5UeXhMUVVGT0xFVkJRVlE3UVVGRFFVUTdRVUZEU0R0QlFVTktPMEZCUTBvc1UwRlVSQ3hGUVZOSExFbEJWRWc3TzBGQlYwRXNaVUZCVHl4VFFVRlRaQ3hSUVVGVUxFTkJRV3RDWXl4RlFVRnNRaXhGUVVGelFqdEJRVU42UWs0c2EwSkJRVTFSTEVsQlFVNHNRMEZCVjBZc1JVRkJXRHRCUVVOQldpeHRRa0ZCVDBjc1YwRkJVQ3hEUVVGdFFpeGpRVUZ1UWl4RlFVRnRReXhIUVVGdVF6dEJRVU5JTEZOQlNFUTdRVUZKU0RzN1FVRkZSQ3hYUVVGUExGTkJRVk5NTEZGQlFWUXNRMEZCYTBKakxFVkJRV3hDTEVWQlFYTkNPMEZCUTNwQ1J5eHRRa0ZCVjBnc1JVRkJXQ3hGUVVGbExFTkJRV1k3UVVGRFNDeExRVVpFTzBGQlIwZ3NRMEZxUTJ0Q0xFVkJRVzVDT3p0QlFXMURRV3BDTEZGQlFWRnhRaXhMUVVGU0xFZEJRV2RDTEZOQlFXaENPMEZCUTBGeVFpeFJRVUZSYzBJc1QwRkJVaXhIUVVGclFpeEpRVUZzUWp0QlFVTkJkRUlzVVVGQlVYVkNMRWRCUVZJc1IwRkJZeXhGUVVGa08wRkJRMEYyUWl4UlFVRlJkMElzU1VGQlVpeEhRVUZsTEVWQlFXWTdPMEZCUlVFc1UwRkJVME1zU1VGQlZDeEhRVUZuUWl4RFFVRkZPenRCUVVWc1FucENMRkZCUVZFd1FpeEZRVUZTTEVkQlFXRkVMRWxCUVdJN1FVRkRRWHBDTEZGQlFWRXlRaXhYUVVGU0xFZEJRWE5DUml4SlFVRjBRanRCUVVOQmVrSXNVVUZCVVRSQ0xFbEJRVklzUjBGQlpVZ3NTVUZCWmp0QlFVTkJla0lzVVVGQlVUWkNMRWRCUVZJc1IwRkJZMG9zU1VGQlpEdEJRVU5CZWtJc1VVRkJVVGhDTEdOQlFWSXNSMEZCZVVKTUxFbEJRWHBDTzBGQlEwRjZRaXhSUVVGUkswSXNhMEpCUVZJc1IwRkJOa0pPTEVsQlFUZENPMEZCUTBGNlFpeFJRVUZSWjBNc1NVRkJVaXhIUVVGbFVDeEpRVUZtT3p0QlFVVkJla0lzVVVGQlVXbERMRTlCUVZJc1IwRkJhMElzVlVGQlZVTXNTVUZCVml4RlFVRm5RanRCUVVNNVFpeFZRVUZOTEVsQlFVbERMRXRCUVVvc1EwRkJWU3hyUTBGQlZpeERRVUZPTzBGQlEwZ3NRMEZHUkRzN1FVRkpRVHRCUVVOQmJrTXNVVUZCVVc5RExFZEJRVklzUjBGQll5eFpRVUZaTzBGQlFVVXNWMEZCVHl4SFFVRlFPMEZCUVZrc1EwRkJlRU03UVVGRFFYQkRMRkZCUVZGeFF5eExRVUZTTEVkQlFXZENMRlZCUVZWRExFZEJRVllzUlVGQlpUdEJRVU16UWl4VlFVRk5MRWxCUVVsSUxFdEJRVW9zUTBGQlZTeG5RMEZCVml4RFFVRk9PMEZCUTBnc1EwRkdSQ0lzSW1acGJHVWlPaUppY205M2MyVnlMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUx5OGdjMmhwYlNCbWIzSWdkWE5wYm1jZ2NISnZZMlZ6Y3lCcGJpQmljbTkzYzJWeVhHNWNiblpoY2lCd2NtOWpaWE56SUQwZ2JXOWtkV3hsTG1WNGNHOXlkSE1nUFNCN2ZUdGNibHh1Y0hKdlkyVnpjeTV1WlhoMFZHbGpheUE5SUNobWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ2RtRnlJR05oYmxObGRFbHRiV1ZrYVdGMFpTQTlJSFI1Y0dWdlppQjNhVzVrYjNjZ0lUMDlJQ2QxYm1SbFptbHVaV1FuWEc0Z0lDQWdKaVlnZDJsdVpHOTNMbk5sZEVsdGJXVmthV0YwWlR0Y2JpQWdJQ0IyWVhJZ1kyRnVVRzl6ZENBOUlIUjVjR1Z2WmlCM2FXNWtiM2NnSVQwOUlDZDFibVJsWm1sdVpXUW5YRzRnSUNBZ0ppWWdkMmx1Wkc5M0xuQnZjM1JOWlhOellXZGxJQ1ltSUhkcGJtUnZkeTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlYRzRnSUNBZ08xeHVYRzRnSUNBZ2FXWWdLR05oYmxObGRFbHRiV1ZrYVdGMFpTa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdLR1lwSUhzZ2NtVjBkWEp1SUhkcGJtUnZkeTV6WlhSSmJXMWxaR2xoZEdVb1ppa2dmVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvWTJGdVVHOXpkQ2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdjWFZsZFdVZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnZDJsdVpHOTNMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KMjFsYzNOaFoyVW5MQ0JtZFc1amRHbHZiaUFvWlhZcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQnpiM1Z5WTJVZ1BTQmxkaTV6YjNWeVkyVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9LSE52ZFhKalpTQTlQVDBnZDJsdVpHOTNJSHg4SUhOdmRYSmpaU0E5UFQwZ2JuVnNiQ2tnSmlZZ1pYWXVaR0YwWVNBOVBUMGdKM0J5YjJObGMzTXRkR2xqYXljcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxkaTV6ZEc5d1VISnZjR0ZuWVhScGIyNG9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NYVmxkV1V1YkdWdVozUm9JRDRnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1ptNGdQU0J4ZFdWMVpTNXphR2xtZENncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYmlncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTd2dkSEoxWlNrN1hHNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlHNWxlSFJVYVdOcktHWnVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnhkV1YxWlM1d2RYTm9LR1p1S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSGRwYm1SdmR5NXdiM04wVFdWemMyRm5aU2duY0hKdlkyVnpjeTEwYVdOckp5d2dKeW9uS1R0Y2JpQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnYm1WNGRGUnBZMnNvWm00cElIdGNiaUFnSUNBZ0lDQWdjMlYwVkdsdFpXOTFkQ2htYml3Z01DazdYRzRnSUNBZ2ZUdGNibjBwS0NrN1hHNWNibkJ5YjJObGMzTXVkR2wwYkdVZ1BTQW5Zbkp2ZDNObGNpYzdYRzV3Y205alpYTnpMbUp5YjNkelpYSWdQU0IwY25WbE8xeHVjSEp2WTJWemN5NWxibllnUFNCN2ZUdGNibkJ5YjJObGMzTXVZWEpuZGlBOUlGdGRPMXh1WEc1bWRXNWpkR2x2YmlCdWIyOXdLQ2tnZTMxY2JseHVjSEp2WTJWemN5NXZiaUE5SUc1dmIzQTdYRzV3Y205alpYTnpMbUZrWkV4cGMzUmxibVZ5SUQwZ2JtOXZjRHRjYm5CeWIyTmxjM011YjI1alpTQTlJRzV2YjNBN1hHNXdjbTlqWlhOekxtOW1aaUE5SUc1dmIzQTdYRzV3Y205alpYTnpMbkpsYlc5MlpVeHBjM1JsYm1WeUlEMGdibTl2Y0R0Y2JuQnliMk5sYzNNdWNtVnRiM1psUVd4c1RHbHpkR1Z1WlhKeklEMGdibTl2Y0R0Y2JuQnliMk5sYzNNdVpXMXBkQ0E5SUc1dmIzQTdYRzVjYm5CeWIyTmxjM011WW1sdVpHbHVaeUE5SUdaMWJtTjBhVzl1SUNodVlXMWxLU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZHdjbTlqWlhOekxtSnBibVJwYm1jZ2FYTWdibTkwSUhOMWNIQnZjblJsWkNjcE8xeHVmVnh1WEc0dkx5QlVUMFJQS0hOb2RIbHNiV0Z1S1Z4dWNISnZZMlZ6Y3k1amQyUWdQU0JtZFc1amRHbHZiaUFvS1NCN0lISmxkSFZ5YmlBbkx5Y2dmVHRjYm5CeWIyTmxjM011WTJoa2FYSWdQU0JtZFc1amRHbHZiaUFvWkdseUtTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Nkd2NtOWpaWE56TG1Ob1pHbHlJR2x6SUc1dmRDQnpkWEJ3YjNKMFpXUW5LVHRjYm4wN1hHNGlYWDA9XG59KS5jYWxsKHRoaXMscmVxdWlyZShcImUvVSs5N1wiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIsYXJndW1lbnRzWzNdLGFyZ3VtZW50c1s0XSxhcmd1bWVudHNbNV0sYXJndW1lbnRzWzZdLFwiLy4uXFxcXC4uXFxcXG5vZGVfbW9kdWxlc1xcXFxwcm9jZXNzXFxcXGJyb3dzZXIuanNcIixcIi8uLlxcXFwuLlxcXFxub2RlX21vZHVsZXNcXFxccHJvY2Vzc1wiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgRGVtb0RhdGEgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIERlbW9EYXRhKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEZW1vRGF0YSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRGVtb0RhdGEsIFt7XG4gICAga2V5OiBcImNyZWF0ZUVtcGxveWVlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVFbXBsb3llZXMoKSB7XG4gICAgICB2YXIgY291bnQgPSAxO1xuICAgICAgdmFyIGVtcGxveWVlcyA9IFt7XG4gICAgICAgIGlkOiBjb3VudCsrLFxuICAgICAgICBuYW1lOiBcItCh0YLQvtC70L/QvdC10YAg0JDQvdC00YDQtdC5INCh0LXRgNCz0LXQtdCy0LjRh1wiLFxuICAgICAgICBwb3NpdGlvbjogXCJGcm9udC1lbmQgZGV2ZWxvcGVyXCIsXG4gICAgICAgIGNvdW50RGF5c0hvbGk6IDI0XG4gICAgICB9LCB7XG4gICAgICAgIGlkOiBjb3VudCsrLFxuICAgICAgICBuYW1lOiBcItCh0YLQvtC70L/QvdC10YAg0KHQtdGA0LPQtdC5INCh0LXRgNCz0LXQtdCy0LjRh1wiLFxuICAgICAgICBwb3NpdGlvbjogXCJTeXN0ZW0gQWRtaW5pc3RyYXRvclwiLFxuICAgICAgICBjb3VudERheXNIb2xpOiAyNFxuICAgICAgfSwge1xuICAgICAgICBpZDogY291bnQrKyxcbiAgICAgICAgbmFtZTogXCLQodGD0LrQvtGA0LAg0KHRgtCw0L3QuNGB0LvQsNCyINCY0LPQvtGA0LXQstC40YdcIixcbiAgICAgICAgcG9zaXRpb246IFwiQmFjay1lbmQgZGV2ZWxvcGVyXCIsXG4gICAgICAgIGNvdW50RGF5c0hvbGk6IDI0XG4gICAgICB9LCB7XG4gICAgICAgIGlkOiBjb3VudCsrLFxuICAgICAgICBuYW1lOiBcItCU0L7QstCz0LDQu9GMINCQ0LvQtdC60YHQtdC5INCS0LvQsNC00LjQvNC40YDQvtCy0LjRh1wiLFxuICAgICAgICBwb3NpdGlvbjogXCJGcm9udC1lbmQgZGV2ZWxvcGVyXCIsXG4gICAgICAgIGNvdW50RGF5c0hvbGk6IDI0XG4gICAgICB9LCB7XG4gICAgICAgIGlkOiBjb3VudCsrLFxuICAgICAgICBuYW1lOiBcItCY0LLQsNC90L7QsiDQmNCy0LDQvSDQmNCy0LDQvdC+0LLQuNGHXCIsXG4gICAgICAgIHBvc2l0aW9uOiBcIkZyb250LWVuZCBkZXZlbG9wZXJcIixcbiAgICAgICAgY291bnREYXlzSG9saTogMjRcbiAgICAgIH0sIHtcbiAgICAgICAgaWQ6IGNvdW50KyssXG4gICAgICAgIG5hbWU6IFwi0J/QsNC90YvRiCDQmNC70YzRjyDQktC70LDQtNC40LzQuNGA0L7QstC40YdcIixcbiAgICAgICAgcG9zaXRpb246IFwiQmFjay1lbmQgZGV2ZWxvcGVyXCIsXG4gICAgICAgIGNvdW50RGF5c0hvbGk6IDI0XG4gICAgICB9XTtcbiAgICAgIHJldHVybiBlbXBsb3llZXM7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIERlbW9EYXRhO1xufSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBEZW1vRGF0YTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrUmxiVzlFWVhSaExtcHpJbDBzSW01aGJXVnpJanBiSWtSbGJXOUVZWFJoSWl3aVkyOTFiblFpTENKbGJYQnNiM2xsWlhNaUxDSnBaQ0lzSW01aGJXVWlMQ0p3YjNOcGRHbHZiaUlzSW1OdmRXNTBSR0Y1YzBodmJHa2lYU3dpYldGd2NHbHVaM01pT2lJN096czdPenM3T3pzN1NVRkJUVUVzVVRzN096czdPenR6UTBGRFl6dEJRVU5vUWl4VlFVRkpReXhSUVVGUkxFTkJRVm83UVVGRFFTeFZRVUZKUXl4WlFVRlpMRU5CUTJRN1FVRkRSVU1zV1VGQlNVWXNUMEZFVGp0QlFVVkZSeXhqUVVGTkxESkNRVVpTTzBGQlIwVkRMR3RDUVVGVkxIRkNRVWhhTzBGQlNVVkRMSFZDUVVGbE8wRkJTbXBDTEU5QlJHTXNSVUZQWkR0QlFVTkZTQ3haUVVGSlJpeFBRVVJPTzBGQlJVVkhMR05CUVUwc01rSkJSbEk3UVVGSFJVTXNhMEpCUVZVc2MwSkJTRm83UVVGSlJVTXNkVUpCUVdVN1FVRktha0lzVDBGUVl5eEZRV0ZrTzBGQlEwVklMRmxCUVVsR0xFOUJSRTQ3UVVGRlJVY3NZMEZCVFN3eVFrRkdVanRCUVVkRlF5eHJRa0ZCVlN4dlFrRklXanRCUVVsRlF5eDFRa0ZCWlR0QlFVcHFRaXhQUVdKakxFVkJiVUprTzBGQlEwVklMRmxCUVVsR0xFOUJSRTQ3UVVGRlJVY3NZMEZCVFN3NFFrRkdVanRCUVVkRlF5eHJRa0ZCVlN4eFFrRklXanRCUVVsRlF5eDFRa0ZCWlR0QlFVcHFRaXhQUVc1Q1l5eEZRWGxDWkR0QlFVTkZTQ3haUVVGSlJpeFBRVVJPTzBGQlJVVkhMR05CUVUwc2MwSkJSbEk3UVVGSFJVTXNhMEpCUVZVc2NVSkJTRm83UVVGSlJVTXNkVUpCUVdVN1FVRktha0lzVDBGNlFtTXNSVUVyUW1RN1FVRkRSVWdzV1VGQlNVWXNUMEZFVGp0QlFVVkZSeXhqUVVGTkxIbENRVVpTTzBGQlIwVkRMR3RDUVVGVkxHOUNRVWhhTzBGQlNVVkRMSFZDUVVGbE8wRkJTbXBDTEU5QkwwSmpMRU5CUVdoQ08wRkJjME5CTEdGQlFVOUtMRk5CUVZBN1FVRkRSRHM3T3pzN08ydENRVWRaUml4Uklpd2labWxzWlNJNklrUmxiVzlFWVhSaExtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpWTJ4aGMzTWdSR1Z0YjBSaGRHRWdlMXh1SUNCamNtVmhkR1ZGYlhCc2IzbGxaWE1vS1NCN1hHNGdJQ0FnYkdWMElHTnZkVzUwSUQwZ01UdGNiaUFnSUNCc1pYUWdaVzF3Ykc5NVpXVnpJRDBnVzF4dUlDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNCcFpEb2dZMjkxYm5Rckt5eGNiaUFnSUNBZ0lDQWdibUZ0WlRvZ1hDTFFvZEdDMEw3UXU5Qy8wTDNRdGRHQUlOQ1EwTDNRdE5HQTBMWFF1U0RRb2RDMTBZRFFzOUMxMExYUXN0QzQwWWRjSWl4Y2JpQWdJQ0FnSUNBZ2NHOXphWFJwYjI0NklGd2lSbkp2Ym5RdFpXNWtJR1JsZG1Wc2IzQmxjbHdpTEZ4dUlDQWdJQ0FnSUNCamIzVnVkRVJoZVhOSWIyeHBPaUF5TkZ4dUlDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2FXUTZJR052ZFc1MEt5c3NYRzRnSUNBZ0lDQWdJRzVoYldVNklGd2kwS0hSZ3RDKzBMdlF2OUM5MExYUmdDRFFvZEMxMFlEUXM5QzEwTGtnMEtIUXRkR0EwTFBRdGRDMTBMTFF1TkdIWENJc1hHNGdJQ0FnSUNBZ0lIQnZjMmwwYVc5dU9pQmNJbE41YzNSbGJTQkJaRzFwYm1semRISmhkRzl5WENJc1hHNGdJQ0FnSUNBZ0lHTnZkVzUwUkdGNWMwaHZiR2s2SURJMFhHNGdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQnBaRG9nWTI5MWJuUXJLeXhjYmlBZ0lDQWdJQ0FnYm1GdFpUb2dYQ0xRb2RHRDBMclF2dEdBMExBZzBLSFJndEN3MEwzUXVOR0IwTHZRc05DeUlOQ1kwTFBRdnRHQTBMWFFzdEM0MFlkY0lpeGNiaUFnSUNBZ0lDQWdjRzl6YVhScGIyNDZJRndpUW1GamF5MWxibVFnWkdWMlpXeHZjR1Z5WENJc1hHNGdJQ0FnSUNBZ0lHTnZkVzUwUkdGNWMwaHZiR2s2SURJMFhHNGdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQnBaRG9nWTI5MWJuUXJLeXhjYmlBZ0lDQWdJQ0FnYm1GdFpUb2dYQ0xRbE5DKzBMTFFzOUN3MEx2UmpDRFFrTkM3MExYUXV0R0IwTFhRdVNEUWt0QzcwTERRdE5DNDBMelF1TkdBMEw3UXN0QzQwWWRjSWl4Y2JpQWdJQ0FnSUNBZ2NHOXphWFJwYjI0NklGd2lSbkp2Ym5RdFpXNWtJR1JsZG1Wc2IzQmxjbHdpTEZ4dUlDQWdJQ0FnSUNCamIzVnVkRVJoZVhOSWIyeHBPaUF5TkZ4dUlDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2FXUTZJR052ZFc1MEt5c3NYRzRnSUNBZ0lDQWdJRzVoYldVNklGd2kwSmpRc3RDdzBMM1F2dEN5SU5DWTBMTFFzTkM5SU5DWTBMTFFzTkM5MEw3UXN0QzQwWWRjSWl4Y2JpQWdJQ0FnSUNBZ2NHOXphWFJwYjI0NklGd2lSbkp2Ym5RdFpXNWtJR1JsZG1Wc2IzQmxjbHdpTEZ4dUlDQWdJQ0FnSUNCamIzVnVkRVJoZVhOSWIyeHBPaUF5TkZ4dUlDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2FXUTZJR052ZFc1MEt5c3NYRzRnSUNBZ0lDQWdJRzVoYldVNklGd2kwSi9Rc05DOTBZdlJpQ0RRbU5DNzBZelJqeURRa3RDNzBMRFF0TkM0MEx6UXVOR0EwTDdRc3RDNDBZZGNJaXhjYmlBZ0lDQWdJQ0FnY0c5emFYUnBiMjQ2SUZ3aVFtRmpheTFsYm1RZ1pHVjJaV3h2Y0dWeVhDSXNYRzRnSUNBZ0lDQWdJR052ZFc1MFJHRjVjMGh2YkdrNklESTBYRzRnSUNBZ0lDQjlYRzRnSUNBZ1hUdGNiaUFnSUNCeVpYUjFjbTRnWlcxd2JHOTVaV1Z6TzF4dUlDQjlYRzU5WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUVSbGJXOUVZWFJoTzF4dUlsMTlcbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiZS9VKzk3XCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvRGVtb0RhdGEuanNcIixcIi9cIikiLCIoZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsLEJ1ZmZlcixfX2FyZ3VtZW50MCxfX2FyZ3VtZW50MSxfX2FyZ3VtZW50MixfX2FyZ3VtZW50MyxfX2ZpbGVuYW1lLF9fZGlybmFtZSl7XG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9EQiA9IHJlcXVpcmUoXCIuLy4uL3V0aWxzL0RCXCIpO1xuXG52YXIgX0RCMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0RCKTtcblxudmFyIF9CdXNpbmVzc1JlcXVpcmVtZW50cyA9IHJlcXVpcmUoXCIuLy4uL3V0aWxzL0J1c2luZXNzUmVxdWlyZW1lbnRzXCIpO1xuXG52YXIgX0J1c2luZXNzUmVxdWlyZW1lbnRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0J1c2luZXNzUmVxdWlyZW1lbnRzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIGRiID0gbmV3IF9EQjIuZGVmYXVsdCgpO1xudmFyIGJyID0gbmV3IF9CdXNpbmVzc1JlcXVpcmVtZW50czIuZGVmYXVsdCgpO1xudmFyIHBsYWNlUmVuZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi53b3JrUGxhY2VcIik7XG5cbnZhciBFZGl0SG9saWRheXNQYWdlID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBFZGl0SG9saWRheXNQYWdlKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFZGl0SG9saWRheXNQYWdlKTtcblxuICAgIHRoaXMuYXJyRGF0ZSA9IFtdO1xuICAgIHRoaXMuYXJyRW1wbG95ZWVzID0gW107XG4gICAgdGhpcy5jdXJyZW50RW1wbG95ZWUgPSBbXTtcbiAgICB0aGlzLmN1cnJlbnREYXRlID0gW107XG4gICAgdGhpcy5kaWZmQmV0d2Vlbk9sZERhdGUgPSAwO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEVkaXRIb2xpZGF5c1BhZ2UsIFt7XG4gICAga2V5OiBcImluaXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHZhciBhcnJIYXNoID0gbG9jYXRpb24uaGFzaC5zcGxpdChcIiZcIik7XG4gICAgICBkYi5mZXRjaChcImhvbGlkYXlzXCIpLnRoZW4oZnVuY3Rpb24gKGFyckRhdGUpIHtcbiAgICAgICAgX3RoaXMuYXJyRGF0ZSA9IGFyckRhdGU7XG4gICAgICAgIHZhciBpZEhvbGkgPSBhcnJIYXNoWzBdLnNsaWNlKDQpO1xuICAgICAgICBfdGhpcy5jdXJyZW50RGF0ZSA9IGFyckRhdGUuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgcmV0dXJuIGl0ZW0uaWRIb2xpID09PSAraWRIb2xpO1xuICAgICAgICB9KTtcbiAgICAgICAgX3RoaXMuZGlmZkJldHdlZW5PbGREYXRlID0gYnIudG9Db3VudERpZmZCZXR3ZWVuRGF0ZXMoX3RoaXMuY3VycmVudERhdGVbMF0uZGF0ZUZyb20sIF90aGlzLmN1cnJlbnREYXRlWzBdLmRhdGVUbyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZGIuZmV0Y2goXCJlbXBsb3llZXNcIik7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uIChhcnJFbXBsb3llZXMpIHtcbiAgICAgICAgX3RoaXMuYXJyRW1wbG95ZWVzID0gYXJyRW1wbG95ZWVzO1xuICAgICAgICB2YXIgaWRFbXBsb3llZSA9IGFyckhhc2hbMV0uc2xpY2UoOCk7XG4gICAgICAgIF90aGlzLmN1cnJlbnRFbXBsb3llZSA9IGFyckVtcGxveWVlcy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICByZXR1cm4gaXRlbS5pZCA9PT0gK2lkRW1wbG95ZWU7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnJlbmRlclBhZ2UoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJQYWdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlclBhZ2UoKSB7XG4gICAgICBwbGFjZVJlbmRlci5pbm5lckhUTUwgPSBcIlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udGFpbmVyXFxcIj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcbiAgICAgICAgICAgIDxsYWJlbD48Yj5cIiArIHRoaXMuY3VycmVudEVtcGxveWVlWzBdLm5hbWUgKyBcIjwvYj48L2xhYmVsPjxicj5cXG4gICAgICAgICAgICA8bGFiZWwgZm9yPVxcXCJkYXRlRnJvbVxcXCI+XFx1MDQxNFxcdTA0MzBcXHUwNDQyXFx1MDQzMCBcXHUwNDNEXFx1MDQzMFxcdTA0NDdcXHUwNDMwXFx1MDQzQlxcdTA0M0UgXFx1MDQzRVxcdTA0NDJcXHUwNDNGXFx1MDQ0M1xcdTA0NDFcXHUwNDNBXFx1MDQzMDogPC9sYWJlbD5cXG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwiZGF0ZVxcXCIgbmFtZT1cXFwiY2FsZW5kYXJcXFwiIGNsYXNzPVxcXCJkYXRlRnJvbSBmb3JtLWNvbnRyb2xcXFwiIGlkPVxcXCJkYXRlRnJvbVxcXCI+XFxuICAgICAgICAgICAgPGxhYmVsIGZvcj1cXFwiZGF0ZVRvXFxcIj5cXHUwNDE0XFx1MDQzMFxcdTA0NDJcXHUwNDMwIFxcdTA0M0FcXHUwNDNFXFx1MDQzRFxcdTA0NDZcXHUwNDMwIFxcdTA0M0VcXHUwNDQyXFx1MDQzRlxcdTA0NDNcXHUwNDQxXFx1MDQzQVxcdTA0MzA8L2xhYmVsPlxcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJkYXRlXFxcIiBuYW1lPVxcXCJjYWxlbmRhclxcXCIgY2xhc3M9XFxcImRhdGVUbyBmb3JtLWNvbnRyb2xcXFwiIGlkPVxcXCJkYXRlVG9cXFwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImluZm9cXFwiPjwvZGl2PlxcbiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cXFwic3VibWl0SG9saWRheSBidG4gYnRuLW91dGxpbmUtcHJpbWFyeVxcXCIgdHlwZT1cXFwic3VibWl0XFxcIiB2YWx1ZT1cXFwiU3VibWl0XFxcIj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG4gICAgICAgICAgXCI7XG4gICAgICB0aGlzLmFkZEhhbmRsZXJFdmVudCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJhZGRIYW5kbGVyRXZlbnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkSGFuZGxlckV2ZW50KCkge1xuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5zdWJtaXRIb2xpZGF5XCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLmNoZWNraW5nRGF0YS5iaW5kKHRoaXMpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY2hlY2tpbmdEYXRhXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNoZWNraW5nRGF0YSgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgc3BhbkluZm8gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmluZm9cIik7XG4gICAgICB2YXIgZGF0ZUZyb20gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmRhdGVGcm9tXCIpO1xuICAgICAgdmFyIGRhdGVUbyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZGF0ZVRvXCIpO1xuICAgICAgdmFyIGNvdW50RGF5cyA9IHRoaXMuY3VycmVudEVtcGxveWVlWzBdLmNvdW50RGF5c0hvbGkgKyB0aGlzLmRpZmZCZXR3ZWVuT2xkRGF0ZTtcbiAgICAgIHZhciBpZEVtcGxveWVlID0gdGhpcy5jdXJyZW50RW1wbG95ZWVbMF0uaWQ7XG4gICAgICB2YXIgcG9zaXRpb25FbXBsb3llZSA9IHRoaXMuY3VycmVudEVtcGxveWVlWzBdLnBvc2l0aW9uO1xuICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMi5hcnJEYXRlLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGkpIHtcbiAgICAgICAgICBpZiAoaXRlbS5pZEhvbGkgPT09IF90aGlzMi5jdXJyZW50RGF0ZVswXS5pZEhvbGkpIHtcbiAgICAgICAgICAgIF90aGlzMi5hcnJEYXRlLnNwbGljZShpLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGJyLmNoZWNraW5nRGF0YShjb3VudERheXMsIGRhdGVGcm9tLnZhbHVlLCBkYXRlVG8udmFsdWUsIGlkRW1wbG95ZWUsIHBvc2l0aW9uRW1wbG95ZWUsIF90aGlzMi5hcnJEYXRlKTtcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gc3BhbkluZm8uaW5uZXJIVE1MID0gXCI8ZGl2IGNsYXNzPVxcXCJhbGVydCBhbGVydC1zdWNjZXNzXFxcIiByb2xlPVxcXCJhbGVydFxcXCI+XFx1MDQyMVxcdTA0NDdcXHUwNDMwXFx1MDQ0MVxcdTA0NDJcXHUwNDNCXFx1MDQzOFxcdTA0MzJcXHUwNDNFXFx1MDQzM1xcdTA0M0UgXFx1MDQxMlxcdTA0MzBcXHUwNDNDIFxcdTA0M0VcXHUwNDQyXFx1MDQzNFxcdTA0NEJcXHUwNDQ1XFx1MDQzMDwvZGl2PlwiO1xuICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczIuYWRkRW1wbG95ZWVBZnRlckNoZWNraW5nVmFsaWQoaWRFbXBsb3llZSwgZGF0ZUZyb20udmFsdWUsIGRhdGVUby52YWx1ZSk7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGRiLmZldGNoKFwiZW1wbG95ZWVzXCIpO1xuICAgICAgfSkudGhlbihmdW5jdGlvbiAoYXJyKSB7XG4gICAgICAgIHZhciBkaWZmQmV0d2VlbkRhdGUgPSBici50b0NvdW50RGlmZkJldHdlZW5EYXRlcyhkYXRlRnJvbS52YWx1ZSwgZGF0ZVRvLnZhbHVlKTtcbiAgICAgICAgYXJyLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGkpIHtcbiAgICAgICAgICBpZiAoaXRlbS5pZCA9PT0gaWRFbXBsb3llZSkge1xuICAgICAgICAgICAgaXRlbS5jb3VudERheXNIb2xpID0gaXRlbS5jb3VudERheXNIb2xpICsgX3RoaXMyLmRpZmZCZXR3ZWVuT2xkRGF0ZSAtIGRpZmZCZXR3ZWVuRGF0ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBkYi5zZXRJdGVtKFwiZW1wbG95ZWVzXCIsIGFycik7XG4gICAgICB9KS5jYXRjaChmdW5jdGlvbiAoaW5mbykge1xuICAgICAgICBzcGFuSW5mby5pbm5lckhUTUwgPSBcIjxkaXYgY2xhc3M9XFxcImFsZXJ0IGFsZXJ0LWRhbmdlclxcXCIgcm9sZT1cXFwiYWxlcnRcXFwiPlwiICsgaW5mbyArIFwiPC9kaXY+XCI7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiYWRkRW1wbG95ZWVBZnRlckNoZWNraW5nVmFsaWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkRW1wbG95ZWVBZnRlckNoZWNraW5nVmFsaWQoaWRFbXBsb3llZSwgZGF0ZUZyb20sIGRhdGVUbykge1xuICAgICAgdmFyIGhvbGlkYXkgPSB7XG4gICAgICAgIGlkSG9saTogdGhpcy5hcnJEYXRlLmxlbmd0aCArIDEsXG4gICAgICAgIGlkOiBpZEVtcGxveWVlLFxuICAgICAgICBkYXRlRnJvbTogZGF0ZUZyb20sXG4gICAgICAgIGRhdGVUbzogZGF0ZVRvXG4gICAgICB9O1xuICAgICAgdGhpcy5hcnJEYXRlLnB1c2goaG9saWRheSk7XG4gICAgICBkYi5zZXRJdGVtKFwiaG9saWRheXNcIiwgdGhpcy5hcnJEYXRlKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRWRpdEhvbGlkYXlzUGFnZTtcbn0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gRWRpdEhvbGlkYXlzUGFnZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrVmthWFJJYjJ4cFpHRjVjMUJoWjJVdWFuTWlYU3dpYm1GdFpYTWlPbHNpWkdJaUxDSmljaUlzSW5Cc1lXTmxVbVZ1WkdWeUlpd2laRzlqZFcxbGJuUWlMQ0p4ZFdWeWVWTmxiR1ZqZEc5eUlpd2lSV1JwZEVodmJHbGtZWGx6VUdGblpTSXNJbUZ5Y2tSaGRHVWlMQ0poY25KRmJYQnNiM2xsWlhNaUxDSmpkWEp5Wlc1MFJXMXdiRzk1WldVaUxDSmpkWEp5Wlc1MFJHRjBaU0lzSW1ScFptWkNaWFIzWldWdVQyeGtSR0YwWlNJc0ltRnlja2hoYzJnaUxDSnNiMk5oZEdsdmJpSXNJbWhoYzJnaUxDSnpjR3hwZENJc0ltWmxkR05vSWl3aWRHaGxiaUlzSW1sa1NHOXNhU0lzSW5Oc2FXTmxJaXdpWm1sc2RHVnlJaXdpYVhSbGJTSXNJblJ2UTI5MWJuUkVhV1ptUW1WMGQyVmxia1JoZEdWeklpd2laR0YwWlVaeWIyMGlMQ0prWVhSbFZHOGlMQ0pwWkVWdGNHeHZlV1ZsSWl3aWFXUWlMQ0p5Wlc1a1pYSlFZV2RsSWl3aWFXNXVaWEpJVkUxTUlpd2libUZ0WlNJc0ltRmtaRWhoYm1Sc1pYSkZkbVZ1ZENJc0ltRmtaRVYyWlc1MFRHbHpkR1Z1WlhJaUxDSmphR1ZqYTJsdVowUmhkR0VpTENKaWFXNWtJaXdpYzNCaGJrbHVabThpTENKamIzVnVkRVJoZVhNaUxDSmpiM1Z1ZEVSaGVYTkliMnhwSWl3aWNHOXphWFJwYjI1RmJYQnNiM2xsWlNJc0luQnZjMmwwYVc5dUlpd2lVSEp2YldselpTSXNJbkpsYzI5c2RtVWlMQ0ptYjNKRllXTm9JaXdpYVNJc0luTndiR2xqWlNJc0luWmhiSFZsSWl3aVlXUmtSVzF3Ykc5NVpXVkJablJsY2tOb1pXTnJhVzVuVm1Gc2FXUWlMQ0prYVdabVFtVjBkMlZsYmtSaGRHVWlMQ0poY25JaUxDSnpaWFJKZEdWdElpd2lZMkYwWTJnaUxDSnBibVp2SWl3aWFHOXNhV1JoZVNJc0lteGxibWQwYUNJc0luQjFjMmdpWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3T3pzN08wRkJRVUU3T3pzN1FVRkRRVHM3T3pzN096czdRVUZEUVN4SlFVRkpRU3hMUVVGTExHdENRVUZVTzBGQlEwRXNTVUZCU1VNc1MwRkJTeXh2UTBGQlZEdEJRVU5CTEVsQlFVbERMR05CUVdORExGTkJRVk5ETEdGQlFWUXNRMEZCZFVJc1dVRkJka0lzUTBGQmJFSTdPMGxCUlUxRExHZENPMEZCUTBvc09FSkJRV003UVVGQlFUczdRVUZEV2l4VFFVRkxReXhQUVVGTUxFZEJRV1VzUlVGQlpqdEJRVU5CTEZOQlFVdERMRmxCUVV3c1IwRkJiMElzUlVGQmNFSTdRVUZEUVN4VFFVRkxReXhsUVVGTUxFZEJRWFZDTEVWQlFYWkNPMEZCUTBFc1UwRkJTME1zVjBGQlRDeEhRVUZ0UWl4RlFVRnVRanRCUVVOQkxGTkJRVXRETEd0Q1FVRk1MRWRCUVRCQ0xFTkJRVEZDTzBGQlEwUTdPenM3TWtKQlEwMDdRVUZCUVRzN1FVRkRUQ3hWUVVGSlF5eFZRVUZWUXl4VFFVRlRReXhKUVVGVUxFTkJRV05ETEV0QlFXUXNRMEZCYjBJc1IwRkJjRUlzUTBGQlpEdEJRVU5CWkN4VFFVTkhaU3hMUVVSSUxFTkJRMU1zVlVGRVZDeEZRVVZIUXl4SlFVWklMRU5CUlZFc2JVSkJRVmM3UVVGRFppeGpRVUZMVml4UFFVRk1MRWRCUVdWQkxFOUJRV1k3UVVGRFFTeFpRVUZKVnl4VFFVRlRUaXhSUVVGUkxFTkJRVklzUlVGQlYwOHNTMEZCV0N4RFFVRnBRaXhEUVVGcVFpeERRVUZpTzBGQlEwRXNZMEZCUzFRc1YwRkJUQ3hIUVVGdFFrZ3NVVUZCVVdFc1RVRkJVaXhEUVVGbE8wRkJRVUVzYVVKQlFWRkRMRXRCUVV0SUxFMUJRVXdzUzBGQlowSXNRMEZCUTBFc1RVRkJla0k3UVVGQlFTeFRRVUZtTEVOQlFXNUNPMEZCUTBFc1kwRkJTMUFzYTBKQlFVd3NSMEZCTUVKVUxFZEJRVWR2UWl4MVFrRkJTQ3hEUVVONFFpeE5RVUZMV2l4WFFVRk1MRU5CUVdsQ0xFTkJRV3BDTEVWQlFXOUNZU3hSUVVSSkxFVkJSWGhDTEUxQlFVdGlMRmRCUVV3c1EwRkJhVUlzUTBGQmFrSXNSVUZCYjBKakxFMUJSa2tzUTBGQk1VSTdRVUZKUVR0QlFVTkVMRTlCV0Vnc1JVRlpSMUFzU1VGYVNDeERRVmxSTzBGQlFVRXNaVUZCVFdoQ0xFZEJRVWRsTEV0QlFVZ3NRMEZCVXl4WFFVRlVMRU5CUVU0N1FVRkJRU3hQUVZwU0xFVkJZVWRETEVsQllrZ3NRMEZoVVN4M1FrRkJaMEk3UVVGRGNFSXNZMEZCUzFRc1dVRkJUQ3hIUVVGdlFrRXNXVUZCY0VJN1FVRkRRU3haUVVGSmFVSXNZVUZCWVdJc1VVRkJVU3hEUVVGU0xFVkJRVmRQTEV0QlFWZ3NRMEZCYVVJc1EwRkJha0lzUTBGQmFrSTdRVUZEUVN4alFVRkxWaXhsUVVGTUxFZEJRWFZDUkN4aFFVRmhXU3hOUVVGaUxFTkJRM0pDTzBGQlFVRXNhVUpCUVZGRExFdEJRVXRMTEVWQlFVd3NTMEZCV1N4RFFVRkRSQ3hWUVVGeVFqdEJRVUZCTEZOQlJIRkNMRU5CUVhaQ08wRkJSMEU3UVVGRFJDeFBRWEJDU0N4RlFYRkNSMUlzU1VGeVFrZ3NRMEZ4UWxFN1FVRkJRU3hsUVVGTkxFMUJRVXRWTEZWQlFVd3NSVUZCVGp0QlFVRkJMRTlCY2tKU08wRkJjMEpFT3pzN2FVTkJRMWs3UVVGRFdIaENMR3RDUVVGWmVVSXNVMEZCV2l4MVIwRkhiMElzUzBGQlMyNUNMR1ZCUVV3c1EwRkJjVUlzUTBGQmNrSXNSVUZCZDBKdlFpeEpRVWcxUXp0QlFXRkJMRmRCUVV0RExHVkJRVXc3UVVGRFJEczdPM05EUVVOcFFqdEJRVU5vUWpGQ0xHVkJRMGRETEdGQlJFZ3NRMEZEYVVJc1owSkJSR3BDTEVWQlJVY3dRaXhuUWtGR1NDeERRVVZ2UWl4UFFVWndRaXhGUVVVMlFpeExRVUZMUXl4WlFVRk1MRU5CUVd0Q1F5eEpRVUZzUWl4RFFVRjFRaXhKUVVGMlFpeERRVVkzUWp0QlFVZEVPenM3YlVOQlEyTTdRVUZCUVRzN1FVRkRZaXhWUVVGSlF5eFhRVUZYT1VJc1UwRkJVME1zWVVGQlZDeERRVUYxUWl4UFFVRjJRaXhEUVVGbU8wRkJRMEVzVlVGQlNXdENMRmRCUVZkdVFpeFRRVUZUUXl4aFFVRlVMRU5CUVhWQ0xGZEJRWFpDTEVOQlFXWTdRVUZEUVN4VlFVRkpiVUlzVTBGQlUzQkNMRk5CUVZORExHRkJRVlFzUTBGQmRVSXNVMEZCZGtJc1EwRkJZanRCUVVOQkxGVkJRVWs0UWl4WlFVTkdMRXRCUVVzeFFpeGxRVUZNTEVOQlFYRkNMRU5CUVhKQ0xFVkJRWGRDTWtJc1lVRkJlRUlzUjBGQmQwTXNTMEZCUzNwQ0xHdENRVVF2UXp0QlFVVkJMRlZCUVVsakxHRkJRV0VzUzBGQlMyaENMR1ZCUVV3c1EwRkJjVUlzUTBGQmNrSXNSVUZCZDBKcFFpeEZRVUY2UXp0QlFVTkJMRlZCUVVsWExHMUNRVUZ0UWl4TFFVRkxOVUlzWlVGQlRDeERRVUZ4UWl4RFFVRnlRaXhGUVVGM1FqWkNMRkZCUVM5RE8wRkJRMEZETEdOQlFWRkRMRTlCUVZJc1IwRkRSM1pDTEVsQlJFZ3NRMEZEVVN4WlFVRk5PMEZCUTFZc1pVRkJTMVlzVDBGQlRDeERRVUZoYTBNc1QwRkJZaXhEUVVGeFFpeFZRVUZEY0VJc1NVRkJSQ3hGUVVGUGNVSXNRMEZCVUN4RlFVRmhPMEZCUTJoRExHTkJRVWx5UWl4TFFVRkxTQ3hOUVVGTUxFdEJRV2RDTEU5QlFVdFNMRmRCUVV3c1EwRkJhVUlzUTBGQmFrSXNSVUZCYjBKUkxFMUJRWGhETEVWQlFXZEVPMEZCUXpsRExHMUNRVUZMV0N4UFFVRk1MRU5CUVdGdlF5eE5RVUZpTEVOQlFXOUNSQ3hEUVVGd1FpeEZRVUYxUWl4RFFVRjJRanRCUVVORU8wRkJRMFlzVTBGS1JEdEJRVXRCTzBGQlEwUXNUMEZTU0N4RlFWTkhla0lzU1VGVVNDeERRVk5STEZsQlFVMDdRVUZEVml4bFFVRlBaaXhIUVVGSE9FSXNXVUZCU0N4RFFVTk1SeXhUUVVSTExFVkJSVXhhTEZOQlFWTnhRaXhMUVVaS0xFVkJSMHh3UWl4UFFVRlBiMElzUzBGSVJpeEZRVWxNYmtJc1ZVRktTeXhGUVV0TVdTeG5Ra0ZNU3l4RlFVMU1MRTlCUVVzNVFpeFBRVTVCTEVOQlFWQTdRVUZSUkN4UFFXeENTQ3hGUVcxQ1IxVXNTVUZ1UWtnc1EwRnRRbEVzV1VGQlRUdEJRVU5XTEdWQlFWRnBRaXhUUVVGVFRpeFRRVUZVTEhWTVFVRlNPMEZCUTBRc1QwRnlRa2dzUlVGelFrZFlMRWxCZEVKSUxFTkJjMEpSTEZsQlFVMDdRVUZEVml4bFFVRlBMRTlCUVVzMFFpdzJRa0ZCVEN4RFFVTk1jRUlzVlVGRVN5eEZRVVZNUml4VFFVRlRjVUlzUzBGR1NpeEZRVWRNY0VJc1QwRkJUMjlDTEV0QlNFWXNRMEZCVUR0QlFVdEVMRTlCTlVKSUxFVkJOa0pITTBJc1NVRTNRa2dzUTBFMlFsRXNXVUZCVFR0QlFVTldMR1ZCUVU5b1FpeEhRVUZIWlN4TFFVRklMRU5CUVZNc1YwRkJWQ3hEUVVGUU8wRkJRMFFzVDBFdlFrZ3NSVUZuUTBkRExFbEJhRU5JTEVOQlowTlJMR1ZCUVU4N1FVRkRXQ3haUVVGSk5rSXNhMEpCUVd0Q05VTXNSMEZCUjI5Q0xIVkNRVUZJTEVOQlEzQkNReXhUUVVGVGNVSXNTMEZFVnl4RlFVVndRbkJDTEU5QlFVOXZRaXhMUVVaaExFTkJRWFJDTzBGQlNVRkhMRmxCUVVsT0xFOUJRVW9zUTBGQldTeFZRVUZEY0VJc1NVRkJSQ3hGUVVGUGNVSXNRMEZCVUN4RlFVRmhPMEZCUTNaQ0xHTkJRVWx5UWl4TFFVRkxTeXhGUVVGTUxFdEJRVmxFTEZWQlFXaENMRVZCUVRSQ08wRkJRekZDU2l4cFFrRkJTMlVzWVVGQlRDeEhRVU5GWml4TFFVRkxaU3hoUVVGTUxFZEJRWEZDTEU5QlFVdDZRaXhyUWtGQk1VSXNSMEZCSzBOdFF5eGxRVVJxUkR0QlFVVkVPMEZCUTBZc1UwRk1SRHRCUVUxQk4wTXNWMEZCUnl0RExFOUJRVWdzUTBGQlZ5eFhRVUZZTEVWQlFYZENSQ3hIUVVGNFFqdEJRVU5FTEU5Qk5VTklMRVZCTmtOSFJTeExRVGREU0N4RFFUWkRVeXhuUWtGQlVUdEJRVU5pWml4cFFrRkJVMDRzVTBGQlZDeDVSRUZCY1VWelFpeEpRVUZ5UlR0QlFVTkVMRTlCTDBOSU8wRkJaMFJFT3pzN2EwUkJRelpDZWtJc1ZTeEZRVUZaUml4UkxFVkJRVlZETEUwc1JVRkJVVHRCUVVNeFJDeFZRVUZKTWtJc1ZVRkJWVHRCUVVOYWFrTXNaMEpCUVZFc1MwRkJTMWdzVDBGQlRDeERRVUZoTmtNc1RVRkJZaXhIUVVGelFpeERRVVJzUWp0QlFVVmFNVUlzV1VGQlNVUXNWVUZHVVR0QlFVZGFSaXhyUWtGQlZVRXNVVUZJUlR0QlFVbGFReXhuUWtGQlVVRTdRVUZLU1N4UFFVRmtPMEZCVFVFc1YwRkJTMnBDTEU5QlFVd3NRMEZCWVRoRExFbEJRV0lzUTBGQmEwSkdMRTlCUVd4Q08wRkJRMEZzUkN4VFFVRkhLME1zVDBGQlNDeERRVUZYTEZWQlFWZ3NSVUZCZFVJc1MwRkJTM3BETEU5QlFUVkNPMEZCUTBRN096czdPenRyUWtGSFdVUXNaMElpTENKbWFXeGxJam9pUldScGRFaHZiR2xrWVhselVHRm5aUzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltbHRjRzl5ZENCRVFpQm1jbTl0SUZ3aUxpOHVMaTkxZEdsc2N5OUVRbHdpTzF4dWFXMXdiM0owSUVKU0lHWnliMjBnWENJdUx5NHVMM1YwYVd4ekwwSjFjMmx1WlhOelVtVnhkV2x5WlcxbGJuUnpYQ0k3WEc1c1pYUWdaR0lnUFNCdVpYY2dSRUlvS1R0Y2JteGxkQ0JpY2lBOUlHNWxkeUJDVWlncE8xeHViR1YwSUhCc1lXTmxVbVZ1WkdWeUlEMGdaRzlqZFcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2loY0lpNTNiM0pyVUd4aFkyVmNJaWs3WEc1Y2JtTnNZWE56SUVWa2FYUkliMnhwWkdGNWMxQmhaMlVnZTF4dUlDQmpiMjV6ZEhKMVkzUnZjaWdwSUh0Y2JpQWdJQ0IwYUdsekxtRnlja1JoZEdVZ1BTQmJYVHRjYmlBZ0lDQjBhR2x6TG1GeWNrVnRjR3h2ZVdWbGN5QTlJRnRkTzF4dUlDQWdJSFJvYVhNdVkzVnljbVZ1ZEVWdGNHeHZlV1ZsSUQwZ1cxMDdYRzRnSUNBZ2RHaHBjeTVqZFhKeVpXNTBSR0YwWlNBOUlGdGRPMXh1SUNBZ0lIUm9hWE11WkdsbVprSmxkSGRsWlc1UGJHUkVZWFJsSUQwZ01EdGNiaUFnZlZ4dUlDQnBibWwwS0NrZ2UxeHVJQ0FnSUd4bGRDQmhjbkpJWVhOb0lEMGdiRzlqWVhScGIyNHVhR0Z6YUM1emNHeHBkQ2hjSWlaY0lpazdYRzRnSUNBZ1pHSmNiaUFnSUNBZ0lDNW1aWFJqYUNoY0ltaHZiR2xrWVhselhDSXBYRzRnSUNBZ0lDQXVkR2hsYmloaGNuSkVZWFJsSUQwK0lIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1aGNuSkVZWFJsSUQwZ1lYSnlSR0YwWlR0Y2JpQWdJQ0FnSUNBZ2JHVjBJR2xrU0c5c2FTQTlJR0Z5Y2toaGMyaGJNRjB1YzJ4cFkyVW9OQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZM1Z5Y21WdWRFUmhkR1VnUFNCaGNuSkVZWFJsTG1acGJIUmxjaWhwZEdWdElEMCtJR2wwWlcwdWFXUkliMnhwSUQwOVBTQXJhV1JJYjJ4cEtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1a2FXWm1RbVYwZDJWbGJrOXNaRVJoZEdVZ1BTQmljaTUwYjBOdmRXNTBSR2xtWmtKbGRIZGxaVzVFWVhSbGN5aGNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxtTjFjbkpsYm5SRVlYUmxXekJkTG1SaGRHVkdjbTl0TEZ4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11WTNWeWNtVnVkRVJoZEdWYk1GMHVaR0YwWlZSdlhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lIMHBYRzRnSUNBZ0lDQXVkR2hsYmlnb0tTQTlQaUJrWWk1bVpYUmphQ2hjSW1WdGNHeHZlV1ZsYzF3aUtTbGNiaUFnSUNBZ0lDNTBhR1Z1S0dGeWNrVnRjR3h2ZVdWbGN5QTlQaUI3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZWEp5Ulcxd2JHOTVaV1Z6SUQwZ1lYSnlSVzF3Ykc5NVpXVnpPMXh1SUNBZ0lDQWdJQ0JzWlhRZ2FXUkZiWEJzYjNsbFpTQTlJR0Z5Y2toaGMyaGJNVjB1YzJ4cFkyVW9PQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZM1Z5Y21WdWRFVnRjR3h2ZVdWbElEMGdZWEp5Ulcxd2JHOTVaV1Z6TG1acGJIUmxjaWhjYmlBZ0lDQWdJQ0FnSUNCcGRHVnRJRDArSUdsMFpXMHVhV1FnUFQwOUlDdHBaRVZ0Y0d4dmVXVmxYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0F1ZEdobGJpZ29LU0E5UGlCMGFHbHpMbkpsYm1SbGNsQmhaMlVvS1NrN1hHNGdJSDFjYmlBZ2NtVnVaR1Z5VUdGblpTZ3BJSHRjYmlBZ0lDQndiR0ZqWlZKbGJtUmxjaTVwYm01bGNraFVUVXdnUFNCZ1hHNGdJQ0FnSUNBZ0lEeGthWFlnWTJ4aGMzTTlYQ0pqYjI1MFlXbHVaWEpjSWo1Y2JpQWdJQ0FnSUNBZ1BHUnBkaUJqYkdGemN6MWNJbVp2Y20wdFozSnZkWEJjSWo1Y2JpQWdJQ0FnSUNBZ0lDQWdJRHhzWVdKbGJENDhZajRrZTNSb2FYTXVZM1Z5Y21WdWRFVnRjR3h2ZVdWbFd6QmRMbTVoYldWOVBDOWlQand2YkdGaVpXdytQR0p5UGx4dUlDQWdJQ0FnSUNBZ0lDQWdQR3hoWW1Wc0lHWnZjajFjSW1SaGRHVkdjbTl0WENJKzBKVFFzTkdDMExBZzBMM1FzTkdIMExEUXU5QytJTkMrMFlMUXY5R0QwWUhRdXRDd09pQThMMnhoWW1Wc1BseHVJQ0FnSUNBZ0lDQWdJQ0FnUEdsdWNIVjBJSFI1Y0dVOVhDSmtZWFJsWENJZ2JtRnRaVDFjSW1OaGJHVnVaR0Z5WENJZ1kyeGhjM005WENKa1lYUmxSbkp2YlNCbWIzSnRMV052Ym5SeWIyeGNJaUJwWkQxY0ltUmhkR1ZHY205dFhDSStYRzRnSUNBZ0lDQWdJQ0FnSUNBOGJHRmlaV3dnWm05eVBWd2laR0YwWlZSdlhDSSswSlRRc05HQzBMQWcwTHJRdnRDOTBZYlFzQ0RRdnRHQzBML1JnOUdCMExyUXNEd3ZiR0ZpWld3K1hHNGdJQ0FnSUNBZ0lDQWdJQ0E4YVc1d2RYUWdkSGx3WlQxY0ltUmhkR1ZjSWlCdVlXMWxQVndpWTJGc1pXNWtZWEpjSWlCamJHRnpjejFjSW1SaGRHVlVieUJtYjNKdExXTnZiblJ5YjJ4Y0lpQnBaRDFjSW1SaGRHVlViMXdpUGx4dUlDQWdJQ0FnSUNBZ0lDQWdQR1JwZGlCamJHRnpjejFjSW1sdVptOWNJajQ4TDJScGRqNWNiaUFnSUNBZ0lDQWdJQ0FnSUR4cGJuQjFkQ0JqYkdGemN6MWNJbk4xWW0xcGRFaHZiR2xrWVhrZ1luUnVJR0owYmkxdmRYUnNhVzVsTFhCeWFXMWhjbmxjSWlCMGVYQmxQVndpYzNWaWJXbDBYQ0lnZG1Gc2RXVTlYQ0pUZFdKdGFYUmNJajVjYmlBZ0lDQWdJQ0FnUEM5a2FYWStYRzRnSUNBZ1BDOWthWFkrWEc0Z0lDQWdJQ0FnSUNBZ1lEdGNiaUFnSUNCMGFHbHpMbUZrWkVoaGJtUnNaWEpGZG1WdWRDZ3BPMXh1SUNCOVhHNGdJR0ZrWkVoaGJtUnNaWEpGZG1WdWRDZ3BJSHRjYmlBZ0lDQmtiMk4xYldWdWRGeHVJQ0FnSUNBZ0xuRjFaWEo1VTJWc1pXTjBiM0lvWENJdWMzVmliV2wwU0c5c2FXUmhlVndpS1Z4dUlDQWdJQ0FnTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvWENKamJHbGphMXdpTENCMGFHbHpMbU5vWldOcmFXNW5SR0YwWVM1aWFXNWtLSFJvYVhNcEtUdGNiaUFnZlZ4dUlDQmphR1ZqYTJsdVowUmhkR0VvS1NCN1hHNGdJQ0FnYkdWMElITndZVzVKYm1adklEMGdaRzlqZFcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2loY0lpNXBibVp2WENJcE8xeHVJQ0FnSUd4bGRDQmtZWFJsUm5KdmJTQTlJR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNJb1hDSXVaR0YwWlVaeWIyMWNJaWs3WEc0Z0lDQWdiR1YwSUdSaGRHVlVieUE5SUdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSW9YQ0l1WkdGMFpWUnZYQ0lwTzF4dUlDQWdJR3hsZENCamIzVnVkRVJoZVhNZ1BWeHVJQ0FnSUNBZ2RHaHBjeTVqZFhKeVpXNTBSVzF3Ykc5NVpXVmJNRjB1WTI5MWJuUkVZWGx6U0c5c2FTQXJJSFJvYVhNdVpHbG1aa0psZEhkbFpXNVBiR1JFWVhSbE8xeHVJQ0FnSUd4bGRDQnBaRVZ0Y0d4dmVXVmxJRDBnZEdocGN5NWpkWEp5Wlc1MFJXMXdiRzk1WldWYk1GMHVhV1E3WEc0Z0lDQWdiR1YwSUhCdmMybDBhVzl1Ulcxd2JHOTVaV1VnUFNCMGFHbHpMbU4xY25KbGJuUkZiWEJzYjNsbFpWc3dYUzV3YjNOcGRHbHZianRjYmlBZ0lDQlFjbTl0YVhObExuSmxjMjlzZG1Vb0tWeHVJQ0FnSUNBZ0xuUm9aVzRvS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtRnlja1JoZEdVdVptOXlSV0ZqYUNnb2FYUmxiU3dnYVNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHBkR1Z0TG1sa1NHOXNhU0E5UFQwZ2RHaHBjeTVqZFhKeVpXNTBSR0YwWlZzd1hTNXBaRWh2YkdrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZWEp5UkdGMFpTNXpjR3hwWTJVb2FTd2dNU2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdmU2xjYmlBZ0lDQWdJQzUwYUdWdUtDZ3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdKeUxtTm9aV05yYVc1blJHRjBZU2hjYmlBZ0lDQWdJQ0FnSUNCamIzVnVkRVJoZVhNc1hHNGdJQ0FnSUNBZ0lDQWdaR0YwWlVaeWIyMHVkbUZzZFdVc1hHNGdJQ0FnSUNBZ0lDQWdaR0YwWlZSdkxuWmhiSFZsTEZ4dUlDQWdJQ0FnSUNBZ0lHbGtSVzF3Ykc5NVpXVXNYRzRnSUNBZ0lDQWdJQ0FnY0c5emFYUnBiMjVGYlhCc2IzbGxaU3hjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbUZ5Y2tSaGRHVmNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0F1ZEdobGJpZ29LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlBb2MzQmhia2x1Wm04dWFXNXVaWEpJVkUxTUlEMGdZRHhrYVhZZ1kyeGhjM005WENKaGJHVnlkQ0JoYkdWeWRDMXpkV05qWlhOelhDSWdjbTlzWlQxY0ltRnNaWEowWENJKzBLSFJoOUN3MFlIUmd0QzcwTGpRc3RDKzBMUFF2aURRa3RDdzBMd2cwTDdSZ3RDMDBZdlJoZEN3UEM5a2FYWStZQ2s3WEc0Z0lDQWdJQ0I5S1Z4dUlDQWdJQ0FnTG5Sb1pXNG9LQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVoWkdSRmJYQnNiM2xsWlVGbWRHVnlRMmhsWTJ0cGJtZFdZV3hwWkNoY2JpQWdJQ0FnSUNBZ0lDQnBaRVZ0Y0d4dmVXVmxMRnh1SUNBZ0lDQWdJQ0FnSUdSaGRHVkdjbTl0TG5aaGJIVmxMRnh1SUNBZ0lDQWdJQ0FnSUdSaGRHVlVieTUyWVd4MVpWeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdmU2xjYmlBZ0lDQWdJQzUwYUdWdUtDZ3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdSaUxtWmxkR05vS0Z3aVpXMXdiRzk1WldWelhDSXBPMXh1SUNBZ0lDQWdmU2xjYmlBZ0lDQWdJQzUwYUdWdUtHRnljaUE5UGlCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JrYVdabVFtVjBkMlZsYmtSaGRHVWdQU0JpY2k1MGIwTnZkVzUwUkdsbVprSmxkSGRsWlc1RVlYUmxjeWhjYmlBZ0lDQWdJQ0FnSUNCa1lYUmxSbkp2YlM1MllXeDFaU3hjYmlBZ0lDQWdJQ0FnSUNCa1lYUmxWRzh1ZG1Gc2RXVmNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnWVhKeUxtWnZja1ZoWTJnb0tHbDBaVzBzSUdrcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9hWFJsYlM1cFpDQTlQVDBnYVdSRmJYQnNiM2xsWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVhSbGJTNWpiM1Z1ZEVSaGVYTkliMnhwSUQxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYVhSbGJTNWpiM1Z1ZEVSaGVYTkliMnhwSUNzZ2RHaHBjeTVrYVdabVFtVjBkMlZsYms5c1pFUmhkR1VnTFNCa2FXWm1RbVYwZDJWbGJrUmhkR1U3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnWkdJdWMyVjBTWFJsYlNoY0ltVnRjR3h2ZVdWbGMxd2lMQ0JoY25JcE8xeHVJQ0FnSUNBZ2ZTbGNiaUFnSUNBZ0lDNWpZWFJqYUNocGJtWnZJRDArSUh0Y2JpQWdJQ0FnSUNBZ2MzQmhia2x1Wm04dWFXNXVaWEpJVkUxTUlEMGdZRHhrYVhZZ1kyeGhjM005WENKaGJHVnlkQ0JoYkdWeWRDMWtZVzVuWlhKY0lpQnliMnhsUFZ3aVlXeGxjblJjSWo0a2UybHVabTk5UEM5a2FYWStZRHRjYmlBZ0lDQWdJSDBwTzF4dUlDQjlYRzRnSUdGa1pFVnRjR3h2ZVdWbFFXWjBaWEpEYUdWamEybHVaMVpoYkdsa0tHbGtSVzF3Ykc5NVpXVXNJR1JoZEdWR2NtOXRMQ0JrWVhSbFZHOHBJSHRjYmlBZ0lDQnNaWFFnYUc5c2FXUmhlU0E5SUh0Y2JpQWdJQ0FnSUdsa1NHOXNhVG9nZEdocGN5NWhjbkpFWVhSbExteGxibWQwYUNBcklERXNYRzRnSUNBZ0lDQnBaRG9nYVdSRmJYQnNiM2xsWlN4Y2JpQWdJQ0FnSUdSaGRHVkdjbTl0T2lCa1lYUmxSbkp2YlN4Y2JpQWdJQ0FnSUdSaGRHVlViem9nWkdGMFpWUnZYRzRnSUNBZ2ZUdGNiaUFnSUNCMGFHbHpMbUZ5Y2tSaGRHVXVjSFZ6YUNob2IyeHBaR0Y1S1R0Y2JpQWdJQ0JrWWk1elpYUkpkR1Z0S0Z3aWFHOXNhV1JoZVhOY0lpd2dkR2hwY3k1aGNuSkVZWFJsS1R0Y2JpQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCRlpHbDBTRzlzYVdSaGVYTlFZV2RsTzF4dUlsMTlcbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiZS9VKzk3XCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvY29tcG9uZW50c1xcXFxFZGl0SG9saWRheXNQYWdlLmpzXCIsXCIvY29tcG9uZW50c1wiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX0RCID0gcmVxdWlyZShcIi4vLi4vdXRpbHMvREJcIik7XG5cbnZhciBfREIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfREIpO1xuXG52YXIgX0J1c2luZXNzUmVxdWlyZW1lbnRzID0gcmVxdWlyZShcIi4vLi4vdXRpbHMvQnVzaW5lc3NSZXF1aXJlbWVudHNcIik7XG5cbnZhciBfQnVzaW5lc3NSZXF1aXJlbWVudHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQnVzaW5lc3NSZXF1aXJlbWVudHMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgZGIgPSBuZXcgX0RCMi5kZWZhdWx0KCk7XG52YXIgYnIgPSBuZXcgX0J1c2luZXNzUmVxdWlyZW1lbnRzMi5kZWZhdWx0KCk7XG52YXIgcGxhY2VSZW5kZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLndvcmtQbGFjZVwiKTtcblxudmFyIEhvbGlkYXlzUGFnZSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gSG9saWRheXNQYWdlKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBIb2xpZGF5c1BhZ2UpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEhvbGlkYXlzUGFnZSwgW3tcbiAgICBrZXk6IFwicmVuZGVyUGFnZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJQYWdlKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgZGIuZmV0Y2goXCJlbXBsb3llZXNcIikudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB2YXIgc2VsZWN0ID0gXCI8c2VsZWN0IGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiIGlkPVxcXCJleGFtcGxlRm9ybUNvbnRyb2xTZWxlY3QxXFxcIj5cIjtcbiAgICAgICAgZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgc2VsZWN0ICs9IFwiPG9wdGlvbj5cIiArIGVsZW1lbnQubmFtZSArIFwiPC9vcHRpb24+XCI7XG4gICAgICAgIH0sIF90aGlzKTtcbiAgICAgICAgcGxhY2VSZW5kZXIuaW5uZXJIVE1MID0gXCJcXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJjb250YWluZXJcXFwiPlxcbiAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcbiAgICAgICAgICA8bGFiZWwgZm9yPVxcXCJleGFtcGxlRm9ybUNvbnRyb2xTZWxlY3QxXFxcIj5cXHUwNDEyXFx1MDQ0QlxcdTA0MzFcXHUwNDNFXFx1MDQ0MCBcXHUwNDQxXFx1MDQzRVxcdTA0NDJcXHUwNDQwXFx1MDQ0M1xcdTA0MzRcXHUwNDNEXFx1MDQzOFxcdTA0M0FcXHUwNDMwPC9sYWJlbD5cXG4gICAgICAgICAgXCIgKyBzZWxlY3QgKyBcIlxcbiAgICAgICAgICA8L3NlbGVjdD5cXG4gICAgICAgICAgPGxhYmVsIGZvcj1cXFwiZGF0ZUZyb21cXFwiPlxcdTA0MTRcXHUwNDMwXFx1MDQ0MlxcdTA0MzAgXFx1MDQzRFxcdTA0MzBcXHUwNDQ3XFx1MDQzMFxcdTA0M0JcXHUwNDNFIFxcdTA0M0VcXHUwNDQyXFx1MDQzRlxcdTA0NDNcXHUwNDQxXFx1MDQzQVxcdTA0MzA6IDwvbGFiZWw+XFxuICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJkYXRlXFxcIiBuYW1lPVxcXCJjYWxlbmRhclxcXCIgY2xhc3M9XFxcImRhdGVGcm9tIGZvcm0tY29udHJvbFxcXCIgaWQ9XFxcImRhdGVGcm9tXFxcIj5cXG4gICAgICAgICAgPGxhYmVsIGZvcj1cXFwiZGF0ZVRvXFxcIj5cXHUwNDE0XFx1MDQzMFxcdTA0NDJcXHUwNDMwIFxcdTA0M0FcXHUwNDNFXFx1MDQzRFxcdTA0NDZcXHUwNDMwIFxcdTA0M0VcXHUwNDQyXFx1MDQzRlxcdTA0NDNcXHUwNDQxXFx1MDQzQVxcdTA0MzA8L2xhYmVsPlxcbiAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwiZGF0ZVxcXCIgbmFtZT1cXFwiY2FsZW5kYXJcXFwiIGNsYXNzPVxcXCJkYXRlVG8gZm9ybS1jb250cm9sXFxcIiBpZD1cXFwiZGF0ZVRvXFxcIj5cXG4gICAgICAgICAgPGRpdiBjbGFzcz1cXFwiaW5mb1xcXCI+PC9kaXY+XFxuICAgICAgICAgIDxpbnB1dCBjbGFzcz1cXFwic3VibWl0SG9saWRheSBidG4gYnRuLW91dGxpbmUtcHJpbWFyeVxcXCIgdHlwZT1cXFwic3VibWl0XFxcIiB2YWx1ZT1cXFwiU3VibWl0XFxcIj5cXG4gICAgICA8L2Rpdj5cXG4gIDwvZGl2PlxcbiAgICAgICAgXCI7XG4gICAgICAgIF90aGlzLmFkZEhhbmRsZXJFdmVudCgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImFkZEhhbmRsZXJFdmVudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRIYW5kbGVyRXZlbnQoKSB7XG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnN1Ym1pdEhvbGlkYXlcIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuY2hlY2tpbmdEYXRhLmJpbmQodGhpcykpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjaGVja2luZ0RhdGFcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2hlY2tpbmdEYXRhKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBjb3VudERheXMgPSB2b2lkIDAsXG4gICAgICAgICAgaWRFbXBsb3llZSA9IHZvaWQgMCxcbiAgICAgICAgICBwb3NpdGlvbkVtcGxveWVlID0gdm9pZCAwO1xuICAgICAgdmFyIHNwYW5JbmZvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5pbmZvXCIpO1xuICAgICAgdmFyIGRhdGVGcm9tID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5kYXRlRnJvbVwiKTtcbiAgICAgIHZhciBkYXRlVG8gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmRhdGVUb1wiKTtcbiAgICAgIHZhciBzZWxlY3RFbXBsb3llZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZXhhbXBsZUZvcm1Db250cm9sU2VsZWN0MVwiKTtcbiAgICAgIHZhciB2YWxTZWxlY3RFbXBsb3llZSA9IHNlbGVjdEVtcGxveWVlLm9wdGlvbnNbc2VsZWN0RW1wbG95ZWUuc2VsZWN0ZWRJbmRleF0udmFsdWU7XG4gICAgICBkYi5mZXRjaChcImVtcGxveWVlc1wiKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIGRhdGEuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgIGlmIChlbGVtZW50Lm5hbWUgPT09IHZhbFNlbGVjdEVtcGxveWVlKSB7XG4gICAgICAgICAgICBpZEVtcGxveWVlID0gZWxlbWVudC5pZDtcbiAgICAgICAgICAgIHBvc2l0aW9uRW1wbG95ZWUgPSBlbGVtZW50LnBvc2l0aW9uO1xuICAgICAgICAgICAgcmV0dXJuIGNvdW50RGF5cyA9IGVsZW1lbnQuY291bnREYXlzSG9saTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBici5jaGVja2luZ0RhdGEoY291bnREYXlzLCBkYXRlRnJvbS52YWx1ZSwgZGF0ZVRvLnZhbHVlLCBpZEVtcGxveWVlLCBwb3NpdGlvbkVtcGxveWVlKTtcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gc3BhbkluZm8uaW5uZXJIVE1MID0gXCI8ZGl2IGNsYXNzPVxcXCJhbGVydCBhbGVydC1zdWNjZXNzXFxcIiByb2xlPVxcXCJhbGVydFxcXCI+XFx1MDQyMVxcdTA0NDdcXHUwNDMwXFx1MDQ0MVxcdTA0NDJcXHUwNDNCXFx1MDQzOFxcdTA0MzJcXHUwNDNFXFx1MDQzM1xcdTA0M0UgXFx1MDQxMlxcdTA0MzBcXHUwNDNDIFxcdTA0M0VcXHUwNDQyXFx1MDQzNFxcdTA0NEJcXHUwNDQ1XFx1MDQzMDwvZGl2PlwiO1xuICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczIuYWRkRW1wbG95ZWVBZnRlckNoZWNraW5nVmFsaWQoaWRFbXBsb3llZSwgZGF0ZUZyb20udmFsdWUsIGRhdGVUby52YWx1ZSk7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGRiLmZldGNoKFwiZW1wbG95ZWVzXCIpO1xuICAgICAgfSkudGhlbihmdW5jdGlvbiAoYXJyKSB7XG4gICAgICAgIHZhciBkaWZmQmV0d2VlbkRhdGUgPSBici50b0NvdW50RGlmZkJldHdlZW5EYXRlcyhkYXRlRnJvbS52YWx1ZSwgZGF0ZVRvLnZhbHVlKTtcbiAgICAgICAgYXJyLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGkpIHtcbiAgICAgICAgICBpZiAoaXRlbS5pZCA9PT0gaWRFbXBsb3llZSkge1xuICAgICAgICAgICAgaXRlbS5jb3VudERheXNIb2xpID0gaXRlbS5jb3VudERheXNIb2xpIC0gZGlmZkJldHdlZW5EYXRlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGRiLnNldEl0ZW0oXCJlbXBsb3llZXNcIiwgYXJyKTtcbiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChpbmZvKSB7XG4gICAgICAgIHNwYW5JbmZvLmlubmVySFRNTCA9IFwiPGRpdiBjbGFzcz1cXFwiYWxlcnQgYWxlcnQtZGFuZ2VyXFxcIiByb2xlPVxcXCJhbGVydFxcXCI+XCIgKyBpbmZvICsgXCI8L2Rpdj5cIjtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJhZGRFbXBsb3llZUFmdGVyQ2hlY2tpbmdWYWxpZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRFbXBsb3llZUFmdGVyQ2hlY2tpbmdWYWxpZChpZEVtcGxveWVlLCBkYXRlRnJvbSwgZGF0ZVRvKSB7XG4gICAgICBkYi5mZXRjaChcImhvbGlkYXlzXCIpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgdmFyIGhvbGlkYXkgPSB7XG4gICAgICAgICAgaWRIb2xpOiBkYXRhLmxlbmd0aCArIDEsXG4gICAgICAgICAgaWQ6IGlkRW1wbG95ZWUsXG4gICAgICAgICAgZGF0ZUZyb206IGRhdGVGcm9tLFxuICAgICAgICAgIGRhdGVUbzogZGF0ZVRvXG4gICAgICAgIH07XG4gICAgICAgIGRhdGEucHVzaChob2xpZGF5KTtcbiAgICAgICAgZGIuc2V0SXRlbShcImhvbGlkYXlzXCIsIGRhdGEpO1xuICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaG9saWRheSA9IFt7XG4gICAgICAgICAgaWRIb2xpOiAxLFxuICAgICAgICAgIGlkOiBpZEVtcGxveWVlLFxuICAgICAgICAgIGRhdGVGcm9tOiBkYXRlRnJvbSxcbiAgICAgICAgICBkYXRlVG86IGRhdGVUb1xuICAgICAgICB9XTtcbiAgICAgICAgZGIuc2V0SXRlbShcImhvbGlkYXlzXCIsIGhvbGlkYXkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEhvbGlkYXlzUGFnZTtcbn0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gSG9saWRheXNQYWdlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtodmJHbGtZWGx6VUdGblpTNXFjeUpkTENKdVlXMWxjeUk2V3lKa1lpSXNJbUp5SWl3aWNHeGhZMlZTWlc1a1pYSWlMQ0prYjJOMWJXVnVkQ0lzSW5GMVpYSjVVMlZzWldOMGIzSWlMQ0pJYjJ4cFpHRjVjMUJoWjJVaUxDSm1aWFJqYUNJc0luUm9aVzRpTENKelpXeGxZM1FpTENKa1lYUmhJaXdpWm05eVJXRmphQ0lzSW1Wc1pXMWxiblFpTENKdVlXMWxJaXdpYVc1dVpYSklWRTFNSWl3aVlXUmtTR0Z1Wkd4bGNrVjJaVzUwSWl3aVlXUmtSWFpsYm5STWFYTjBaVzVsY2lJc0ltTm9aV05yYVc1blJHRjBZU0lzSW1KcGJtUWlMQ0pqYjNWdWRFUmhlWE1pTENKcFpFVnRjR3h2ZVdWbElpd2ljRzl6YVhScGIyNUZiWEJzYjNsbFpTSXNJbk53WVc1SmJtWnZJaXdpWkdGMFpVWnliMjBpTENKa1lYUmxWRzhpTENKelpXeGxZM1JGYlhCc2IzbGxaU0lzSW5aaGJGTmxiR1ZqZEVWdGNHeHZlV1ZsSWl3aWIzQjBhVzl1Y3lJc0luTmxiR1ZqZEdWa1NXNWtaWGdpTENKMllXeDFaU0lzSW1sa0lpd2ljRzl6YVhScGIyNGlMQ0pqYjNWdWRFUmhlWE5JYjJ4cElpd2lZV1JrUlcxd2JHOTVaV1ZCWm5SbGNrTm9aV05yYVc1blZtRnNhV1FpTENKa2FXWm1RbVYwZDJWbGJrUmhkR1VpTENKMGIwTnZkVzUwUkdsbVprSmxkSGRsWlc1RVlYUmxjeUlzSW1GeWNpSXNJbWwwWlcwaUxDSnBJaXdpYzJWMFNYUmxiU0lzSW1OaGRHTm9JaXdpYVc1bWJ5SXNJbWh2Ykdsa1lYa2lMQ0pwWkVodmJHa2lMQ0pzWlc1bmRHZ2lMQ0p3ZFhOb0lsMHNJbTFoY0hCcGJtZHpJam9pT3pzN096czdPenRCUVVGQk96czdPMEZCUTBFN096czdPenM3TzBGQlEwRXNTVUZCU1VFc1MwRkJTeXhyUWtGQlZEdEJRVU5CTEVsQlFVbERMRXRCUVVzc2IwTkJRVlE3UVVGRFFTeEpRVUZKUXl4alFVRmpReXhUUVVGVFF5eGhRVUZVTEVOQlFYVkNMRmxCUVhaQ0xFTkJRV3hDT3p0SlFVVk5ReXhaT3pzN096czdPMmxEUVVOVE8wRkJRVUU3TzBGQlExaE1MRk5CUVVkTkxFdEJRVWdzUTBGQlV5eFhRVUZVTEVWQlFYTkNReXhKUVVGMFFpeERRVUV5UWl4blFrRkJVVHRCUVVOcVF5eFpRVUZKUXl3eVJVRkJTanRCUVVOQlF5eGhRVUZMUXl4UFFVRk1MRU5CUVdFc2JVSkJRVmM3UVVGRGRFSkdMR2xEUVVGeFFrY3NVVUZCVVVNc1NVRkJOMEk3UVVGRFJDeFRRVVpFTzBGQlIwRldMRzlDUVVGWlZ5eFRRVUZhTEN0UFFVbE5UQ3hOUVVwT08wRkJaVUVzWTBGQlMwMHNaVUZCVER0QlFVTkVMRTlCY2tKRU8wRkJjMEpFT3pzN2MwTkJRMmxDTzBGQlEyaENXQ3hsUVVOSFF5eGhRVVJJTEVOQlEybENMR2RDUVVScVFpeEZRVVZIVnl4blFrRkdTQ3hEUVVWdlFpeFBRVVp3UWl4RlFVVTJRaXhMUVVGTFF5eFpRVUZNTEVOQlFXdENReXhKUVVGc1FpeERRVUYxUWl4SlFVRjJRaXhEUVVZM1FqdEJRVWRFT3pzN2JVTkJRMk03UVVGQlFUczdRVUZEWWl4VlFVRkpReXhyUWtGQlNqdEJRVUZCTEZWQlFXVkRMRzFDUVVGbU8wRkJRVUVzVlVGQk1rSkRMSGxDUVVFelFqdEJRVU5CTEZWQlFVbERMRmRCUVZkc1FpeFRRVUZUUXl4aFFVRlVMRU5CUVhWQ0xFOUJRWFpDTEVOQlFXWTdRVUZEUVN4VlFVRkphMElzVjBGQlYyNUNMRk5CUVZORExHRkJRVlFzUTBGQmRVSXNWMEZCZGtJc1EwRkJaanRCUVVOQkxGVkJRVWx0UWl4VFFVRlRjRUlzVTBGQlUwTXNZVUZCVkN4RFFVRjFRaXhUUVVGMlFpeERRVUZpTzBGQlEwRXNWVUZCU1c5Q0xHbENRVUZwUW5KQ0xGTkJRVk5ETEdGQlFWUXNRMEZCZFVJc05FSkJRWFpDTEVOQlFYSkNPMEZCUTBFc1ZVRkJTWEZDTEc5Q1FVTkdSQ3hsUVVGbFJTeFBRVUZtTEVOQlFYVkNSaXhsUVVGbFJ5eGhRVUYwUXl4RlFVRnhSRU1zUzBGRWRrUTdRVUZGUVRWQ0xGTkJRMGROTEV0QlJFZ3NRMEZEVXl4WFFVUlVMRVZCUlVkRExFbEJSa2dzUTBGRlVTeG5Ra0ZCVVR0QlFVTmFSU3hoUVVGTFF5eFBRVUZNTEVOQlFXRXNiVUpCUVZjN1FVRkRkRUlzWTBGQlNVTXNVVUZCVVVNc1NVRkJVaXhMUVVGcFFtRXNhVUpCUVhKQ0xFVkJRWGRETzBGQlEzUkRUaXg1UWtGQllWSXNVVUZCVVd0Q0xFVkJRWEpDTzBGQlEwRlVMQ3RDUVVGdFFsUXNVVUZCVVcxQ0xGRkJRVE5DTzBGQlEwRXNiVUpCUVZGYUxGbEJRVmxRTEZGQlFWRnZRaXhoUVVFMVFqdEJRVU5FTzBGQlEwWXNVMEZPUkR0QlFVOUVMRTlCVmtnc1JVRlhSM2hDTEVsQldFZ3NRMEZYVVN4WlFVRk5PMEZCUTFZc1pVRkJUMDRzUjBGQlIyVXNXVUZCU0N4RFFVTk1SU3hUUVVSTExFVkJSVXhKTEZOQlFWTk5MRXRCUmtvc1JVRkhURXdzVDBGQlQwc3NTMEZJUml4RlFVbE1WQ3hWUVVwTExFVkJTMHhETEdkQ1FVeExMRU5CUVZBN1FVRlBSQ3hQUVc1Q1NDeEZRVzlDUjJJc1NVRndRa2dzUTBGdlFsRXNXVUZCVFR0QlFVTldMR1ZCUVZGakxGTkJRVk5TTEZOQlFWUXNkVXhCUVZJN1FVRkRSQ3hQUVhSQ1NDeEZRWFZDUjA0c1NVRjJRa2dzUTBGMVFsRXNXVUZCVFR0QlFVTldMR1ZCUVU4c1QwRkJTM2xDTERaQ1FVRk1MRU5CUTB4aUxGVkJSRXNzUlVGRlRFY3NVMEZCVTAwc1MwRkdTaXhGUVVkTVRDeFBRVUZQU3l4TFFVaEdMRU5CUVZBN1FVRkxSQ3hQUVRkQ1NDeEZRVGhDUjNKQ0xFbEJPVUpJTEVOQk9FSlJMRmxCUVUwN1FVRkRWaXhsUVVGUFVDeEhRVUZIVFN4TFFVRklMRU5CUVZNc1YwRkJWQ3hEUVVGUU8wRkJRMFFzVDBGb1EwZ3NSVUZwUTBkRExFbEJha05JTEVOQmFVTlJMR1ZCUVU4N1FVRkRXQ3haUVVGSk1FSXNhMEpCUVd0Q2FFTXNSMEZCUjJsRExIVkNRVUZJTEVOQlEzQkNXaXhUUVVGVFRTeExRVVJYTEVWQlJYQkNUQ3hQUVVGUFN5eExRVVpoTEVOQlFYUkNPMEZCU1VGUExGbEJRVWw2UWl4UFFVRktMRU5CUVZrc1ZVRkJRekJDTEVsQlFVUXNSVUZCVDBNc1EwRkJVQ3hGUVVGaE8wRkJRM1pDTEdOQlFVbEVMRXRCUVV0UUxFVkJRVXdzUzBGQldWWXNWVUZCYUVJc1JVRkJORUk3UVVGRE1VSnBRaXhwUWtGQlMwd3NZVUZCVEN4SFFVRnhRa3NzUzBGQlMwd3NZVUZCVEN4SFFVRnhRa1VzWlVGQk1VTTdRVUZEUkR0QlFVTkdMRk5CU2tRN1FVRkxRV3BETEZkQlFVZHpReXhQUVVGSUxFTkJRVmNzVjBGQldDeEZRVUYzUWtnc1IwRkJlRUk3UVVGRFJDeFBRVFZEU0N4RlFUWkRSMGtzUzBFM1EwZ3NRMEUyUTFNc1owSkJRVkU3UVVGRFlteENMR2xDUVVGVFVpeFRRVUZVTEhsRVFVRnhSVEpDTEVsQlFYSkZPMEZCUTBRc1QwRXZRMGc3UVVGblJFUTdPenRyUkVGRE5rSnlRaXhWTEVWQlFWbEhMRkVzUlVGQlZVTXNUU3hGUVVGUk8wRkJRekZFZGtJc1UwRkRSMDBzUzBGRVNDeERRVU5UTEZWQlJGUXNSVUZGUjBNc1NVRkdTQ3hEUVVWUkxHZENRVUZSTzBGQlExb3NXVUZCU1d0RExGVkJRVlU3UVVGRFdrTXNhMEpCUVZGcVF5eExRVUZMYTBNc1RVRkJUQ3hIUVVGakxFTkJSRlk3UVVGRldtUXNZMEZCU1ZZc1ZVRkdVVHRCUVVkYVJ5eHZRa0ZCVlVFc1VVRklSVHRCUVVsYVF5eHJRa0ZCVVVFN1FVRktTU3hUUVVGa08wRkJUVUZrTEdGQlFVdHRReXhKUVVGTUxFTkJRVlZJTEU5QlFWWTdRVUZEUVhwRExGZEJRVWR6UXl4UFFVRklMRU5CUVZjc1ZVRkJXQ3hGUVVGMVFqZENMRWxCUVhaQ08wRkJRMFFzVDBGWVNDeEZRVmxIT0VJc1MwRmFTQ3hEUVZsVExGbEJRVTA3UVVGRFdDeFpRVUZKUlN4VlFVRlZMRU5CUTFvN1FVRkRSVU1zYTBKQlFWRXNRMEZFVmp0QlFVVkZZaXhqUVVGSlZpeFZRVVpPTzBGQlIwVkhMRzlDUVVGVlFTeFJRVWhhTzBGQlNVVkRMR3RDUVVGUlFUdEJRVXBXTEZOQlJGa3NRMEZCWkR0QlFWRkJka0lzVjBGQlIzTkRMRTlCUVVnc1EwRkJWeXhWUVVGWUxFVkJRWFZDUnl4UFFVRjJRanRCUVVORUxFOUJkRUpJTzBGQmRVSkVPenM3T3pzN2EwSkJSMWx3UXl4Wklpd2labWxzWlNJNklraHZiR2xrWVhselVHRm5aUzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltbHRjRzl5ZENCRVFpQm1jbTl0SUZ3aUxpOHVMaTkxZEdsc2N5OUVRbHdpTzF4dWFXMXdiM0owSUVKMWMybHVaWE56VW1WeGRXbHlaVzFsYm5SeklHWnliMjBnWENJdUx5NHVMM1YwYVd4ekwwSjFjMmx1WlhOelVtVnhkV2x5WlcxbGJuUnpYQ0k3WEc1c1pYUWdaR0lnUFNCdVpYY2dSRUlvS1R0Y2JteGxkQ0JpY2lBOUlHNWxkeUJDZFhOcGJtVnpjMUpsY1hWcGNtVnRaVzUwY3lncE8xeHViR1YwSUhCc1lXTmxVbVZ1WkdWeUlEMGdaRzlqZFcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2loY0lpNTNiM0pyVUd4aFkyVmNJaWs3WEc1Y2JtTnNZWE56SUVodmJHbGtZWGx6VUdGblpTQjdYRzRnSUhKbGJtUmxjbEJoWjJVb0tTQjdYRzRnSUNBZ1pHSXVabVYwWTJnb1hDSmxiWEJzYjNsbFpYTmNJaWt1ZEdobGJpaGtZWFJoSUQwK0lIdGNiaUFnSUNBZ0lHeGxkQ0J6Wld4bFkzUWdQU0JnUEhObGJHVmpkQ0JqYkdGemN6MWNJbVp2Y20wdFkyOXVkSEp2YkZ3aUlHbGtQVndpWlhoaGJYQnNaVVp2Y20xRGIyNTBjbTlzVTJWc1pXTjBNVndpUG1BN1hHNGdJQ0FnSUNCa1lYUmhMbVp2Y2tWaFkyZ29aV3hsYldWdWRDQTlQaUI3WEc0Z0lDQWdJQ0FnSUhObGJHVmpkQ0FyUFNCZ1BHOXdkR2x2Ymo0a2UyVnNaVzFsYm5RdWJtRnRaWDA4TDI5d2RHbHZiajVnTzF4dUlDQWdJQ0FnZlN3Z2RHaHBjeWs3WEc0Z0lDQWdJQ0J3YkdGalpWSmxibVJsY2k1cGJtNWxja2hVVFV3Z1BTQmdYRzRnSUNBZ0lDQThaR2wySUdOc1lYTnpQVndpWTI5dWRHRnBibVZ5WENJK1hHNGdJQ0FnSUNBOFpHbDJJR05zWVhOelBWd2labTl5YlMxbmNtOTFjRndpUGx4dUlDQWdJQ0FnSUNBZ0lEeHNZV0psYkNCbWIzSTlYQ0psZUdGdGNHeGxSbTl5YlVOdmJuUnliMnhUWld4bFkzUXhYQ0krMEpMUmk5Q3gwTDdSZ0NEUmdkQyswWUxSZ05HRDBMVFF2ZEM0MExyUXNEd3ZiR0ZpWld3K1hHNGdJQ0FnSUNBZ0lDQWdKSHR6Wld4bFkzUjlYRzRnSUNBZ0lDQWdJQ0FnUEM5elpXeGxZM1ErWEc0Z0lDQWdJQ0FnSUNBZ1BHeGhZbVZzSUdadmNqMWNJbVJoZEdWR2NtOXRYQ0krMEpUUXNOR0MwTEFnMEwzUXNOR0gwTERRdTlDK0lOQyswWUxRdjlHRDBZSFF1dEN3T2lBOEwyeGhZbVZzUGx4dUlDQWdJQ0FnSUNBZ0lEeHBibkIxZENCMGVYQmxQVndpWkdGMFpWd2lJRzVoYldVOVhDSmpZV3hsYm1SaGNsd2lJR05zWVhOelBWd2laR0YwWlVaeWIyMGdabTl5YlMxamIyNTBjbTlzWENJZ2FXUTlYQ0prWVhSbFJuSnZiVndpUGx4dUlDQWdJQ0FnSUNBZ0lEeHNZV0psYkNCbWIzSTlYQ0prWVhSbFZHOWNJajdRbE5DdzBZTFFzQ0RRdXRDKzBMM1JodEN3SU5DKzBZTFF2OUdEMFlIUXV0Q3dQQzlzWVdKbGJENWNiaUFnSUNBZ0lDQWdJQ0E4YVc1d2RYUWdkSGx3WlQxY0ltUmhkR1ZjSWlCdVlXMWxQVndpWTJGc1pXNWtZWEpjSWlCamJHRnpjejFjSW1SaGRHVlVieUJtYjNKdExXTnZiblJ5YjJ4Y0lpQnBaRDFjSW1SaGRHVlViMXdpUGx4dUlDQWdJQ0FnSUNBZ0lEeGthWFlnWTJ4aGMzTTlYQ0pwYm1adlhDSStQQzlrYVhZK1hHNGdJQ0FnSUNBZ0lDQWdQR2x1Y0hWMElHTnNZWE56UFZ3aWMzVmliV2wwU0c5c2FXUmhlU0JpZEc0Z1luUnVMVzkxZEd4cGJtVXRjSEpwYldGeWVWd2lJSFI1Y0dVOVhDSnpkV0p0YVhSY0lpQjJZV3gxWlQxY0lsTjFZbTFwZEZ3aVBseHVJQ0FnSUNBZ1BDOWthWFkrWEc0Z0lEd3ZaR2wyUGx4dUlDQWdJQ0FnSUNCZ08xeHVJQ0FnSUNBZ2RHaHBjeTVoWkdSSVlXNWtiR1Z5UlhabGJuUW9LVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVJQ0JoWkdSSVlXNWtiR1Z5UlhabGJuUW9LU0I3WEc0Z0lDQWdaRzlqZFcxbGJuUmNiaUFnSUNBZ0lDNXhkV1Z5ZVZObGJHVmpkRzl5S0Z3aUxuTjFZbTFwZEVodmJHbGtZWGxjSWlsY2JpQWdJQ0FnSUM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0Z3aVkyeHBZMnRjSWl3Z2RHaHBjeTVqYUdWamEybHVaMFJoZEdFdVltbHVaQ2gwYUdsektTazdYRzRnSUgxY2JpQWdZMmhsWTJ0cGJtZEVZWFJoS0NrZ2UxeHVJQ0FnSUd4bGRDQmpiM1Z1ZEVSaGVYTXNJR2xrUlcxd2JHOTVaV1VzSUhCdmMybDBhVzl1Ulcxd2JHOTVaV1U3WEc0Z0lDQWdiR1YwSUhOd1lXNUpibVp2SUQwZ1pHOWpkVzFsYm5RdWNYVmxjbmxUWld4bFkzUnZjaWhjSWk1cGJtWnZYQ0lwTzF4dUlDQWdJR3hsZENCa1lYUmxSbkp2YlNBOUlHUnZZM1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0lvWENJdVpHRjBaVVp5YjIxY0lpazdYRzRnSUNBZ2JHVjBJR1JoZEdWVWJ5QTlJR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNJb1hDSXVaR0YwWlZSdlhDSXBPMXh1SUNBZ0lHeGxkQ0J6Wld4bFkzUkZiWEJzYjNsbFpTQTlJR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNJb1hDSWpaWGhoYlhCc1pVWnZjbTFEYjI1MGNtOXNVMlZzWldOME1Wd2lLVHRjYmlBZ0lDQnNaWFFnZG1Gc1UyVnNaV04wUlcxd2JHOTVaV1VnUFZ4dUlDQWdJQ0FnYzJWc1pXTjBSVzF3Ykc5NVpXVXViM0IwYVc5dWMxdHpaV3hsWTNSRmJYQnNiM2xsWlM1elpXeGxZM1JsWkVsdVpHVjRYUzUyWVd4MVpUdGNiaUFnSUNCa1lseHVJQ0FnSUNBZ0xtWmxkR05vS0Z3aVpXMXdiRzk1WldWelhDSXBYRzRnSUNBZ0lDQXVkR2hsYmloa1lYUmhJRDArSUh0Y2JpQWdJQ0FnSUNBZ1pHRjBZUzVtYjNKRllXTm9LR1ZzWlcxbGJuUWdQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2hsYkdWdFpXNTBMbTVoYldVZ1BUMDlJSFpoYkZObGJHVmpkRVZ0Y0d4dmVXVmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaRVZ0Y0d4dmVXVmxJRDBnWld4bGJXVnVkQzVwWkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEJ2YzJsMGFXOXVSVzF3Ykc5NVpXVWdQU0JsYkdWdFpXNTBMbkJ2YzJsMGFXOXVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUNoamIzVnVkRVJoZVhNZ1BTQmxiR1Z0Wlc1MExtTnZkVzUwUkdGNWMwaHZiR2twTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0I5S1Z4dUlDQWdJQ0FnTG5Sb1pXNG9LQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1luSXVZMmhsWTJ0cGJtZEVZWFJoS0Z4dUlDQWdJQ0FnSUNBZ0lHTnZkVzUwUkdGNWN5eGNiaUFnSUNBZ0lDQWdJQ0JrWVhSbFJuSnZiUzUyWVd4MVpTeGNiaUFnSUNBZ0lDQWdJQ0JrWVhSbFZHOHVkbUZzZFdVc1hHNGdJQ0FnSUNBZ0lDQWdhV1JGYlhCc2IzbGxaU3hjYmlBZ0lDQWdJQ0FnSUNCd2IzTnBkR2x2YmtWdGNHeHZlV1ZsWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNCOUtWeHVJQ0FnSUNBZ0xuUm9aVzRvS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdLSE53WVc1SmJtWnZMbWx1Ym1WeVNGUk5UQ0E5SUdBOFpHbDJJR05zWVhOelBWd2lZV3hsY25RZ1lXeGxjblF0YzNWalkyVnpjMXdpSUhKdmJHVTlYQ0poYkdWeWRGd2lQdENoMFlmUXNOR0IwWUxRdTlDNDBMTFF2dEN6MEw0ZzBKTFFzTkM4SU5DKzBZTFF0TkdMMFlYUXNEd3ZaR2wyUG1BcE8xeHVJQ0FnSUNBZ2ZTbGNiaUFnSUNBZ0lDNTBhR1Z1S0NncElEMCtJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVlXUmtSVzF3Ykc5NVpXVkJablJsY2tOb1pXTnJhVzVuVm1Gc2FXUW9YRzRnSUNBZ0lDQWdJQ0FnYVdSRmJYQnNiM2xsWlN4Y2JpQWdJQ0FnSUNBZ0lDQmtZWFJsUm5KdmJTNTJZV3gxWlN4Y2JpQWdJQ0FnSUNBZ0lDQmtZWFJsVkc4dWRtRnNkV1ZjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUgwcFhHNGdJQ0FnSUNBdWRHaGxiaWdvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmtZaTVtWlhSamFDaGNJbVZ0Y0d4dmVXVmxjMXdpS1R0Y2JpQWdJQ0FnSUgwcFhHNGdJQ0FnSUNBdWRHaGxiaWhoY25JZ1BUNGdlMXh1SUNBZ0lDQWdJQ0JzWlhRZ1pHbG1aa0psZEhkbFpXNUVZWFJsSUQwZ1luSXVkRzlEYjNWdWRFUnBabVpDWlhSM1pXVnVSR0YwWlhNb1hHNGdJQ0FnSUNBZ0lDQWdaR0YwWlVaeWIyMHVkbUZzZFdVc1hHNGdJQ0FnSUNBZ0lDQWdaR0YwWlZSdkxuWmhiSFZsWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lHRnljaTVtYjNKRllXTm9LQ2hwZEdWdExDQnBLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0dsMFpXMHVhV1FnUFQwOUlHbGtSVzF3Ykc5NVpXVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbDBaVzB1WTI5MWJuUkVZWGx6U0c5c2FTQTlJR2wwWlcwdVkyOTFiblJFWVhselNHOXNhU0F0SUdScFptWkNaWFIzWldWdVJHRjBaVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0JrWWk1elpYUkpkR1Z0S0Z3aVpXMXdiRzk1WldWelhDSXNJR0Z5Y2lrN1hHNGdJQ0FnSUNCOUtWeHVJQ0FnSUNBZ0xtTmhkR05vS0dsdVptOGdQVDRnZTF4dUlDQWdJQ0FnSUNCemNHRnVTVzVtYnk1cGJtNWxja2hVVFV3Z1BTQmdQR1JwZGlCamJHRnpjejFjSW1Gc1pYSjBJR0ZzWlhKMExXUmhibWRsY2x3aUlISnZiR1U5WENKaGJHVnlkRndpUGlSN2FXNW1iMzA4TDJScGRqNWdPMXh1SUNBZ0lDQWdmU2s3WEc0Z0lIMWNiaUFnWVdSa1JXMXdiRzk1WldWQlpuUmxja05vWldOcmFXNW5WbUZzYVdRb2FXUkZiWEJzYjNsbFpTd2daR0YwWlVaeWIyMHNJR1JoZEdWVWJ5a2dlMXh1SUNBZ0lHUmlYRzRnSUNBZ0lDQXVabVYwWTJnb1hDSm9iMnhwWkdGNWMxd2lLVnh1SUNBZ0lDQWdMblJvWlc0b1pHRjBZU0E5UGlCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JvYjJ4cFpHRjVJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lHbGtTRzlzYVRvZ1pHRjBZUzVzWlc1bmRHZ2dLeUF4TEZ4dUlDQWdJQ0FnSUNBZ0lHbGtPaUJwWkVWdGNHeHZlV1ZsTEZ4dUlDQWdJQ0FnSUNBZ0lHUmhkR1ZHY205dE9pQmtZWFJsUm5KdmJTeGNiaUFnSUNBZ0lDQWdJQ0JrWVhSbFZHODZJR1JoZEdWVWIxeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0JrWVhSaExuQjFjMmdvYUc5c2FXUmhlU2s3WEc0Z0lDQWdJQ0FnSUdSaUxuTmxkRWwwWlcwb1hDSm9iMnhwWkdGNWMxd2lMQ0JrWVhSaEtUdGNiaUFnSUNBZ0lIMHBYRzRnSUNBZ0lDQXVZMkYwWTJnb0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNCc1pYUWdhRzlzYVdSaGVTQTlJRnRjYmlBZ0lDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWkVodmJHazZJREVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaRG9nYVdSRmJYQnNiM2xsWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JoZEdWR2NtOXRPaUJrWVhSbFJuSnZiU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmhkR1ZVYnpvZ1pHRjBaVlJ2WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmRPMXh1SUNBZ0lDQWdJQ0JrWWk1elpYUkpkR1Z0S0Z3aWFHOXNhV1JoZVhOY0lpd2dhRzlzYVdSaGVTazdYRzRnSUNBZ0lDQjlLVHRjYmlBZ2ZWeHVmVnh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JJYjJ4cFpHRjVjMUJoWjJVN1hHNGlYWDA9XG59KS5jYWxsKHRoaXMscmVxdWlyZShcImUvVSs5N1wiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIsYXJndW1lbnRzWzNdLGFyZ3VtZW50c1s0XSxhcmd1bWVudHNbNV0sYXJndW1lbnRzWzZdLFwiL2NvbXBvbmVudHNcXFxcSG9saWRheXNQYWdlLmpzXCIsXCIvY29tcG9uZW50c1wiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX0RCID0gcmVxdWlyZShcIi4vLi4vdXRpbHMvREJcIik7XG5cbnZhciBfREIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfREIpO1xuXG52YXIgX1NvcnRBcnIgPSByZXF1aXJlKFwiLi9Tb3J0QXJyXCIpO1xuXG52YXIgX1NvcnRBcnIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU29ydEFycik7XG5cbnZhciBfQnVzaW5lc3NSZXF1aXJlbWVudHMgPSByZXF1aXJlKFwiLi8uLi91dGlscy9CdXNpbmVzc1JlcXVpcmVtZW50c1wiKTtcblxudmFyIF9CdXNpbmVzc1JlcXVpcmVtZW50czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9CdXNpbmVzc1JlcXVpcmVtZW50cyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBzb3J0QXJyID0gbmV3IF9Tb3J0QXJyMi5kZWZhdWx0KCk7XG52YXIgZGIgPSBuZXcgX0RCMi5kZWZhdWx0KCk7XG52YXIgYnIgPSBuZXcgX0J1c2luZXNzUmVxdWlyZW1lbnRzMi5kZWZhdWx0KCk7XG52YXIgcGxhY2VSZW5kZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLndvcmtQbGFjZVwiKTtcblxudmFyIEluZGV4UGFnZSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gSW5kZXhQYWdlKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJbmRleFBhZ2UpO1xuXG4gICAgdGhpcy5hcnJEYXRlID0gW107XG4gICAgdGhpcy5hcnJFbWxveWVlcyA9IFtdO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEluZGV4UGFnZSwgW3tcbiAgICBrZXk6IFwiaW5pdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgZGIuZmV0Y2goXCJob2xpZGF5c1wiKS50aGVuKGZ1bmN0aW9uIChhcnJEYXRlKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5hcnJEYXRlID0gYXJyRGF0ZTtcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZGIuZmV0Y2goXCJlbXBsb3llZXNcIik7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uIChhcnJFbWxveWVlcykge1xuICAgICAgICByZXR1cm4gX3RoaXMuYXJyRW1sb3llZXMgPSBhcnJFbWxveWVlcztcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMucmVuZGVyUGFnZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclBhZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyUGFnZSgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgdGJvZHkgPSBcIjx0Ym9keT5cIjtcbiAgICAgIHRoaXMuYXJyRGF0ZS5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgICAgIF90aGlzMi5hcnJFbWxveWVlcy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgaWYgKGVsZW1lbnQuaWQgPT09IGVsZW0uaWQpIHtcbiAgICAgICAgICAgIHZhciBjbGFzc0ZvclRyID0gdm9pZCAwLFxuICAgICAgICAgICAgICAgIGJ0bkVkaXRlID0gdm9pZCAwLFxuICAgICAgICAgICAgICAgIGJ0bkRlbCA9IHZvaWQgMDtcbiAgICAgICAgICAgIHZhciBkYXRlTm93ID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgIHZhciBkYXRlRnJvbSA9IG5ldyBEYXRlKGVsZW0uZGF0ZUZyb20pO1xuICAgICAgICAgICAgdmFyIGRhdGVUbyA9IG5ldyBEYXRlKGVsZW0uZGF0ZVRvKTtcbiAgICAgICAgICAgIGlmIChkYXRlTm93IDwgZGF0ZUZyb20pIHtcbiAgICAgICAgICAgICAgY2xhc3NGb3JUciA9IFwidXBjb21pbmdcIjtcbiAgICAgICAgICAgICAgYnRuRWRpdGUgPSBcIjxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiZWRpdERhdGUgaWRfXCIgKyBlbGVtLmlkSG9saSArIFwiIGlkRW1wbG9fXCIgKyBlbGVtZW50LmlkICsgXCIgYnRuIGJ0bi1saWdodFxcXCI+XFx1MDQxOFxcdTA0MzdcXHUwNDNDXFx1MDQzNVxcdTA0M0RcXHUwNDM4XFx1MDQ0MlxcdTA0NEMgXFx1MDQzNFxcdTA0MzBcXHUwNDQyXFx1MDQ0QjwvYnV0dG9uPlwiO1xuICAgICAgICAgICAgICBidG5EZWwgPSBcIjxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiZGVsRGF0YSBpZF9cIiArIGVsZW0uaWRIb2xpICsgXCIgZGF0ZUZyb21fXCIgKyBlbGVtLmRhdGVGcm9tICsgXCIgZGF0ZVRvX1wiICsgZWxlbS5kYXRlVG8gKyBcIiBpZEVtcGxvX1wiICsgZWxlbWVudC5pZCArIFwiIGJ0biBidG4tbGlnaHRcXFwiPlxcdTA0MjNcXHUwNDM0XFx1MDQzMFxcdTA0M0JcXHUwNDM4XFx1MDQ0MlxcdTA0NEM8L2J1dHRvbj5cIjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0ZU5vdyA+PSBkYXRlRnJvbSAmJiBkYXRlTm93IDw9IGRhdGVUbykge1xuICAgICAgICAgICAgICBjbGFzc0ZvclRyID0gXCJwcmVzZW50XCI7XG4gICAgICAgICAgICB9IGVsc2UgY2xhc3NGb3JUciA9IFwicGFzdFwiO1xuICAgICAgICAgICAgdGJvZHkgKz0gXCJcXG4gICAgICAgICAgICAgIDx0ciBjbGFzcz1cXFwiXCIgKyBjbGFzc0ZvclRyICsgXCJcXFwiPlxcbiAgICAgICAgICAgICAgICA8dGggc2NvcGU9XFxcInJvd1xcXCI+XCIgKyBlbGVtZW50LmlkICsgXCI8L3RoPlxcbiAgICAgICAgICAgICAgICA8dGQ+XCIgKyBlbGVtZW50Lm5hbWUgKyBcIjwvdGQ+XFxuICAgICAgICAgICAgICAgIDx0ZD5cIiArIGVsZW1lbnQucG9zaXRpb24gKyBcIjwvdGQ+XFxuICAgICAgICAgICAgICAgIDx0ZD5cIiArIGVsZW0uZGF0ZUZyb20gKyAoYnRuRWRpdGUgfHwgXCJcIikgKyAoYnRuRGVsIHx8IFwiXCIpICsgXCI8L3RkPlxcbiAgICAgICAgICAgICAgICA8dGQ+XCIgKyBlbGVtLmRhdGVUbyArIFwiPC90ZD5cXG4gICAgICAgICAgICAgIDwvdHI+XFxuICAgICAgICAgICAgICBcIjtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBwbGFjZVJlbmRlci5pbm5lckhUTUwgPSBcIlxcbiAgICAgICAgICA8dGFibGUgY2xhc3M9XFxcInRhYmxlIHRhYmxlLXN0cmlwZWRcXFwiPlxcbiAgICAgICAgICA8dGhlYWQ+XFxuICAgICAgICAgICAgICA8dHI+XFxuICAgICAgICAgICAgICAgICAgPHRoPiM8L3RoPlxcbiAgICAgICAgICAgICAgICAgIDx0aD5cXHUwNDI0XFx1MDQxOFxcdTA0MUUgPGkgY2xhc3M9XFxcInNvcnRCeUZpb0Rlc2NlbmRpbmcgZmEgZmEtY2FyZXQtZG93blxcXCIgYXJpYS1oaWRkZW49XFxcInRydWVcXFwiPjwvaT5cXG4gICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cXFwic29ydEJ5RmlvXFx1MDQxMHNjZW5kaW5nIGZhIGZhLWNhcmV0LXVwXFxcIiBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCI+PC9pPlxcbiAgICAgICAgICAgICAgICAgIDwvdGg+XFxuICAgICAgICAgICAgICAgICAgPHRoPlxcdTA0MTRcXHUwNDNFXFx1MDQzQlxcdTA0MzZcXHUwNDNEXFx1MDQzRVxcdTA0NDFcXHUwNDQyXFx1MDQ0QzwvdGg+XFxuICAgICAgICAgICAgICAgICAgPHRoPlxcdTA0MTRcXHUwNDMwXFx1MDQ0MlxcdTA0MzAgXFx1MDQxRFxcdTA0MzBcXHUwNDQ3XFx1MDQzMFxcdTA0M0JcXHUwNDNFIDxpIGNsYXNzPVxcXCJzb3J0QnlEYXRlRnJvbURlc2NlbmRpbmcgZmEgZmEtY2FyZXQtZG93blxcXCIgYXJpYS1oaWRkZW49XFxcInRydWVcXFwiPjwvaT5cXG4gICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cXFwic29ydEJ5RGF0ZUZyb21cXHUwNDEwc2NlbmRpbmcgZmEgZmEtY2FyZXQtdXBcXFwiIGFyaWEtaGlkZGVuPVxcXCJ0cnVlXFxcIj48L2k+PC90aD5cXG4gICAgICAgICAgICAgICAgICA8dGg+XFx1MDQxNFxcdTA0MzBcXHUwNDQyXFx1MDQzMCBcXHUwNDFBXFx1MDQzRVxcdTA0M0RcXHUwNDQ2XFx1MDQzMDwvdGg+XFxuICAgICAgICAgICAgICA8L3RyPlxcbiAgICAgICAgICA8L3RoZWFkPlxcbiAgICAgICAgICBcIiArIHRib2R5ICsgXCJcXG4gICAgICAgICAgPC90Ym9keT5cXG4gICAgICAgICAgPC90YWJsZT5cXG4gICAgICAgICAgXCI7XG4gICAgICB0aGlzLmFkZEhhbmRsZXJFdmVudCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzaG93RXJyb3JcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2hvd0Vycm9yKCkge1xuICAgICAgcGxhY2VSZW5kZXIuaW5uZXJIVE1MID0gXCIgPGRpdiBjbGFzcz1cXFwiYWxlcnQgYWxlcnQtd2FybmluZ1xcXCIgcm9sZT1cXFwiYWxlcnRcXFwiPlxcbiAgICBcXHUwNDFEXFx1MDQzNVxcdTA0NDVcXHUwNDMyXFx1MDQzMFxcdTA0NDJcXHUwNDMwXFx1MDQzNVxcdTA0NDIgXFx1MDQzNFxcdTA0MzBcXHUwNDNEXFx1MDQzRFxcdTA0NEJcXHUwNDQ1ISBcXHUwNDE0XFx1MDQzRVxcdTA0MzFcXHUwNDMwXFx1MDQzMlxcdTA0NENcXHUwNDQyXFx1MDQzNSBcXHUwNDNFXFx1MDQ0MlxcdTA0M0ZcXHUwNDQzXFx1MDQ0MVxcdTA0M0EgXFx1MDQzNFxcdTA0M0JcXHUwNDRGIFxcdTA0NDFcXHUwNDNFXFx1MDQ0MlxcdTA0NDBcXHUwNDQzXFx1MDQzNFxcdTA0M0RcXHUwNDM4XFx1MDQzQVxcdTA0M0VcXHUwNDMyIChcXHUwNDNBXFx1MDQzRFxcdTA0M0VcXHUwNDNGXFx1MDQzRVxcdTA0NDdcXHUwNDNBXFx1MDQzMCBcXHUwNDMyXFx1MDQ0QlxcdTA0NDhcXHUwNDM1KVxcbiAgICA8L2Rpdj47XCI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImFkZEhhbmRsZXJFdmVudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRIYW5kbGVyRXZlbnQoKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIGJ0blNvcnRCeUZpb9CQc2NlbmRpbmcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnNvcnRCeUZpb9CQc2NlbmRpbmdcIik7XG4gICAgICB2YXIgYnRuU29ydEJ5RmlvRGVzY2VuZGluZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc29ydEJ5RmlvRGVzY2VuZGluZ1wiKTtcbiAgICAgIHZhciBidG5Tb3J0QnlEYXRlRnJvbUFzY2VuZGluZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc29ydEJ5RGF0ZUZyb23QkHNjZW5kaW5nXCIpO1xuICAgICAgdmFyIGJ0blNvcnRCeURhdGVGcm9tRGVzY2VuZGluZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc29ydEJ5RGF0ZUZyb21EZXNjZW5kaW5nXCIpO1xuICAgICAgdmFyIHRhYmxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcInRhYmxlXCIpO1xuICAgICAgYnRuU29ydEJ5Rmlv0JBzY2VuZGluZy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnRGb3JTb3J0KFwiZW1wbG95ZWVzXCIsIFwic29ydEJ5Rmlv0JBzY2VuZGluZ1wiKSk7XG4gICAgICBidG5Tb3J0QnlGaW9EZXNjZW5kaW5nLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudEZvclNvcnQoXCJlbXBsb3llZXNcIiwgXCJzb3J0QnlGaW9EZXNjZW5kaW5nXCIpKTtcbiAgICAgIGJ0blNvcnRCeURhdGVGcm9tQXNjZW5kaW5nLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudEZvclNvcnQoXCJob2xpZGF5c1wiLCBcInNvcnRCeURhdGVGcm9t0JBzY2VuZGluZ1wiKSk7XG4gICAgICBidG5Tb3J0QnlEYXRlRnJvbURlc2NlbmRpbmcuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2ZW50Rm9yU29ydChcImhvbGlkYXlzXCIsIFwic29ydEJ5RGF0ZUZyb21EZXNjZW5kaW5nXCIpKTtcbiAgICAgIHRhYmxlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgaWYgKGV2LnRhcmdldC50YWdOYW1lICE9IFwiQlVUVE9OXCIpIHJldHVybjtcbiAgICAgICAgaWYgKGV2LnRhcmdldC5jbGFzc0xpc3RbMF0gPT09IFwiZWRpdERhdGVcIikge1xuICAgICAgICAgIF90aGlzMy5ldmVudEVkaXRlQnRuKGV2KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpczMuZXZlbnRSZW1vdmVCdG4oZXYpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gZXZlbnRGb3JTb3J0KG5hbWVEQiwgc29ydEJ5KSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIHNvcnRlZEFyciA9IHNvcnRBcnIuc29ydCh0aGF0LmFyckRhdGUsIHNvcnRCeSwgdGhhdC5hcnJFbWxveWVlcyk7XG4gICAgICAgICAgdGhhdC5hcnJEYXRlID0gc29ydGVkQXJyO1xuICAgICAgICAgIHRoYXQucmVuZGVyUGFnZSgpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJldmVudFJlbW92ZUJ0blwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBldmVudFJlbW92ZUJ0bihldikge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIHZhciBpZEhvbGkgPSBldi50YXJnZXQuY2xhc3NMaXN0WzFdLnNsaWNlKDMpO1xuICAgICAgdmFyIGRhdGVGcm9tID0gZXYudGFyZ2V0LmNsYXNzTGlzdFsyXS5zbGljZSg5KTtcbiAgICAgIHZhciBkYXRlVG8gPSBldi50YXJnZXQuY2xhc3NMaXN0WzNdLnNsaWNlKDcpO1xuICAgICAgdmFyIGRpZmZCZXR3ZWVuRGF0ZXMgPSBici50b0NvdW50RGlmZkJldHdlZW5EYXRlcyhkYXRlRnJvbSwgZGF0ZVRvKTtcbiAgICAgIHZhciBpZEVtcGxvID0gZXYudGFyZ2V0LmNsYXNzTGlzdFs0XS5zbGljZSg4KTtcbiAgICAgIGRiLmZldGNoKFwiaG9saWRheXNcIikudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBkYXRhLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGkpIHtcbiAgICAgICAgICBpZiAoaXRlbS5pZEhvbGkgPT0gaWRIb2xpKSB7XG4gICAgICAgICAgICBkYXRhLnNwbGljZShpLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgZGIuc2V0SXRlbShcImhvbGlkYXlzXCIsIGRhdGEpO1xuICAgICAgICBfdGhpczQuYXJyRGF0ZSA9IGRhdGE7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGRiLmZldGNoKFwiZW1wbG95ZWVzXCIpO1xuICAgICAgfSkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBkYXRhLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICBpZiAoaXRlbS5pZCA9PSBpZEVtcGxvKSB7XG4gICAgICAgICAgICBpdGVtLmNvdW50RGF5c0hvbGkgKz0gZGlmZkJldHdlZW5EYXRlcztcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKG5ld0Fycikge1xuICAgICAgICBkYi5zZXRJdGVtKFwiZW1wbG95ZWVzXCIsIG5ld0Fycik7XG4gICAgICAgIF90aGlzNC5hcnJFbWxveWVlcyA9IG5ld0FycjtcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXM0LnJlbmRlclBhZ2UoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJldmVudEVkaXRlQnRuXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGV2ZW50RWRpdGVCdG4oZXYpIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSBldi50YXJnZXQuY2xhc3NMaXN0WzFdICsgXCImXCIgKyBldi50YXJnZXQuY2xhc3NMaXN0WzJdO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBJbmRleFBhZ2U7XG59KCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEluZGV4UGFnZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrbHVaR1Y0VUdGblpTNXFjeUpkTENKdVlXMWxjeUk2V3lKemIzSjBRWEp5SWl3aVpHSWlMQ0ppY2lJc0luQnNZV05sVW1WdVpHVnlJaXdpWkc5amRXMWxiblFpTENKeGRXVnllVk5sYkdWamRHOXlJaXdpU1c1a1pYaFFZV2RsSWl3aVlYSnlSR0YwWlNJc0ltRnlja1Z0Ykc5NVpXVnpJaXdpWm1WMFkyZ2lMQ0owYUdWdUlpd2ljbVZ1WkdWeVVHRm5aU0lzSW5SaWIyUjVJaXdpWm05eVJXRmphQ0lzSW1Wc1pXMWxiblFpTENKcFpDSXNJbVZzWlcwaUxDSmpiR0Z6YzBadmNsUnlJaXdpWW5SdVJXUnBkR1VpTENKaWRHNUVaV3dpTENKa1lYUmxUbTkzSWl3aVJHRjBaU0lzSW1SaGRHVkdjbTl0SWl3aVpHRjBaVlJ2SWl3aWFXUkliMnhwSWl3aWJtRnRaU0lzSW5CdmMybDBhVzl1SWl3aWFXNXVaWEpJVkUxTUlpd2lZV1JrU0dGdVpHeGxja1YyWlc1MElpd2lZblJ1VTI5eWRFSjVSbWx2MEpCelkyVnVaR2x1WnlJc0ltSjBibE52Y25SQ2VVWnBiMFJsYzJObGJtUnBibWNpTENKaWRHNVRiM0owUW5sRVlYUmxSbkp2YlVGelkyVnVaR2x1WnlJc0ltSjBibE52Y25SQ2VVUmhkR1ZHY205dFJHVnpZMlZ1WkdsdVp5SXNJblJoWW14bElpd2lZV1JrUlhabGJuUk1hWE4wWlc1bGNpSXNJbVYyWlc1MFJtOXlVMjl5ZENJc0ltVjJJaXdpZEdGeVoyVjBJaXdpZEdGblRtRnRaU0lzSW1Oc1lYTnpUR2x6ZENJc0ltVjJaVzUwUldScGRHVkNkRzRpTENKbGRtVnVkRkpsYlc5MlpVSjBiaUlzSW5Sb1lYUWlMQ0p1WVcxbFJFSWlMQ0p6YjNKMFFua2lMQ0p6YjNKMFpXUkJjbklpTENKemIzSjBJaXdpYzJ4cFkyVWlMQ0prYVdabVFtVjBkMlZsYmtSaGRHVnpJaXdpZEc5RGIzVnVkRVJwWm1aQ1pYUjNaV1Z1UkdGMFpYTWlMQ0pwWkVWdGNHeHZJaXdpWkdGMFlTSXNJbWwwWlcwaUxDSnBJaXdpYzNCc2FXTmxJaXdpYzJWMFNYUmxiU0lzSW1OdmRXNTBSR0Y1YzBodmJHa2lMQ0p1WlhkQmNuSWlMQ0pzYjJOaGRHbHZiaUlzSW1oaGMyZ2lYU3dpYldGd2NHbHVaM01pT2lJN096czdPenM3TzBGQlFVRTdPenM3UVVGRFFUczdPenRCUVVOQk96czdPenM3T3p0QlFVTkJMRWxCUVVsQkxGVkJRVlVzZFVKQlFXUTdRVUZEUVN4SlFVRkpReXhMUVVGTExHdENRVUZVTzBGQlEwRXNTVUZCU1VNc1MwRkJTeXh2UTBGQlZEdEJRVU5CTEVsQlFVbERMR05CUVdORExGTkJRVk5ETEdGQlFWUXNRMEZCZFVJc1dVRkJka0lzUTBGQmJFSTdPMGxCUlUxRExGTTdRVUZEU2l4MVFrRkJZenRCUVVGQk96dEJRVU5hTEZOQlFVdERMRTlCUVV3c1IwRkJaU3hGUVVGbU8wRkJRMEVzVTBGQlMwTXNWMEZCVEN4SFFVRnRRaXhGUVVGdVFqdEJRVU5FT3pzN096SkNRVU5OTzBGQlFVRTdPMEZCUTB4UUxGTkJRMGRSTEV0QlJFZ3NRMEZEVXl4VlFVUlVMRVZCUlVkRExFbEJSa2dzUTBGRlVUdEJRVUZCTEdWQlFWa3NUVUZCUzBnc1QwRkJUQ3hIUVVGbFFTeFBRVUV6UWp0QlFVRkJMRTlCUmxJc1JVRkhSMGNzU1VGSVNDeERRVWRSTzBGQlFVRXNaVUZCVFZRc1IwRkJSMUVzUzBGQlNDeERRVUZUTEZkQlFWUXNRMEZCVGp0QlFVRkJMRTlCU0ZJc1JVRkpSME1zU1VGS1NDeERRVWxSTzBGQlFVRXNaVUZCWjBJc1RVRkJTMFlzVjBGQlRDeEhRVUZ0UWtFc1YwRkJia003UVVGQlFTeFBRVXBTTEVWQlMwZEZMRWxCVEVnc1EwRkxVVHRCUVVGQkxHVkJRVTBzVFVGQlMwTXNWVUZCVEN4RlFVRk9PMEZCUVVFc1QwRk1VanRCUVUxRU96czdhVU5CUTFrN1FVRkJRVHM3UVVGRFdDeFZRVUZKUXl4cFFrRkJTanRCUVVOQkxGZEJRVXRNTEU5QlFVd3NRMEZCWVUwc1QwRkJZaXhEUVVGeFFpeG5Ra0ZCVVR0QlFVTXpRaXhsUVVGTFRDeFhRVUZNTEVOQlFXbENTeXhQUVVGcVFpeERRVUY1UWl4dFFrRkJWenRCUVVOc1F5eGpRVUZKUXl4UlFVRlJReXhGUVVGU0xFdEJRV1ZETEV0QlFVdEVMRVZCUVhoQ0xFVkJRVFJDTzBGQlF6RkNMR2RDUVVGSlJTeHRRa0ZCU2p0QlFVRkJMR2RDUVVGblFrTXNhVUpCUVdoQ08wRkJRVUVzWjBKQlFUQkNReXhsUVVFeFFqdEJRVU5CTEdkQ1FVRkpReXhWUVVGVkxFbEJRVWxETEVsQlFVb3NSVUZCWkR0QlFVTkJMR2RDUVVGSlF5eFhRVUZYTEVsQlFVbEVMRWxCUVVvc1EwRkJVMHdzUzBGQlMwMHNVVUZCWkN4RFFVRm1PMEZCUTBFc1owSkJRVWxETEZOQlFWTXNTVUZCU1VZc1NVRkJTaXhEUVVGVFRDeExRVUZMVHl4TlFVRmtMRU5CUVdJN1FVRkRRU3huUWtGQlNVZ3NWVUZCVlVVc1VVRkJaQ3hGUVVGM1FqdEJRVU4wUWt3c01rSkJRV0VzVlVGQllqdEJRVU5CUXl3d1JVRkJkVVJHTEV0QlFVdFJMRTFCUVRWRUxHbENRVUU0UlZZc1VVRkJVVU1zUlVGQmRFWTdRVUZEUVVrc2RVVkJRVzlFU0N4TFFVRkxVU3hOUVVGNlJDeHJRa0ZCTkVWU0xFdEJRVXROTEZGQlFXcEdMR2RDUVVGdlIwNHNTMEZCUzA4c1RVRkJla2NzYVVKQlFUSklWQ3hSUVVGUlF5eEZRVUZ1U1R0QlFVTkVMR0ZCU2tRc1RVRkpUeXhKUVVGSlN5eFhRVUZYUlN4UlFVRllMRWxCUVhWQ1JpeFhRVUZYUnl4TlFVRjBReXhGUVVFNFF6dEJRVU51UkU0c01rSkJRV0VzVTBGQllqdEJRVU5FTEdGQlJrMHNUVUZGUVVFc1lVRkJZU3hOUVVGaU8wRkJRMUJNTEhORVFVTnBRa3NzVlVGRWFrSXNLME5CUlhkQ1NDeFJRVUZSUXl4RlFVWm9ReXh0UTBGSFdVUXNVVUZCVVZjc1NVRkljRUlzYlVOQlNWbFlMRkZCUVZGWkxGRkJTbkJDTEcxRFFVdFpWaXhMUVVGTFRTeFJRVXhxUWl4SlFVczBRa29zV1VGQldTeEZRVXg0UXl4TFFVczJRME1zVlVGQlZTeEZRVXgyUkN4dlEwRk5XVWdzUzBGQlMwOHNUVUZPYWtJN1FVRlRSRHRCUVVOR0xGTkJka0pFTzBGQmQwSkVMRTlCZWtKRU8wRkJNRUpCY0VJc2EwSkJRVmwzUWl4VFFVRmFMREl4UWtGalVXWXNTMEZrVWp0QlFXdENRU3hYUVVGTFowSXNaVUZCVER0QlFVTkVPenM3WjBOQlExYzdRVUZEVm5wQ0xHdENRVUZaZDBJc1UwRkJXanRCUVVkRU96czdjME5CUldsQ08wRkJRVUU3TzBGQlEyaENMRlZCUVVsRkxIZENRVUYzUW5wQ0xGTkJRVk5ETEdGQlFWUXNRMEZCZFVJc2NVSkJRWFpDTEVOQlFUVkNPMEZCUTBFc1ZVRkJTWGxDTEhsQ1FVRjVRakZDTEZOQlFWTkRMR0ZCUVZRc1EwRkJkVUlzYzBKQlFYWkNMRU5CUVRkQ08wRkJRMEVzVlVGQlNUQkNMRFpDUVVFMlFqTkNMRk5CUVZORExHRkJRVlFzUTBGREwwSXNNRUpCUkN0Q0xFTkJRV3BETzBGQlIwRXNWVUZCU1RKQ0xEaENRVUU0UWpWQ0xGTkJRVk5ETEdGQlFWUXNRMEZEYUVNc01rSkJSR2RETEVOQlFXeERPMEZCUjBFc1ZVRkJTVFJDTEZGQlFWRTNRaXhUUVVGVFF5eGhRVUZVTEVOQlFYVkNMRTlCUVhaQ0xFTkJRVm83UVVGRFFYZENMRFJDUVVGelFrc3NaMEpCUVhSQ0xFTkJRMFVzVDBGRVJpeEZRVVZGUXl4aFFVRmhMRmRCUVdJc1JVRkJNRUlzYjBKQlFURkNMRU5CUmtZN1FVRkpRVXdzTmtKQlFYVkNTU3huUWtGQmRrSXNRMEZEUlN4UFFVUkdMRVZCUlVWRExHRkJRV0VzVjBGQllpeEZRVUV3UWl4eFFrRkJNVUlzUTBGR1JqdEJRVWxCU2l4cFEwRkJNa0pITEdkQ1FVRXpRaXhEUVVORkxFOUJSRVlzUlVGRlJVTXNZVUZCWVN4VlFVRmlMRVZCUVhsQ0xIbENRVUY2UWl4RFFVWkdPMEZCU1VGSUxHdERRVUUwUWtVc1owSkJRVFZDTEVOQlEwVXNUMEZFUml4RlFVVkZReXhoUVVGaExGVkJRV0lzUlVGQmVVSXNNRUpCUVhwQ0xFTkJSa1k3UVVGSlFVWXNXVUZCVFVNc1owSkJRVTRzUTBGQmRVSXNUMEZCZGtJc1JVRkJaME1zWTBGQlRUdEJRVU53UXl4WlFVRkpSU3hIUVVGSFF5eE5RVUZJTEVOQlFWVkRMRTlCUVZZc1NVRkJjVUlzVVVGQmVrSXNSVUZCYlVNN1FVRkRia01zV1VGQlNVWXNSMEZCUjBNc1RVRkJTQ3hEUVVGVlJTeFRRVUZXTEVOQlFXOUNMRU5CUVhCQ0xFMUJRVEpDTEZWQlFTOUNMRVZCUVRKRE8wRkJRM3BETEdsQ1FVRkxReXhoUVVGTUxFTkJRVzFDU2l4RlFVRnVRanRCUVVORUxGTkJSa1FzVFVGRlR6dEJRVU5NTEdsQ1FVRkxTeXhqUVVGTUxFTkJRVzlDVEN4RlFVRndRanRCUVVORU8wRkJRMFlzVDBGUVJEczdRVUZUUVN4VlFVRkpUU3hQUVVGUExFbEJRVmc3UVVGRFFTeGxRVUZUVUN4WlFVRlVMRU5CUVhOQ1VTeE5RVUYwUWl4RlFVRTRRa01zVFVGQk9VSXNSVUZCYzBNN1FVRkRjRU1zWlVGQlR5eFpRVUZOTzBGQlExZ3NZMEZCU1VNc1dVRkJXVGRETEZGQlFWRTRReXhKUVVGU0xFTkJRV0ZLTEV0QlFVdHVReXhQUVVGc1FpeEZRVUV5UW5GRExFMUJRVE5DTEVWQlFXMURSaXhMUVVGTGJFTXNWMEZCZUVNc1EwRkJhRUk3UVVGRFFXdERMR1ZCUVV0dVF5eFBRVUZNTEVkQlFXVnpReXhUUVVGbU8wRkJRMEZJTEdWQlFVc3ZRaXhWUVVGTU8wRkJRMFFzVTBGS1JEdEJRVXRFTzBGQlEwWTdPenR0UTBGRFkzbENMRVVzUlVGQlNUdEJRVUZCT3p0QlFVTnFRaXhWUVVGSldpeFRRVUZUV1N4SFFVRkhReXhOUVVGSUxFTkJRVlZGTEZOQlFWWXNRMEZCYjBJc1EwRkJjRUlzUlVGQmRVSlJMRXRCUVhaQ0xFTkJRVFpDTEVOQlFUZENMRU5CUVdJN1FVRkRRU3hWUVVGSmVrSXNWMEZCVjJNc1IwRkJSME1zVFVGQlNDeERRVUZWUlN4VFFVRldMRU5CUVc5Q0xFTkJRWEJDTEVWQlFYVkNVU3hMUVVGMlFpeERRVUUyUWl4RFFVRTNRaXhEUVVGbU8wRkJRMEVzVlVGQlNYaENMRk5CUVZOaExFZEJRVWRETEUxQlFVZ3NRMEZCVlVVc1UwRkJWaXhEUVVGdlFpeERRVUZ3UWl4RlFVRjFRbEVzUzBGQmRrSXNRMEZCTmtJc1EwRkJOMElzUTBGQllqdEJRVU5CTEZWQlFVbERMRzFDUVVGdFFqbERMRWRCUVVjclF5eDFRa0ZCU0N4RFFVRXlRak5DTEZGQlFUTkNMRVZCUVhGRFF5eE5RVUZ5UXl4RFFVRjJRanRCUVVOQkxGVkJRVWt5UWl4VlFVRlZaQ3hIUVVGSFF5eE5RVUZJTEVOQlFWVkZMRk5CUVZZc1EwRkJiMElzUTBGQmNFSXNSVUZCZFVKUkxFdEJRWFpDTEVOQlFUWkNMRU5CUVRkQ0xFTkJRV1E3UVVGRFFUbERMRk5CUTBkUkxFdEJSRWdzUTBGRFV5eFZRVVJVTEVWQlJVZERMRWxCUmtnc1EwRkZVU3huUWtGQlVUdEJRVU5hZVVNc1lVRkJTM1JETEU5QlFVd3NRMEZCWVN4VlFVRkRkVU1zU1VGQlJDeEZRVUZQUXl4RFFVRlFMRVZCUVdFN1FVRkRlRUlzWTBGQlNVUXNTMEZCU3pWQ0xFMUJRVXdzU1VGQlpVRXNUVUZCYmtJc1JVRkJNa0k3UVVGRGVrSXlRaXhwUWtGQlMwY3NUVUZCVEN4RFFVRlpSQ3hEUVVGYUxFVkJRV1VzUTBGQlpqdEJRVU5FTzBGQlEwWXNVMEZLUkR0QlFVdEJMR1ZCUVU5R0xFbEJRVkE3UVVGRFJDeFBRVlJJTEVWQlZVZDZReXhKUVZaSUxFTkJWVkVzWjBKQlFWRTdRVUZEV2xRc1YwRkJSM05FTEU5QlFVZ3NRMEZCVnl4VlFVRllMRVZCUVhWQ1NpeEpRVUYyUWp0QlFVTkJMR1ZCUVVzMVF5eFBRVUZNTEVkQlFXVTBReXhKUVVGbU8wRkJRMFFzVDBGaVNDeEZRV05IZWtNc1NVRmtTQ3hEUVdOUk8wRkJRVUVzWlVGQlRWUXNSMEZCUjFFc1MwRkJTQ3hEUVVGVExGZEJRVlFzUTBGQlRqdEJRVUZCTEU5QlpGSXNSVUZsUjBNc1NVRm1TQ3hEUVdWUkxHZENRVUZSTzBGQlExcDVReXhoUVVGTGRFTXNUMEZCVEN4RFFVRmhMR2RDUVVGUk8wRkJRMjVDTEdOQlFVbDFReXhMUVVGTGNrTXNSVUZCVEN4SlFVRlhiVU1zVDBGQlppeEZRVUYzUWp0QlFVTjBRa1VzYVVKQlFVdEpMR0ZCUVV3c1NVRkJjMEpTTEdkQ1FVRjBRanRCUVVORU8wRkJRMFlzVTBGS1JEdEJRVXRCTEdWQlFVOUhMRWxCUVZBN1FVRkRSQ3hQUVhSQ1NDeEZRWFZDUjNwRExFbEJka0pJTEVOQmRVSlJMR3RDUVVGVk8wRkJRMlJVTEZkQlFVZHpSQ3hQUVVGSUxFTkJRVmNzVjBGQldDeEZRVUYzUWtVc1RVRkJlRUk3UVVGRFFTeGxRVUZMYWtRc1YwRkJUQ3hIUVVGdFFtbEVMRTFCUVc1Q08wRkJRMFFzVDBFeFFrZ3NSVUV5UWtjdlF5eEpRVE5DU0N4RFFUSkNVVHRCUVVGQkxHVkJRVTBzVDBGQlMwTXNWVUZCVEN4RlFVRk9PMEZCUVVFc1QwRXpRbEk3UVVFMFFrUTdPenRyUTBGRFlYbENMRVVzUlVGQlNUdEJRVU5vUW5OQ0xHVkJRVk5ETEVsQlFWUXNSMEZCYlVKMlFpeEhRVUZIUXl4TlFVRklMRU5CUVZWRkxGTkJRVllzUTBGQmIwSXNRMEZCY0VJc1EwRkJia0lzVTBGQk5rTklMRWRCUVVkRExFMUJRVWdzUTBGQlZVVXNVMEZCVml4RFFVRnZRaXhEUVVGd1FpeERRVUUzUXp0QlFVTkVPenM3T3pzN2EwSkJSMWxxUXl4VElpd2labWxzWlNJNklrbHVaR1Y0VUdGblpTNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0JFUWlCbWNtOXRJRndpTGk4dUxpOTFkR2xzY3k5RVFsd2lPMXh1YVcxd2IzSjBJRk52Y25SQmNuSWdabkp2YlNCY0lpNHZVMjl5ZEVGeWNsd2lPMXh1YVcxd2IzSjBJRUpTSUdaeWIyMGdYQ0l1THk0dUwzVjBhV3h6TDBKMWMybHVaWE56VW1WeGRXbHlaVzFsYm5SelhDSTdYRzVzWlhRZ2MyOXlkRUZ5Y2lBOUlHNWxkeUJUYjNKMFFYSnlLQ2s3WEc1c1pYUWdaR0lnUFNCdVpYY2dSRUlvS1R0Y2JteGxkQ0JpY2lBOUlHNWxkeUJDVWlncE8xeHViR1YwSUhCc1lXTmxVbVZ1WkdWeUlEMGdaRzlqZFcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2loY0lpNTNiM0pyVUd4aFkyVmNJaWs3WEc1Y2JtTnNZWE56SUVsdVpHVjRVR0ZuWlNCN1hHNGdJR052Ym5OMGNuVmpkRzl5S0NrZ2UxeHVJQ0FnSUhSb2FYTXVZWEp5UkdGMFpTQTlJRnRkTzF4dUlDQWdJSFJvYVhNdVlYSnlSVzFzYjNsbFpYTWdQU0JiWFR0Y2JpQWdmVnh1SUNCcGJtbDBLQ2tnZTF4dUlDQWdJR1JpWEc0Z0lDQWdJQ0F1Wm1WMFkyZ29YQ0pvYjJ4cFpHRjVjMXdpS1Z4dUlDQWdJQ0FnTG5Sb1pXNG9ZWEp5UkdGMFpTQTlQaUFvZEdocGN5NWhjbkpFWVhSbElEMGdZWEp5UkdGMFpTa3BYRzRnSUNBZ0lDQXVkR2hsYmlnb0tTQTlQaUJrWWk1bVpYUmphQ2hjSW1WdGNHeHZlV1ZsYzF3aUtTbGNiaUFnSUNBZ0lDNTBhR1Z1S0dGeWNrVnRiRzk1WldWeklEMCtJQ2gwYUdsekxtRnlja1Z0Ykc5NVpXVnpJRDBnWVhKeVJXMXNiM2xsWlhNcEtWeHVJQ0FnSUNBZ0xuUm9aVzRvS0NrZ1BUNGdkR2hwY3k1eVpXNWtaWEpRWVdkbEtDa3BPMXh1SUNCOVhHNGdJSEpsYm1SbGNsQmhaMlVvS1NCN1hHNGdJQ0FnYkdWMElIUmliMlI1SUQwZ1lEeDBZbTlrZVQ1Z08xeHVJQ0FnSUhSb2FYTXVZWEp5UkdGMFpTNW1iM0pGWVdOb0tHVnNaVzBnUFQ0Z2UxeHVJQ0FnSUNBZ2RHaHBjeTVoY25KRmJXeHZlV1ZsY3k1bWIzSkZZV05vS0dWc1pXMWxiblFnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQnBaaUFvWld4bGJXVnVkQzVwWkNBOVBUMGdaV3hsYlM1cFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUd4bGRDQmpiR0Z6YzBadmNsUnlMQ0JpZEc1RlpHbDBaU3dnWW5SdVJHVnNPMXh1SUNBZ0lDQWdJQ0FnSUd4bGRDQmtZWFJsVG05M0lEMGdibVYzSUVSaGRHVW9LVHRjYmlBZ0lDQWdJQ0FnSUNCc1pYUWdaR0YwWlVaeWIyMGdQU0J1WlhjZ1JHRjBaU2hsYkdWdExtUmhkR1ZHY205dEtUdGNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ1pHRjBaVlJ2SUQwZ2JtVjNJRVJoZEdVb1pXeGxiUzVrWVhSbFZHOHBPMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaGtZWFJsVG05M0lEd2daR0YwWlVaeWIyMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnNZWE56Um05eVZISWdQU0JjSW5Wd1kyOXRhVzVuWENJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JpZEc1RlpHbDBaU0E5SUdBOFluVjBkRzl1SUhSNWNHVTlYQ0ppZFhSMGIyNWNJaUJqYkdGemN6MWNJbVZrYVhSRVlYUmxJR2xrWHlSN1pXeGxiUzVwWkVodmJHbDlJR2xrUlcxd2JHOWZKSHRsYkdWdFpXNTBMbWxrZlNCaWRHNGdZblJ1TFd4cFoyaDBYQ0krMEpqUXQ5QzgwTFhRdmRDNDBZTFJqQ0RRdE5DdzBZTFJpend2WW5WMGRHOXVQbUE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmlkRzVFWld3Z1BTQmdQR0oxZEhSdmJpQjBlWEJsUFZ3aVluVjBkRzl1WENJZ1kyeGhjM005WENKa1pXeEVZWFJoSUdsa1h5UjdaV3hsYlM1cFpFaHZiR2w5SUdSaGRHVkdjbTl0WHlSN1pXeGxiUzVrWVhSbFJuSnZiWDBnWkdGMFpWUnZYeVI3Wld4bGJTNWtZWFJsVkc5OUlHbGtSVzF3Ykc5ZkpIdGxiR1Z0Wlc1MExtbGtmU0JpZEc0Z1luUnVMV3hwWjJoMFhDSSswS1BRdE5DdzBMdlF1TkdDMFl3OEwySjFkSFJ2Ymo1Z08xeHVJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvWkdGMFpVNXZkeUErUFNCa1lYUmxSbkp2YlNBbUppQmtZWFJsVG05M0lEdzlJR1JoZEdWVWJ5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyeGhjM05HYjNKVWNpQTlJRndpY0hKbGMyVnVkRndpTzF4dUlDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCamJHRnpjMFp2Y2xSeUlEMGdYQ0p3WVhOMFhDSTdYRzRnSUNBZ0lDQWdJQ0FnZEdKdlpIa2dLejBnWUZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0E4ZEhJZ1kyeGhjM005WENJa2UyTnNZWE56Um05eVZISjlYQ0krWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEhSb0lITmpiM0JsUFZ3aWNtOTNYQ0krSkh0bGJHVnRaVzUwTG1sa2ZUd3ZkR2crWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEhSa1BpUjdaV3hsYldWdWRDNXVZVzFsZlR3dmRHUStYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQSFJrUGlSN1pXeGxiV1Z1ZEM1d2IzTnBkR2x2Ym4wOEwzUmtQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHgwWkQ0a2UyVnNaVzB1WkdGMFpVWnliMjE5Skh0aWRHNUZaR2wwWlNCOGZDQmNJbHdpZlNSN1luUnVSR1ZzSUh4OElGd2lYQ0o5UEM5MFpENWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThkR1ErSkh0bGJHVnRMbVJoZEdWVWIzMDhMM1JrUGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0E4TDNSeVBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCZ08xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlLVHRjYmlBZ0lDQndiR0ZqWlZKbGJtUmxjaTVwYm01bGNraFVUVXdnUFNCZ1hHNGdJQ0FnSUNBZ0lDQWdQSFJoWW14bElHTnNZWE56UFZ3aWRHRmliR1VnZEdGaWJHVXRjM1J5YVhCbFpGd2lQbHh1SUNBZ0lDQWdJQ0FnSUR4MGFHVmhaRDVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdQSFJ5UGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BIUm9QaU04TDNSb1BseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQSFJvUHRDazBKalFuaUE4YVNCamJHRnpjejFjSW5OdmNuUkNlVVpwYjBSbGMyTmxibVJwYm1jZ1ptRWdabUV0WTJGeVpYUXRaRzkzYmx3aUlHRnlhV0V0YUdsa1pHVnVQVndpZEhKMVpWd2lQand2YVQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeHBJR05zWVhOelBWd2ljMjl5ZEVKNVJtbHYwSkJ6WTJWdVpHbHVaeUJtWVNCbVlTMWpZWEpsZEMxMWNGd2lJR0Z5YVdFdGFHbGtaR1Z1UFZ3aWRISjFaVndpUGp3dmFUNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHd2ZEdnK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThkR2crMEpUUXZ0QzcwTGJRdmRDKzBZSFJndEdNUEM5MGFENWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHgwYUQ3UWxOQ3cwWUxRc0NEUW5kQ3cwWWZRc05DNzBMNGdQR2tnWTJ4aGMzTTlYQ0p6YjNKMFFubEVZWFJsUm5KdmJVUmxjMk5sYm1ScGJtY2dabUVnWm1FdFkyRnlaWFF0Wkc5M2Jsd2lJR0Z5YVdFdGFHbGtaR1Z1UFZ3aWRISjFaVndpUGp3dmFUNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHhwSUdOc1lYTnpQVndpYzI5eWRFSjVSR0YwWlVaeWIyM1FrSE5qWlc1a2FXNW5JR1poSUdaaExXTmhjbVYwTFhWd1hDSWdZWEpwWVMxb2FXUmtaVzQ5WENKMGNuVmxYQ0krUEM5cFBqd3ZkR2crWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGRHZyswSlRRc05HQzBMQWcwSnJRdnRDOTBZYlFzRHd2ZEdnK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUR3dmRISStYRzRnSUNBZ0lDQWdJQ0FnUEM5MGFHVmhaRDVjYmlBZ0lDQWdJQ0FnSUNBa2UzUmliMlI1ZlZ4dUlDQWdJQ0FnSUNBZ0lEd3ZkR0p2WkhrK1hHNGdJQ0FnSUNBZ0lDQWdQQzkwWVdKc1pUNWNiaUFnSUNBZ0lDQWdJQ0JnTzF4dUlDQWdJSFJvYVhNdVlXUmtTR0Z1Wkd4bGNrVjJaVzUwS0NrN1hHNGdJSDFjYmlBZ2MyaHZkMFZ5Y205eUtDa2dlMXh1SUNBZ0lIQnNZV05sVW1WdVpHVnlMbWx1Ym1WeVNGUk5UQ0E5SUdBZ1BHUnBkaUJqYkdGemN6MWNJbUZzWlhKMElHRnNaWEowTFhkaGNtNXBibWRjSWlCeWIyeGxQVndpWVd4bGNuUmNJajVjYmlBZ0lDRFFuZEMxMFlYUXN0Q3cwWUxRc05DMTBZSWcwTFRRc05DOTBMM1JpOUdGSVNEUWxOQyswTEhRc05DeTBZelJndEMxSU5DKzBZTFF2OUdEMFlIUXVpRFF0TkM3MFk4ZzBZSFF2dEdDMFlEUmc5QzAwTDNRdU5DNjBMN1FzaUFvMExyUXZkQyswTC9RdnRHSDBMclFzQ0RRc3RHTDBZalF0U2xjYmlBZ0lDQThMMlJwZGo0N1lEdGNiaUFnZlZ4dVhHNGdJR0ZrWkVoaGJtUnNaWEpGZG1WdWRDZ3BJSHRjYmlBZ0lDQnNaWFFnWW5SdVUyOXlkRUo1Um1sdjBKQnpZMlZ1WkdsdVp5QTlJR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNJb1hDSXVjMjl5ZEVKNVJtbHYwSkJ6WTJWdVpHbHVaMXdpS1R0Y2JpQWdJQ0JzWlhRZ1luUnVVMjl5ZEVKNVJtbHZSR1Z6WTJWdVpHbHVaeUE5SUdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSW9YQ0l1YzI5eWRFSjVSbWx2UkdWelkyVnVaR2x1WjF3aUtUdGNiaUFnSUNCc1pYUWdZblJ1VTI5eWRFSjVSR0YwWlVaeWIyMUJjMk5sYm1ScGJtY2dQU0JrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eUtGeHVJQ0FnSUNBZ1hDSXVjMjl5ZEVKNVJHRjBaVVp5YjIzUWtITmpaVzVrYVc1blhDSmNiaUFnSUNBcE8xeHVJQ0FnSUd4bGRDQmlkRzVUYjNKMFFubEVZWFJsUm5KdmJVUmxjMk5sYm1ScGJtY2dQU0JrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eUtGeHVJQ0FnSUNBZ1hDSXVjMjl5ZEVKNVJHRjBaVVp5YjIxRVpYTmpaVzVrYVc1blhDSmNiaUFnSUNBcE8xeHVJQ0FnSUd4bGRDQjBZV0pzWlNBOUlHUnZZM1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0lvWENKMFlXSnNaVndpS1R0Y2JpQWdJQ0JpZEc1VGIzSjBRbmxHYVcvUWtITmpaVzVrYVc1bkxtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb1hHNGdJQ0FnSUNCY0ltTnNhV05yWENJc1hHNGdJQ0FnSUNCbGRtVnVkRVp2Y2xOdmNuUW9YQ0psYlhCc2IzbGxaWE5jSWl3Z1hDSnpiM0owUW5sR2FXL1FrSE5qWlc1a2FXNW5YQ0lwWEc0Z0lDQWdLVHRjYmlBZ0lDQmlkRzVUYjNKMFFubEdhVzlFWlhOalpXNWthVzVuTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvWEc0Z0lDQWdJQ0JjSW1Oc2FXTnJYQ0lzWEc0Z0lDQWdJQ0JsZG1WdWRFWnZjbE52Y25Rb1hDSmxiWEJzYjNsbFpYTmNJaXdnWENKemIzSjBRbmxHYVc5RVpYTmpaVzVrYVc1blhDSXBYRzRnSUNBZ0tUdGNiaUFnSUNCaWRHNVRiM0owUW5sRVlYUmxSbkp2YlVGelkyVnVaR2x1Wnk1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0Z4dUlDQWdJQ0FnWENKamJHbGphMXdpTEZ4dUlDQWdJQ0FnWlhabGJuUkdiM0pUYjNKMEtGd2lhRzlzYVdSaGVYTmNJaXdnWENKemIzSjBRbmxFWVhSbFJuSnZiZENRYzJObGJtUnBibWRjSWlsY2JpQWdJQ0FwTzF4dUlDQWdJR0owYmxOdmNuUkNlVVJoZEdWR2NtOXRSR1Z6WTJWdVpHbHVaeTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLRnh1SUNBZ0lDQWdYQ0pqYkdsamExd2lMRnh1SUNBZ0lDQWdaWFpsYm5SR2IzSlRiM0owS0Z3aWFHOXNhV1JoZVhOY0lpd2dYQ0p6YjNKMFFubEVZWFJsUm5KdmJVUmxjMk5sYm1ScGJtZGNJaWxjYmlBZ0lDQXBPMXh1SUNBZ0lIUmhZbXhsTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvWENKamJHbGphMXdpTENCbGRpQTlQaUI3WEc0Z0lDQWdJQ0JwWmlBb1pYWXVkR0Z5WjJWMExuUmhaMDVoYldVZ0lUMGdYQ0pDVlZSVVQwNWNJaWtnY21WMGRYSnVPMXh1SUNBZ0lDQWdhV1lnS0dWMkxuUmhjbWRsZEM1amJHRnpjMHhwYzNSYk1GMGdQVDA5SUZ3aVpXUnBkRVJoZEdWY0lpa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtVjJaVzUwUldScGRHVkNkRzRvWlhZcE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVsZG1WdWRGSmxiVzkyWlVKMGJpaGxkaWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2s3WEc1Y2JpQWdJQ0JzWlhRZ2RHaGhkQ0E5SUhSb2FYTTdYRzRnSUNBZ1puVnVZM1JwYjI0Z1pYWmxiblJHYjNKVGIzSjBLRzVoYldWRVFpd2djMjl5ZEVKNUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNCc1pYUWdjMjl5ZEdWa1FYSnlJRDBnYzI5eWRFRnljaTV6YjNKMEtIUm9ZWFF1WVhKeVJHRjBaU3dnYzI5eWRFSjVMQ0IwYUdGMExtRnlja1Z0Ykc5NVpXVnpLVHRjYmlBZ0lDQWdJQ0FnZEdoaGRDNWhjbkpFWVhSbElEMGdjMjl5ZEdWa1FYSnlPMXh1SUNBZ0lDQWdJQ0IwYUdGMExuSmxibVJsY2xCaFoyVW9LVHRjYmlBZ0lDQWdJSDA3WEc0Z0lDQWdmVnh1SUNCOVhHNGdJR1YyWlc1MFVtVnRiM1psUW5SdUtHVjJLU0I3WEc0Z0lDQWdiR1YwSUdsa1NHOXNhU0E5SUdWMkxuUmhjbWRsZEM1amJHRnpjMHhwYzNSYk1WMHVjMnhwWTJVb015azdYRzRnSUNBZ2JHVjBJR1JoZEdWR2NtOXRJRDBnWlhZdWRHRnlaMlYwTG1Oc1lYTnpUR2x6ZEZzeVhTNXpiR2xqWlNnNUtUdGNiaUFnSUNCc1pYUWdaR0YwWlZSdklEMGdaWFl1ZEdGeVoyVjBMbU5zWVhOelRHbHpkRnN6WFM1emJHbGpaU2czS1R0Y2JpQWdJQ0JzWlhRZ1pHbG1aa0psZEhkbFpXNUVZWFJsY3lBOUlHSnlMblJ2UTI5MWJuUkVhV1ptUW1WMGQyVmxia1JoZEdWektHUmhkR1ZHY205dExDQmtZWFJsVkc4cE8xeHVJQ0FnSUd4bGRDQnBaRVZ0Y0d4dklEMGdaWFl1ZEdGeVoyVjBMbU5zWVhOelRHbHpkRnMwWFM1emJHbGpaU2c0S1R0Y2JpQWdJQ0JrWWx4dUlDQWdJQ0FnTG1abGRHTm9LRndpYUc5c2FXUmhlWE5jSWlsY2JpQWdJQ0FnSUM1MGFHVnVLR1JoZEdFZ1BUNGdlMXh1SUNBZ0lDQWdJQ0JrWVhSaExtWnZja1ZoWTJnb0tHbDBaVzBzSUdrcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9hWFJsYlM1cFpFaHZiR2tnUFQwZ2FXUkliMnhwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrWVhSaExuTndiR2xqWlNocExDQXhLVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdaR0YwWVR0Y2JpQWdJQ0FnSUgwcFhHNGdJQ0FnSUNBdWRHaGxiaWhrWVhSaElEMCtJSHRjYmlBZ0lDQWdJQ0FnWkdJdWMyVjBTWFJsYlNoY0ltaHZiR2xrWVhselhDSXNJR1JoZEdFcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1GeWNrUmhkR1VnUFNCa1lYUmhPMXh1SUNBZ0lDQWdmU2xjYmlBZ0lDQWdJQzUwYUdWdUtDZ3BJRDArSUdSaUxtWmxkR05vS0Z3aVpXMXdiRzk1WldWelhDSXBLVnh1SUNBZ0lDQWdMblJvWlc0b1pHRjBZU0E5UGlCN1hHNGdJQ0FnSUNBZ0lHUmhkR0V1Wm05eVJXRmphQ2hwZEdWdElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9hWFJsYlM1cFpDQTlQU0JwWkVWdGNHeHZLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBkR1Z0TG1OdmRXNTBSR0Y1YzBodmJHa2dLejBnWkdsbVprSmxkSGRsWlc1RVlYUmxjenRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdaR0YwWVR0Y2JpQWdJQ0FnSUgwcFhHNGdJQ0FnSUNBdWRHaGxiaWh1WlhkQmNuSWdQVDRnZTF4dUlDQWdJQ0FnSUNCa1lpNXpaWFJKZEdWdEtGd2laVzF3Ykc5NVpXVnpYQ0lzSUc1bGQwRnljaWs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZWEp5Ulcxc2IzbGxaWE1nUFNCdVpYZEJjbkk3WEc0Z0lDQWdJQ0I5S1Z4dUlDQWdJQ0FnTG5Sb1pXNG9LQ2tnUFQ0Z2RHaHBjeTV5Wlc1a1pYSlFZV2RsS0NrcE8xeHVJQ0I5WEc0Z0lHVjJaVzUwUldScGRHVkNkRzRvWlhZcElIdGNiaUFnSUNCc2IyTmhkR2x2Ymk1b1lYTm9JRDBnWUNSN1pYWXVkR0Z5WjJWMExtTnNZWE56VEdsemRGc3hYWDBtSkh0bGRpNTBZWEpuWlhRdVkyeGhjM05NYVhOMFd6SmRmV0E3WEc0Z0lIMWNibjFjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnU1c1a1pYaFFZV2RsTzF4dUlsMTlcbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiZS9VKzk3XCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvY29tcG9uZW50c1xcXFxJbmRleFBhZ2UuanNcIixcIi9jb21wb25lbnRzXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBTb3J0QXJyID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTb3J0QXJyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTb3J0QXJyKTtcblxuICAgIHRoaXMuYXJyRW1wbG95ZWVzID0gW107XG4gICAgdGhpcy5hcnJEYXRlID0gW107XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU29ydEFyciwgW3tcbiAgICBrZXk6IFwic29ydFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzb3J0KGFyciwgb3JkZXIsIGFyckVtcGxveWVlcykge1xuICAgICAgdGhpcy5hcnJEYXRlID0gYXJyO1xuICAgICAgdGhpcy5hcnJFbXBsb3llZXMgPSBhcnJFbXBsb3llZXM7XG4gICAgICBpZiAob3JkZXIgPT09IFwic29ydEJ5Rmlv0JBzY2VuZGluZ1wiKSB7XG4gICAgICAgIGFyci5zb3J0KHRoaXMuc29ydEJ5Rmlv0JBzY2VuZGluZy5iaW5kKHRoaXMpKTtcbiAgICAgIH0gZWxzZSBpZiAob3JkZXIgPT09IFwic29ydEJ5RmlvRGVzY2VuZGluZ1wiKSB7XG4gICAgICAgIGFyci5zb3J0KHRoaXMuc29ydEJ5RmlvRGVzY2VuZGluZy5iaW5kKHRoaXMpKTtcbiAgICAgIH0gZWxzZSBpZiAob3JkZXIgPT09IFwic29ydEJ5RGF0ZUZyb23QkHNjZW5kaW5nXCIpIHtcbiAgICAgICAgYXJyLnNvcnQodGhpcy5zb3J0QnlEYXRlRnJvbdCQc2NlbmRpbmcpO1xuICAgICAgfSBlbHNlIGlmIChvcmRlciA9PT0gXCJzb3J0QnlEYXRlVG9EZXNjZW5kaW5nXCIpIHtcbiAgICAgICAgYXJyLnNvcnQodGhpcy5zb3J0QnlEYXRlVG9EZXNjZW5kaW5nKTtcbiAgICAgIH0gZWxzZSBhcnIuc29ydCh0aGlzLnNvcnRCeURhdGVGcm9tRGVzY2VuZGluZyk7XG4gICAgICByZXR1cm4gYXJyO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRVc2VyQnlJZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRVc2VyQnlJZCh1c2VySWQsIHVzZXJzKSB7XG4gICAgICByZXR1cm4gdXNlcnMuZmluZChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gdXNlcklkID09PSBpdGVtLmlkO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNvcnRCeUZpb1xcdTA0MTBzY2VuZGluZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzb3J0QnlGaW9TY2VuZGluZyhwZXJzb25BLCBwZXJzb25CKSB7XG4gICAgICBwZXJzb25BID0gdGhpcy5nZXRVc2VyQnlJZChwZXJzb25BLmlkLCB0aGlzLmFyckVtcGxveWVlcyk7XG4gICAgICBwZXJzb25CID0gdGhpcy5nZXRVc2VyQnlJZChwZXJzb25CLmlkLCB0aGlzLmFyckVtcGxveWVlcyk7XG4gICAgICBpZiAocGVyc29uQS5uYW1lID4gcGVyc29uQi5uYW1lKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfSBlbHNlIGlmIChwZXJzb25BLm5hbWUgPCBwZXJzb25CLm5hbWUpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzb3J0QnlGaW9EZXNjZW5kaW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNvcnRCeUZpb0Rlc2NlbmRpbmcocGVyc29uQSwgcGVyc29uQikge1xuICAgICAgcGVyc29uQSA9IHRoaXMuZ2V0VXNlckJ5SWQocGVyc29uQS5pZCwgdGhpcy5hcnJFbXBsb3llZXMpO1xuICAgICAgcGVyc29uQiA9IHRoaXMuZ2V0VXNlckJ5SWQocGVyc29uQi5pZCwgdGhpcy5hcnJFbXBsb3llZXMpO1xuICAgICAgaWYgKHBlcnNvbkEubmFtZSA8IHBlcnNvbkIubmFtZSkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH0gZWxzZSBpZiAocGVyc29uQS5uYW1lID4gcGVyc29uQi5uYW1lKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic29ydEJ5RGF0ZUZyb21cXHUwNDEwc2NlbmRpbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc29ydEJ5RGF0ZUZyb21TY2VuZGluZyhwZXJzb25BLCBwZXJzb25CKSB7XG4gICAgICBpZiAocGVyc29uQS5kYXRlRnJvbSA+IHBlcnNvbkIuZGF0ZUZyb20pIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9IGVsc2UgaWYgKHBlcnNvbkEuZGF0ZUZyb20gPCBwZXJzb25CLmRhdGVGcm9tKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic29ydEJ5RGF0ZVRvRGVzY2VuZGluZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzb3J0QnlEYXRlVG9EZXNjZW5kaW5nKHBlcnNvbkEsIHBlcnNvbkIpIHtcbiAgICAgIGlmIChwZXJzb25BLmRhdGVUbyA8IHBlcnNvbkIuZGF0ZVRvKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfSBlbHNlIGlmIChwZXJzb25BLmRhdGVUbyA+IHBlcnNvbkIuZGF0ZVRvKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic29ydEJ5RGF0ZUZyb21EZXNjZW5kaW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNvcnRCeURhdGVGcm9tRGVzY2VuZGluZyhwZXJzb25BLCBwZXJzb25CKSB7XG4gICAgICBpZiAocGVyc29uQS5kYXRlRnJvbSA8IHBlcnNvbkIuZGF0ZUZyb20pIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9IGVsc2UgaWYgKHBlcnNvbkEuZGF0ZUZyb20gPiBwZXJzb25CLmRhdGVGcm9tKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU29ydEFycjtcbn0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gU29ydEFycjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsTnZjblJCY25JdWFuTWlYU3dpYm1GdFpYTWlPbHNpVTI5eWRFRnljaUlzSW1GeWNrVnRjR3h2ZVdWbGN5SXNJbUZ5Y2tSaGRHVWlMQ0poY25JaUxDSnZjbVJsY2lJc0luTnZjblFpTENKemIzSjBRbmxHYVcvUWtITmpaVzVrYVc1bklpd2lZbWx1WkNJc0luTnZjblJDZVVacGIwUmxjMk5sYm1ScGJtY2lMQ0p6YjNKMFFubEVZWFJsUm5KdmJkQ1FjMk5sYm1ScGJtY2lMQ0p6YjNKMFFubEVZWFJsVkc5RVpYTmpaVzVrYVc1bklpd2ljMjl5ZEVKNVJHRjBaVVp5YjIxRVpYTmpaVzVrYVc1bklpd2lkWE5sY2tsa0lpd2lkWE5sY25NaUxDSm1hVzVrSWl3aWFYUmxiU0lzSW1sa0lpd2ljR1Z5YzI5dVFTSXNJbkJsY25OdmJrSWlMQ0puWlhSVmMyVnlRbmxKWkNJc0ltNWhiV1VpTENKa1lYUmxSbkp2YlNJc0ltUmhkR1ZVYnlKZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdPenRKUVVGTlFTeFBPMEZCUTBvc2NVSkJRV003UVVGQlFUczdRVUZEV2l4VFFVRkxReXhaUVVGTUxFZEJRVzlDTEVWQlFYQkNPMEZCUTBFc1UwRkJTME1zVDBGQlRDeEhRVUZsTEVWQlFXWTdRVUZEUkRzN096dDVRa0ZEU1VNc1J5eEZRVUZMUXl4TExFVkJRVTlJTEZrc1JVRkJZenRCUVVNM1FpeFhRVUZMUXl4UFFVRk1MRWRCUVdWRExFZEJRV1k3UVVGRFFTeFhRVUZMUml4WlFVRk1MRWRCUVc5Q1FTeFpRVUZ3UWp0QlFVTkJMRlZCUVVsSExGVkJRVlVzYjBKQlFXUXNSVUZCYjBNN1FVRkRiRU5FTEZsQlFVbEZMRWxCUVVvc1EwRkJVeXhMUVVGTFF5eHJRa0ZCVEN4RFFVRjNRa01zU1VGQmVFSXNRMEZCTmtJc1NVRkJOMElzUTBGQlZEdEJRVU5FTEU5QlJrUXNUVUZGVHl4SlFVRkpTQ3hWUVVGVkxIRkNRVUZrTEVWQlFYRkRPMEZCUXpGRFJDeFpRVUZKUlN4SlFVRktMRU5CUVZNc1MwRkJTMGNzYlVKQlFVd3NRMEZCZVVKRUxFbEJRWHBDTEVOQlFUaENMRWxCUVRsQ0xFTkJRVlE3UVVGRFJDeFBRVVpOTEUxQlJVRXNTVUZCU1Vnc1ZVRkJWU3g1UWtGQlpDeEZRVUY1UXp0QlFVTTVRMFFzV1VGQlNVVXNTVUZCU2l4RFFVRlRMRXRCUVV0SkxIVkNRVUZrTzBGQlEwUXNUMEZHVFN4TlFVVkJMRWxCUVVsTUxGVkJRVlVzZDBKQlFXUXNSVUZCZDBNN1FVRkROME5FTEZsQlFVbEZMRWxCUVVvc1EwRkJVeXhMUVVGTFN5eHpRa0ZCWkR0QlFVTkVMRTlCUmswc1RVRkZRVkFzU1VGQlNVVXNTVUZCU2l4RFFVRlRMRXRCUVV0TkxIZENRVUZrTzBGQlExQXNZVUZCVDFJc1IwRkJVRHRCUVVORU96czdaME5CUTFkVExFMHNSVUZCVVVNc1N5eEZRVUZQTzBGQlEzcENMR0ZCUVU5QkxFMUJRVTFETEVsQlFVNHNRMEZCVnp0QlFVRkJMR1ZCUVZGR0xGZEJRVmRITEV0QlFVdERMRVZCUVhoQ08wRkJRVUVzVDBGQldDeERRVUZRTzBGQlEwUTdPenR6UTBGRmEwSkRMRThzUlVGQlUwTXNUeXhGUVVGVE8wRkJRMjVEUkN4blFrRkJWU3hMUVVGTFJTeFhRVUZNTEVOQlFXbENSaXhSUVVGUlJDeEZRVUY2UWl4RlFVRTJRaXhMUVVGTFppeFpRVUZzUXl4RFFVRldPMEZCUTBGcFFpeG5Ra0ZCVlN4TFFVRkxReXhYUVVGTUxFTkJRV2xDUkN4UlFVRlJSaXhGUVVGNlFpeEZRVUUyUWl4TFFVRkxaaXhaUVVGc1F5eERRVUZXTzBGQlEwRXNWVUZCU1dkQ0xGRkJRVkZITEVsQlFWSXNSMEZCWlVZc1VVRkJVVVVzU1VGQk0wSXNSVUZCYVVNN1FVRkRMMElzWlVGQlR5eERRVUZRTzBGQlEwUXNUMEZHUkN4TlFVVlBMRWxCUVVsSUxGRkJRVkZITEVsQlFWSXNSMEZCWlVZc1VVRkJVVVVzU1VGQk0wSXNSVUZCYVVNN1FVRkRkRU1zWlVGQlR5eERRVUZETEVOQlFWSTdRVUZEUkR0QlFVTkdPenM3ZDBOQlEyMUNTQ3hQTEVWQlFWTkRMRThzUlVGQlV6dEJRVU53UTBRc1owSkJRVlVzUzBGQlMwVXNWMEZCVEN4RFFVRnBRa1lzVVVGQlVVUXNSVUZCZWtJc1JVRkJOa0lzUzBGQlMyWXNXVUZCYkVNc1EwRkJWanRCUVVOQmFVSXNaMEpCUVZVc1MwRkJTME1zVjBGQlRDeERRVUZwUWtRc1VVRkJVVVlzUlVGQmVrSXNSVUZCTmtJc1MwRkJTMllzV1VGQmJFTXNRMEZCVmp0QlFVTkJMRlZCUVVsblFpeFJRVUZSUnl4SlFVRlNMRWRCUVdWR0xGRkJRVkZGTEVsQlFUTkNMRVZCUVdsRE8wRkJReTlDTEdWQlFVOHNRMEZCVUR0QlFVTkVMRTlCUmtRc1RVRkZUeXhKUVVGSlNDeFJRVUZSUnl4SlFVRlNMRWRCUVdWR0xGRkJRVkZGTEVsQlFUTkNMRVZCUVdsRE8wRkJRM1JETEdWQlFVOHNRMEZCUXl4RFFVRlNPMEZCUTBRN1FVRkRSanM3T3pKRFFVTjFRa2dzVHl4RlFVRlRReXhQTEVWQlFWTTdRVUZEZUVNc1ZVRkJTVVFzVVVGQlVVa3NVVUZCVWl4SFFVRnRRa2dzVVVGQlVVY3NVVUZCTDBJc1JVRkJlVU03UVVGRGRrTXNaVUZCVHl4RFFVRlFPMEZCUTBRc1QwRkdSQ3hOUVVWUExFbEJRVWxLTEZGQlFWRkpMRkZCUVZJc1IwRkJiVUpJTEZGQlFWRkhMRkZCUVM5Q0xFVkJRWGxETzBGQlF6bERMR1ZCUVU4c1EwRkJReXhEUVVGU08wRkJRMFE3UVVGRFJqczdPekpEUVVOelFrb3NUeXhGUVVGVFF5eFBMRVZCUVZNN1FVRkRka01zVlVGQlNVUXNVVUZCVVVzc1RVRkJVaXhIUVVGcFFrb3NVVUZCVVVrc1RVRkJOMElzUlVGQmNVTTdRVUZEYmtNc1pVRkJUeXhEUVVGUU8wRkJRMFFzVDBGR1JDeE5RVVZQTEVsQlFVbE1MRkZCUVZGTExFMUJRVklzUjBGQmFVSktMRkZCUVZGSkxFMUJRVGRDTEVWQlFYRkRPMEZCUXpGRExHVkJRVThzUTBGQlF5eERRVUZTTzBGQlEwUTdRVUZEUmpzN096WkRRVU4zUWt3c1R5eEZRVUZUUXl4UExFVkJRVk03UVVGRGVrTXNWVUZCU1VRc1VVRkJVVWtzVVVGQlVpeEhRVUZ0UWtnc1VVRkJVVWNzVVVGQkwwSXNSVUZCZVVNN1FVRkRka01zWlVGQlR5eERRVUZRTzBGQlEwUXNUMEZHUkN4TlFVVlBMRWxCUVVsS0xGRkJRVkZKTEZGQlFWSXNSMEZCYlVKSUxGRkJRVkZITEZGQlFTOUNMRVZCUVhsRE8wRkJRemxETEdWQlFVOHNRMEZCUXl4RFFVRlNPMEZCUTBRN1FVRkRSanM3T3pzN08ydENRVWRaY2tJc1R5SXNJbVpwYkdVaU9pSlRiM0owUVhKeUxtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpWTJ4aGMzTWdVMjl5ZEVGeWNpQjdYRzRnSUdOdmJuTjBjblZqZEc5eUtDa2dlMXh1SUNBZ0lIUm9hWE11WVhKeVJXMXdiRzk1WldWeklEMGdXMTA3WEc0Z0lDQWdkR2hwY3k1aGNuSkVZWFJsSUQwZ1cxMDdYRzRnSUgxY2JpQWdjMjl5ZENoaGNuSXNJRzl5WkdWeUxDQmhjbkpGYlhCc2IzbGxaWE1wSUh0Y2JpQWdJQ0IwYUdsekxtRnlja1JoZEdVZ1BTQmhjbkk3WEc0Z0lDQWdkR2hwY3k1aGNuSkZiWEJzYjNsbFpYTWdQU0JoY25KRmJYQnNiM2xsWlhNN1hHNGdJQ0FnYVdZZ0tHOXlaR1Z5SUQwOVBTQmNJbk52Y25SQ2VVWnBiOUNRYzJObGJtUnBibWRjSWlrZ2UxeHVJQ0FnSUNBZ1lYSnlMbk52Y25Rb2RHaHBjeTV6YjNKMFFubEdhVy9Ra0hOalpXNWthVzVuTG1KcGJtUW9kR2hwY3lrcE8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2IzSmtaWElnUFQwOUlGd2ljMjl5ZEVKNVJtbHZSR1Z6WTJWdVpHbHVaMXdpS1NCN1hHNGdJQ0FnSUNCaGNuSXVjMjl5ZENoMGFHbHpMbk52Y25SQ2VVWnBiMFJsYzJObGJtUnBibWN1WW1sdVpDaDBhR2x6S1NrN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNodmNtUmxjaUE5UFQwZ1hDSnpiM0owUW5sRVlYUmxSbkp2YmRDUWMyTmxibVJwYm1kY0lpa2dlMXh1SUNBZ0lDQWdZWEp5TG5OdmNuUW9kR2hwY3k1emIzSjBRbmxFWVhSbFJuSnZiZENRYzJObGJtUnBibWNwTzF4dUlDQWdJSDBnWld4elpTQnBaaUFvYjNKa1pYSWdQVDA5SUZ3aWMyOXlkRUo1UkdGMFpWUnZSR1Z6WTJWdVpHbHVaMXdpS1NCN1hHNGdJQ0FnSUNCaGNuSXVjMjl5ZENoMGFHbHpMbk52Y25SQ2VVUmhkR1ZVYjBSbGMyTmxibVJwYm1jcE8xeHVJQ0FnSUgwZ1pXeHpaU0JoY25JdWMyOXlkQ2gwYUdsekxuTnZjblJDZVVSaGRHVkdjbTl0UkdWelkyVnVaR2x1WnlrN1hHNGdJQ0FnY21WMGRYSnVJR0Z5Y2p0Y2JpQWdmVnh1SUNCblpYUlZjMlZ5UW5sSlpDaDFjMlZ5U1dRc0lIVnpaWEp6S1NCN1hHNGdJQ0FnY21WMGRYSnVJSFZ6WlhKekxtWnBibVFvYVhSbGJTQTlQaUIxYzJWeVNXUWdQVDA5SUdsMFpXMHVhV1FwTzF4dUlDQjlYRzVjYmlBZ2MyOXlkRUo1Um1sdjBKQnpZMlZ1WkdsdVp5aHdaWEp6YjI1QkxDQndaWEp6YjI1Q0tTQjdYRzRnSUNBZ2NHVnljMjl1UVNBOUlIUm9hWE11WjJWMFZYTmxja0o1U1dRb2NHVnljMjl1UVM1cFpDd2dkR2hwY3k1aGNuSkZiWEJzYjNsbFpYTXBPMXh1SUNBZ0lIQmxjbk52YmtJZ1BTQjBhR2x6TG1kbGRGVnpaWEpDZVVsa0tIQmxjbk52YmtJdWFXUXNJSFJvYVhNdVlYSnlSVzF3Ykc5NVpXVnpLVHRjYmlBZ0lDQnBaaUFvY0dWeWMyOXVRUzV1WVcxbElENGdjR1Z5YzI5dVFpNXVZVzFsS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnTVR0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0hCbGNuTnZia0V1Ym1GdFpTQThJSEJsY25OdmJrSXVibUZ0WlNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUMweE8xeHVJQ0FnSUgxY2JpQWdmVnh1SUNCemIzSjBRbmxHYVc5RVpYTmpaVzVrYVc1bktIQmxjbk52YmtFc0lIQmxjbk52YmtJcElIdGNiaUFnSUNCd1pYSnpiMjVCSUQwZ2RHaHBjeTVuWlhSVmMyVnlRbmxKWkNod1pYSnpiMjVCTG1sa0xDQjBhR2x6TG1GeWNrVnRjR3h2ZVdWbGN5azdYRzRnSUNBZ2NHVnljMjl1UWlBOUlIUm9hWE11WjJWMFZYTmxja0o1U1dRb2NHVnljMjl1UWk1cFpDd2dkR2hwY3k1aGNuSkZiWEJzYjNsbFpYTXBPMXh1SUNBZ0lHbG1JQ2h3WlhKemIyNUJMbTVoYldVZ1BDQndaWEp6YjI1Q0xtNWhiV1VwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUF4TzF4dUlDQWdJSDBnWld4elpTQnBaaUFvY0dWeWMyOXVRUzV1WVcxbElENGdjR1Z5YzI5dVFpNXVZVzFsS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnTFRFN1hHNGdJQ0FnZlZ4dUlDQjlYRzRnSUhOdmNuUkNlVVJoZEdWR2NtOXQwSkJ6WTJWdVpHbHVaeWh3WlhKemIyNUJMQ0J3WlhKemIyNUNLU0I3WEc0Z0lDQWdhV1lnS0hCbGNuTnZia0V1WkdGMFpVWnliMjBnUGlCd1pYSnpiMjVDTG1SaGRHVkdjbTl0S1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnTVR0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0hCbGNuTnZia0V1WkdGMFpVWnliMjBnUENCd1pYSnpiMjVDTG1SaGRHVkdjbTl0S1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnTFRFN1hHNGdJQ0FnZlZ4dUlDQjlYRzRnSUhOdmNuUkNlVVJoZEdWVWIwUmxjMk5sYm1ScGJtY29jR1Z5YzI5dVFTd2djR1Z5YzI5dVFpa2dlMXh1SUNBZ0lHbG1JQ2h3WlhKemIyNUJMbVJoZEdWVWJ5QThJSEJsY25OdmJrSXVaR0YwWlZSdktTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z01UdGNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tIQmxjbk52YmtFdVpHRjBaVlJ2SUQ0Z2NHVnljMjl1UWk1a1lYUmxWRzhwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUF0TVR0Y2JpQWdJQ0I5WEc0Z0lIMWNiaUFnYzI5eWRFSjVSR0YwWlVaeWIyMUVaWE5qWlc1a2FXNW5LSEJsY25OdmJrRXNJSEJsY25OdmJrSXBJSHRjYmlBZ0lDQnBaaUFvY0dWeWMyOXVRUzVrWVhSbFJuSnZiU0E4SUhCbGNuTnZia0l1WkdGMFpVWnliMjBwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUF4TzF4dUlDQWdJSDBnWld4elpTQnBaaUFvY0dWeWMyOXVRUzVrWVhSbFJuSnZiU0ErSUhCbGNuTnZia0l1WkdGMFpVWnliMjBwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUF0TVR0Y2JpQWdJQ0I5WEc0Z0lIMWNibjFjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnVTI5eWRFRnljanRjYmlKZGZRPT1cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiZS9VKzk3XCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvY29tcG9uZW50c1xcXFxTb3J0QXJyLmpzXCIsXCIvY29tcG9uZW50c1wiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgX1JvdXRlciA9IHJlcXVpcmUoXCIuL3V0aWxzL1JvdXRlclwiKTtcblxudmFyIF9Sb3V0ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUm91dGVyKTtcblxudmFyIF9pbmRleCA9IHJlcXVpcmUoXCIuL3JvdXRlcy9pbmRleFwiKTtcblxudmFyIF9hZGRIb2xpZGF5cyA9IHJlcXVpcmUoXCIuL3JvdXRlcy9hZGRIb2xpZGF5c1wiKTtcblxudmFyIF9lZGl0SG9saWRheSA9IHJlcXVpcmUoXCIuL3JvdXRlcy9lZGl0SG9saWRheVwiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHJvdXRlcyA9IFtfaW5kZXguaW5kZXgsIF9hZGRIb2xpZGF5cy5hZGRIb2xpZGF5cywgX2VkaXRIb2xpZGF5LmVkaXRIb2xpZGF5XTtcbm5ldyBfUm91dGVyMi5kZWZhdWx0KHsgcm91dGVzOiByb3V0ZXMgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVpoYTJWZlpUY3laVGRsTURjdWFuTWlYU3dpYm1GdFpYTWlPbHNpY205MWRHVnpJbDBzSW0xaGNIQnBibWR6SWpvaU96dEJRVUZCT3pzN08wRkJRMEU3TzBGQlEwRTdPMEZCUTBFN096czdRVUZEUVN4SlFVRk5RU3hUUVVGVExHdEZRVUZtTzBGQlEwRXNjVUpCUVZjc1JVRkJSVUVzWTBGQlJpeEZRVUZZSWl3aVptbHNaU0k2SW1aaGEyVmZaVGN5WlRkbE1EY3Vhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKcGJYQnZjblFnVW05MWRHVnlJR1p5YjIwZ1hDSXVMM1YwYVd4ekwxSnZkWFJsY2x3aU8xeHlYRzVwYlhCdmNuUWdleUJwYm1SbGVDQjlJR1p5YjIwZ1hDSXVMM0p2ZFhSbGN5OXBibVJsZUZ3aU8xeHlYRzVwYlhCdmNuUWdleUJoWkdSSWIyeHBaR0Y1Y3lCOUlHWnliMjBnWENJdUwzSnZkWFJsY3k5aFpHUkliMnhwWkdGNWMxd2lPMXh5WEc1cGJYQnZjblFnZXlCbFpHbDBTRzlzYVdSaGVTQjlJR1p5YjIwZ1hDSXVMM0p2ZFhSbGN5OWxaR2wwU0c5c2FXUmhlVndpTzF4eVhHNWpiMjV6ZENCeWIzVjBaWE1nUFNCYmFXNWtaWGdzSUdGa1pFaHZiR2xrWVhsekxDQmxaR2wwU0c5c2FXUmhlVjA3WEhKY2JtNWxkeUJTYjNWMFpYSW9leUJ5YjNWMFpYTWdmU2s3SWwxOVxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJlL1UrOTdcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi9mYWtlX2U3MmU3ZTA3LmpzXCIsXCIvXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmFkZEhvbGlkYXlzID0gdW5kZWZpbmVkO1xuXG52YXIgX0hvbGlkYXlzUGFnZSA9IHJlcXVpcmUoXCIuLy4uL2NvbXBvbmVudHMvSG9saWRheXNQYWdlXCIpO1xuXG52YXIgX0hvbGlkYXlzUGFnZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Ib2xpZGF5c1BhZ2UpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgaG9saWRheXNQYWdlID0gbmV3IF9Ib2xpZGF5c1BhZ2UyLmRlZmF1bHQoKTtcblxudmFyIGFkZEhvbGlkYXlzID0ge1xuICBuYW1lOiBcImFkZEhvbGlkYXlzXCIsXG4gIG1hdGNoOiBmdW5jdGlvbiBtYXRjaCh0ZXh0KSB7XG4gICAgcmV0dXJuIHRleHQgPT0gXCJhZGRIb2xpZGF5c1wiO1xuICB9LFxuICBvbkJlZm9yZUVudGVyOiBmdW5jdGlvbiBvbkJlZm9yZUVudGVyKCkge30sXG4gIG9uRW50ZXI6IGZ1bmN0aW9uIG9uRW50ZXIoKSB7XG4gICAgdmFyIGJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYWRkSG9saWRheXNcIik7XG4gICAgYnRuLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBsb2NhdGlvbi5oYXNoID0gXCJhZGRIb2xpZGF5c1wiO1xuICAgIH0pO1xuICAgIGJ0bi5pbm5lckhUTUwgPSBcItCd0LDQt9Cw0LRcIjtcbiAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSBcIlwiO1xuICAgIH0pO1xuICAgIGhvbGlkYXlzUGFnZS5yZW5kZXJQYWdlKCk7XG4gIH0sXG4gIG9uTGVhdmU6IGZ1bmN0aW9uIG9uTGVhdmUoKSB7fVxufTtcblxuZXhwb3J0cy5hZGRIb2xpZGF5cyA9IGFkZEhvbGlkYXlzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Ga1pFaHZiR2xrWVhsekxtcHpJbDBzSW01aGJXVnpJanBiSW1odmJHbGtZWGx6VUdGblpTSXNJbUZrWkVodmJHbGtZWGx6SWl3aWJtRnRaU0lzSW0xaGRHTm9JaXdpZEdWNGRDSXNJbTl1UW1WbWIzSmxSVzUwWlhJaUxDSnZia1Z1ZEdWeUlpd2lZblJ1SWl3aVpHOWpkVzFsYm5RaUxDSnhkV1Z5ZVZObGJHVmpkRzl5SWl3aWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpSXNJbXh2WTJGMGFXOXVJaXdpYUdGemFDSXNJbWx1Ym1WeVNGUk5UQ0lzSW1Ga1pFVjJaVzUwVEdsemRHVnVaWElpTENKeVpXNWtaWEpRWVdkbElpd2liMjVNWldGMlpTSmRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenRCUVVGQk96czdPenM3UVVGRFFTeEpRVUZKUVN4bFFVRmxMRFJDUVVGdVFqczdRVUZGUVN4SlFVRkpReXhqUVVGak8wRkJRMmhDUXl4UlFVRk5MR0ZCUkZVN1FVRkZhRUpETEZOQlFVODdRVUZCUVN4WFFVRlJReXhSUVVGUkxHRkJRV2hDTzBGQlFVRXNSMEZHVXp0QlFVZG9Ra01zYVVKQlFXVXNlVUpCUVUwc1EwRkJSU3hEUVVoUU8wRkJTV2hDUXl4WFFVRlRMRzFDUVVGTk8wRkJRMklzVVVGQlNVTXNUVUZCVFVNc1UwRkJVME1zWVVGQlZDeERRVUYxUWl4alFVRjJRaXhEUVVGV08wRkJRMEZHTEZGQlFVbEhMRzFDUVVGS0xFTkJRWGRDTEU5QlFYaENMRVZCUVdsRExGbEJRVTA3UVVGRGNrTkRMR1ZCUVZORExFbEJRVlFzUjBGQlowSXNZVUZCYUVJN1FVRkRSQ3hMUVVaRU8wRkJSMEZNTEZGQlFVbE5MRk5CUVVvc1IwRkJaMElzVDBGQmFFSTdRVUZEUVU0c1VVRkJTVThzWjBKQlFVb3NRMEZCY1VJc1QwRkJja0lzUlVGQk9FSXNXVUZCVFR0QlFVTnNRMGdzWlVGQlUwTXNTVUZCVkN4SFFVRm5RaXhGUVVGb1FqdEJRVU5FTEV0QlJrUTdRVUZIUVZvc2FVSkJRV0ZsTEZWQlFXSTdRVUZEUkN4SFFXUmxPMEZCWldoQ1F5eFhRVUZUTEcxQ1FVRk5MRU5CUVVVN1FVRm1SQ3hEUVVGc1FqczdVVUZyUWxObUxGY3NSMEZCUVVFc1Z5SXNJbVpwYkdVaU9pSmhaR1JJYjJ4cFpHRjVjeTVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltbHRjRzl5ZENCSWIyeHBaR0Y1YzFCaFoyVWdabkp2YlNCY0lpNHZMaTR2WTI5dGNHOXVaVzUwY3k5SWIyeHBaR0Y1YzFCaFoyVmNJanRjYm14bGRDQm9iMnhwWkdGNWMxQmhaMlVnUFNCdVpYY2dTRzlzYVdSaGVYTlFZV2RsS0NrN1hHNWNibXhsZENCaFpHUkliMnhwWkdGNWN5QTlJSHRjYmlBZ2JtRnRaVG9nWENKaFpHUkliMnhwWkdGNWMxd2lMRnh1SUNCdFlYUmphRG9nZEdWNGRDQTlQaUIwWlhoMElEMDlJRndpWVdSa1NHOXNhV1JoZVhOY0lpeGNiaUFnYjI1Q1pXWnZjbVZGYm5SbGNqb2dLQ2tnUFQ0Z2UzMHNYRzRnSUc5dVJXNTBaWEk2SUNncElEMCtJSHRjYmlBZ0lDQnNaWFFnWW5SdUlEMGdaRzlqZFcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2loY0lpNWhaR1JJYjJ4cFpHRjVjMXdpS1R0Y2JpQWdJQ0JpZEc0dWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpaGNJbU5zYVdOclhDSXNJQ2dwSUQwK0lIdGNiaUFnSUNBZ0lHeHZZMkYwYVc5dUxtaGhjMmdnUFNCY0ltRmtaRWh2Ykdsa1lYbHpYQ0k3WEc0Z0lDQWdmU2s3WEc0Z0lDQWdZblJ1TG1sdWJtVnlTRlJOVENBOUlGd2kwSjNRc05DMzBMRFF0RndpTzF4dUlDQWdJR0owYmk1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0Z3aVkyeHBZMnRjSWl3Z0tDa2dQVDRnZTF4dUlDQWdJQ0FnYkc5allYUnBiMjR1YUdGemFDQTlJRndpWENJN1hHNGdJQ0FnZlNrN1hHNGdJQ0FnYUc5c2FXUmhlWE5RWVdkbExuSmxibVJsY2xCaFoyVW9LVHRjYmlBZ2ZTeGNiaUFnYjI1TVpXRjJaVG9nS0NrZ1BUNGdlMzFjYm4wN1hHNWNibVY0Y0c5eWRDQjdJR0ZrWkVodmJHbGtZWGx6SUgwN1hHNGlYWDA9XG59KS5jYWxsKHRoaXMscmVxdWlyZShcImUvVSs5N1wiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIsYXJndW1lbnRzWzNdLGFyZ3VtZW50c1s0XSxhcmd1bWVudHNbNV0sYXJndW1lbnRzWzZdLFwiL3JvdXRlc1xcXFxhZGRIb2xpZGF5cy5qc1wiLFwiL3JvdXRlc1wiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5lZGl0SG9saWRheSA9IHVuZGVmaW5lZDtcblxudmFyIF9FZGl0SG9saWRheXNQYWdlID0gcmVxdWlyZShcIi4vLi4vY29tcG9uZW50cy9FZGl0SG9saWRheXNQYWdlXCIpO1xuXG52YXIgX0VkaXRIb2xpZGF5c1BhZ2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRWRpdEhvbGlkYXlzUGFnZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBlZGl0SG9saWRheXNQYWdlID0gbmV3IF9FZGl0SG9saWRheXNQYWdlMi5kZWZhdWx0KCk7XG5cbnZhciBlZGl0SG9saWRheSA9IHtcbiAgbmFtZTogXCJlZGl0SG9saWRheVwiLFxuICBtYXRjaDogZnVuY3Rpb24gbWF0Y2godGV4dCkge1xuICAgIHJldHVybiB0ZXh0ID09PSB0ZXh0O1xuICB9LFxuICBvbkJlZm9yZUVudGVyOiBmdW5jdGlvbiBvbkJlZm9yZUVudGVyKCkge30sXG4gIG9uRW50ZXI6IGZ1bmN0aW9uIG9uRW50ZXIoKSB7XG4gICAgdmFyIGJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYWRkSG9saWRheXNcIik7XG4gICAgYnRuLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBsb2NhdGlvbi5oYXNoID0gXCJhZGRIb2xpZGF5c1wiO1xuICAgIH0pO1xuICAgIGJ0bi5pbm5lckhUTUwgPSBcItCd0LDQt9Cw0LRcIjtcbiAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSBcIlwiO1xuICAgIH0pO1xuICAgIGVkaXRIb2xpZGF5c1BhZ2UuaW5pdCgpO1xuICB9LFxuICBvbkxlYXZlOiBmdW5jdGlvbiBvbkxlYXZlKCkge31cbn07XG5cbmV4cG9ydHMuZWRpdEhvbGlkYXkgPSBlZGl0SG9saWRheTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVmthWFJJYjJ4cFpHRjVMbXB6SWwwc0ltNWhiV1Z6SWpwYkltVmthWFJJYjJ4cFpHRjVjMUJoWjJVaUxDSmxaR2wwU0c5c2FXUmhlU0lzSW01aGJXVWlMQ0p0WVhSamFDSXNJblJsZUhRaUxDSnZia0psWm05eVpVVnVkR1Z5SWl3aWIyNUZiblJsY2lJc0ltSjBiaUlzSW1SdlkzVnRaVzUwSWl3aWNYVmxjbmxUWld4bFkzUnZjaUlzSW5KbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJaUxDSnNiMk5oZEdsdmJpSXNJbWhoYzJnaUxDSnBibTVsY2toVVRVd2lMQ0poWkdSRmRtVnVkRXhwYzNSbGJtVnlJaXdpYVc1cGRDSXNJbTl1VEdWaGRtVWlYU3dpYldGd2NHbHVaM01pT2lJN096czdPenM3UVVGQlFUczdPenM3TzBGQlEwRXNTVUZCU1VFc2JVSkJRVzFDTEdkRFFVRjJRanM3UVVGRlFTeEpRVUZKUXl4alFVRmpPMEZCUTJoQ1F5eFJRVUZOTEdGQlJGVTdRVUZGYUVKRExGTkJRVTg3UVVGQlFTeFhRVUZSUXl4VFFVRlRRU3hKUVVGcVFqdEJRVUZCTEVkQlJsTTdRVUZIYUVKRExHbENRVUZsTEhsQ1FVRk5MRU5CUVVVc1EwRklVRHRCUVVsb1FrTXNWMEZCVXl4dFFrRkJUVHRCUVVOaUxGRkJRVWxETEUxQlFVMURMRk5CUVZORExHRkJRVlFzUTBGQmRVSXNZMEZCZGtJc1EwRkJWanRCUVVOQlJpeFJRVUZKUnl4dFFrRkJTaXhEUVVGM1FpeFBRVUY0UWl4RlFVRnBReXhaUVVGTk8wRkJRM0pEUXl4bFFVRlRReXhKUVVGVUxFZEJRV2RDTEdGQlFXaENPMEZCUTBRc1MwRkdSRHRCUVVkQlRDeFJRVUZKVFN4VFFVRktMRWRCUVdkQ0xFOUJRV2hDTzBGQlEwRk9MRkZCUVVsUExHZENRVUZLTEVOQlFYRkNMRTlCUVhKQ0xFVkJRVGhDTEZsQlFVMDdRVUZEYkVOSUxHVkJRVk5ETEVsQlFWUXNSMEZCWjBJc1JVRkJhRUk3UVVGRFJDeExRVVpFTzBGQlIwRmFMSEZDUVVGcFFtVXNTVUZCYWtJN1FVRkRSQ3hIUVdSbE8wRkJaV2hDUXl4WFFVRlRMRzFDUVVGTkxFTkJRVVU3UVVGbVJDeERRVUZzUWpzN1VVRnJRbE5tTEZjc1IwRkJRVUVzVnlJc0ltWnBiR1VpT2lKbFpHbDBTRzlzYVdSaGVTNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0JGWkdsMFNHOXNhV1JoZVhOUVlXZGxJR1p5YjIwZ1hDSXVMeTR1TDJOdmJYQnZibVZ1ZEhNdlJXUnBkRWh2Ykdsa1lYbHpVR0ZuWlZ3aU8xeHViR1YwSUdWa2FYUkliMnhwWkdGNWMxQmhaMlVnUFNCdVpYY2dSV1JwZEVodmJHbGtZWGx6VUdGblpTZ3BPMXh1WEc1c1pYUWdaV1JwZEVodmJHbGtZWGtnUFNCN1hHNGdJRzVoYldVNklGd2laV1JwZEVodmJHbGtZWGxjSWl4Y2JpQWdiV0YwWTJnNklIUmxlSFFnUFQ0Z2RHVjRkQ0E5UFQwZ2RHVjRkQ3hjYmlBZ2IyNUNaV1p2Y21WRmJuUmxjam9nS0NrZ1BUNGdlMzBzWEc0Z0lHOXVSVzUwWlhJNklDZ3BJRDArSUh0Y2JpQWdJQ0JzWlhRZ1luUnVJRDBnWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNpaGNJaTVoWkdSSWIyeHBaR0Y1YzF3aUtUdGNiaUFnSUNCaWRHNHVjbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaWhjSW1Oc2FXTnJYQ0lzSUNncElEMCtJSHRjYmlBZ0lDQWdJR3h2WTJGMGFXOXVMbWhoYzJnZ1BTQmNJbUZrWkVodmJHbGtZWGx6WENJN1hHNGdJQ0FnZlNrN1hHNGdJQ0FnWW5SdUxtbHVibVZ5U0ZSTlRDQTlJRndpMEozUXNOQzMwTERRdEZ3aU8xeHVJQ0FnSUdKMGJpNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtGd2lZMnhwWTJ0Y0lpd2dLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ2JHOWpZWFJwYjI0dWFHRnphQ0E5SUZ3aVhDSTdYRzRnSUNBZ2ZTazdYRzRnSUNBZ1pXUnBkRWh2Ykdsa1lYbHpVR0ZuWlM1cGJtbDBLQ2s3WEc0Z0lIMHNYRzRnSUc5dVRHVmhkbVU2SUNncElEMCtJSHQ5WEc1OU8xeHVYRzVsZUhCdmNuUWdleUJsWkdsMFNHOXNhV1JoZVNCOU8xeHVJbDE5XG59KS5jYWxsKHRoaXMscmVxdWlyZShcImUvVSs5N1wiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIsYXJndW1lbnRzWzNdLGFyZ3VtZW50c1s0XSxhcmd1bWVudHNbNV0sYXJndW1lbnRzWzZdLFwiL3JvdXRlc1xcXFxlZGl0SG9saWRheS5qc1wiLFwiL3JvdXRlc1wiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5pbmRleCA9IHVuZGVmaW5lZDtcblxudmFyIF9JbmRleFBhZ2UgPSByZXF1aXJlKFwiLi8uLi9jb21wb25lbnRzL0luZGV4UGFnZVwiKTtcblxudmFyIF9JbmRleFBhZ2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfSW5kZXhQYWdlKTtcblxudmFyIF9EQiA9IHJlcXVpcmUoXCIuLy4uL3V0aWxzL0RCXCIpO1xuXG52YXIgX0RCMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0RCKTtcblxudmFyIF9EZW1vRGF0YSA9IHJlcXVpcmUoXCIuLy4uL0RlbW9EYXRhXCIpO1xuXG52YXIgX0RlbW9EYXRhMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0RlbW9EYXRhKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGluZGV4UGFnZSA9IG5ldyBfSW5kZXhQYWdlMi5kZWZhdWx0KCk7XG52YXIgZGIgPSBuZXcgX0RCMi5kZWZhdWx0KCk7XG52YXIgZGVtb0RhdGEgPSBuZXcgX0RlbW9EYXRhMi5kZWZhdWx0KCk7XG5cbnZhciBpbmRleCA9IHtcbiAgbmFtZTogXCJpbmRleFwiLFxuICBtYXRjaDogXCJcIixcbiAgb25CZWZvcmVFbnRlcjogZnVuY3Rpb24gb25CZWZvcmVFbnRlcigpIHt9LFxuICBvbkVudGVyOiBmdW5jdGlvbiBvbkVudGVyKCkge1xuICAgIHZhciBidG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmFkZEhvbGlkYXlzXCIpO1xuICAgIGJ0bi5pbm5lckhUTUwgPSBcItCU0L7QsdCw0LLQuNGC0Ywg0L7RgtC/0YPRgdC6INGB0L7RgtGA0YPQtNC90LjQutGDXCI7XG4gICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBsb2NhdGlvbi5oYXNoID0gXCJhZGRIb2xpZGF5c1wiO1xuICAgIH0pO1xuICAgIGRiLmZldGNoKFwiZW1wbG95ZWVzXCIpLmNhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBkYi5zZXRJdGVtKFwiZW1wbG95ZWVzXCIsIGRlbW9EYXRhLmNyZWF0ZUVtcGxveWVlcygpKTtcbiAgICB9KTtcbiAgICBkYi5mZXRjaChcImhvbGlkYXlzXCIpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGluZGV4UGFnZS5pbml0KCk7XG4gICAgfSkuY2F0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGluZGV4UGFnZS5zaG93RXJyb3IoKTtcbiAgICB9KTtcbiAgfSxcbiAgb25MZWF2ZTogZnVuY3Rpb24gb25MZWF2ZSgpIHt9XG59O1xuXG5leHBvcnRzLmluZGV4ID0gaW5kZXg7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbWx1WkdWNExtcHpJbDBzSW01aGJXVnpJanBiSW1sdVpHVjRVR0ZuWlNJc0ltUmlJaXdpWkdWdGIwUmhkR0VpTENKcGJtUmxlQ0lzSW01aGJXVWlMQ0p0WVhSamFDSXNJbTl1UW1WbWIzSmxSVzUwWlhJaUxDSnZia1Z1ZEdWeUlpd2lZblJ1SWl3aVpHOWpkVzFsYm5RaUxDSnhkV1Z5ZVZObGJHVmpkRzl5SWl3aWFXNXVaWEpJVkUxTUlpd2lZV1JrUlhabGJuUk1hWE4wWlc1bGNpSXNJbXh2WTJGMGFXOXVJaXdpYUdGemFDSXNJbVpsZEdOb0lpd2lZMkYwWTJnaUxDSnpaWFJKZEdWdElpd2lZM0psWVhSbFJXMXdiRzk1WldWeklpd2lkR2hsYmlJc0ltbHVhWFFpTENKemFHOTNSWEp5YjNJaUxDSnZia3hsWVhabElsMHNJbTFoY0hCcGJtZHpJam9pT3pzN096czdPMEZCUVVFN096czdRVUZEUVRzN096dEJRVU5CT3pzN096czdRVUZEUVN4SlFVRkpRU3haUVVGWkxIbENRVUZvUWp0QlFVTkJMRWxCUVVsRExFdEJRVXNzYTBKQlFWUTdRVUZEUVN4SlFVRkpReXhYUVVGWExIZENRVUZtT3p0QlFVVkJMRWxCUVVsRExGRkJRVkU3UVVGRFZrTXNVVUZCVFN4UFFVUkpPMEZCUlZaRExGTkJRVThzUlVGR1J6dEJRVWRXUXl4cFFrRkJaU3g1UWtGQlRTeERRVUZGTEVOQlNHSTdRVUZKVmtNc1YwRkJVeXh0UWtGQlRUdEJRVU5pTEZGQlFVbERMRTFCUVUxRExGTkJRVk5ETEdGQlFWUXNRMEZCZFVJc1kwRkJka0lzUTBGQlZqdEJRVU5CUml4UlFVRkpSeXhUUVVGS0xFZEJRV2RDTERSQ1FVRm9RanRCUVVOQlNDeFJRVUZKU1N4blFrRkJTaXhEUVVGeFFpeFBRVUZ5UWl4RlFVRTRRaXhaUVVGTk8wRkJRMnhEUXl4bFFVRlRReXhKUVVGVUxFZEJRV2RDTEdGQlFXaENPMEZCUTBRc1MwRkdSRHRCUVVkQllpeFBRVU5IWXl4TFFVUklMRU5CUTFNc1YwRkVWQ3hGUVVWSFF5eExRVVpJTEVOQlJWTTdRVUZCUVN4aFFVRk5aaXhIUVVGSFowSXNUMEZCU0N4RFFVRlhMRmRCUVZnc1JVRkJkMEptTEZOQlFWTm5RaXhsUVVGVUxFVkJRWGhDTEVOQlFVNDdRVUZCUVN4TFFVWlVPMEZCUjBGcVFpeFBRVU5IWXl4TFFVUklMRU5CUTFNc1ZVRkVWQ3hGUVVWSFNTeEpRVVpJTEVOQlJWRTdRVUZCUVN4aFFVRk5ia0lzVlVGQlZXOUNMRWxCUVZZc1JVRkJUanRCUVVGQkxFdEJSbElzUlVGSFIwb3NTMEZJU0N4RFFVZFRPMEZCUVVFc1lVRkJUV2hDTEZWQlFWVnhRaXhUUVVGV0xFVkJRVTQ3UVVGQlFTeExRVWhVTzBGQlNVUXNSMEZxUWxNN1FVRnJRbFpETEZkQlFWTXNiVUpCUVUwc1EwRkJSVHRCUVd4Q1VDeERRVUZhT3p0UlFYRkNVMjVDTEVzc1IwRkJRVUVzU3lJc0ltWnBiR1VpT2lKcGJtUmxlQzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltbHRjRzl5ZENCSmJtUmxlRkJoWjJVZ1puSnZiU0JjSWk0dkxpNHZZMjl0Y0c5dVpXNTBjeTlKYm1SbGVGQmhaMlZjSWp0Y2JtbHRjRzl5ZENCRVFpQm1jbTl0SUZ3aUxpOHVMaTkxZEdsc2N5OUVRbHdpTzF4dWFXMXdiM0owSUVSbGJXOUVZWFJoSUdaeWIyMGdYQ0l1THk0dUwwUmxiVzlFWVhSaFhDSTdYRzVzWlhRZ2FXNWtaWGhRWVdkbElEMGdibVYzSUVsdVpHVjRVR0ZuWlNncE8xeHViR1YwSUdSaUlEMGdibVYzSUVSQ0tDazdYRzVzWlhRZ1pHVnRiMFJoZEdFZ1BTQnVaWGNnUkdWdGIwUmhkR0VvS1R0Y2JseHViR1YwSUdsdVpHVjRJRDBnZTF4dUlDQnVZVzFsT2lCY0ltbHVaR1Y0WENJc1hHNGdJRzFoZEdOb09pQmNJbHdpTEZ4dUlDQnZia0psWm05eVpVVnVkR1Z5T2lBb0tTQTlQaUI3ZlN4Y2JpQWdiMjVGYm5SbGNqb2dLQ2tnUFQ0Z2UxeHVJQ0FnSUd4bGRDQmlkRzRnUFNCa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlLRndpTG1Ga1pFaHZiR2xrWVhselhDSXBPMXh1SUNBZ0lHSjBiaTVwYm01bGNraFVUVXdnUFNCY0l0Q1UwTDdRc2RDdzBMTFF1TkdDMFl3ZzBMN1JndEMvMFlQUmdkQzZJTkdCMEw3Umd0R0EwWVBRdE5DOTBMalF1dEdEWENJN1hHNGdJQ0FnWW5SdUxtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb1hDSmpiR2xqYTF3aUxDQW9LU0E5UGlCN1hHNGdJQ0FnSUNCc2IyTmhkR2x2Ymk1b1lYTm9JRDBnWENKaFpHUkliMnhwWkdGNWMxd2lPMXh1SUNBZ0lIMHBPMXh1SUNBZ0lHUmlYRzRnSUNBZ0lDQXVabVYwWTJnb1hDSmxiWEJzYjNsbFpYTmNJaWxjYmlBZ0lDQWdJQzVqWVhSamFDZ29LU0E5UGlCa1lpNXpaWFJKZEdWdEtGd2laVzF3Ykc5NVpXVnpYQ0lzSUdSbGJXOUVZWFJoTG1OeVpXRjBaVVZ0Y0d4dmVXVmxjeWdwS1NrN1hHNGdJQ0FnWkdKY2JpQWdJQ0FnSUM1bVpYUmphQ2hjSW1odmJHbGtZWGx6WENJcFhHNGdJQ0FnSUNBdWRHaGxiaWdvS1NBOVBpQnBibVJsZUZCaFoyVXVhVzVwZENncEtWeHVJQ0FnSUNBZ0xtTmhkR05vS0NncElEMCtJR2x1WkdWNFVHRm5aUzV6YUc5M1JYSnliM0lvS1NrN1hHNGdJSDBzWEc0Z0lHOXVUR1ZoZG1VNklDZ3BJRDArSUh0OVhHNTlPMXh1WEc1bGVIQnZjblFnZXlCcGJtUmxlQ0I5TzF4dUlsMTlcbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiZS9VKzk3XCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvcm91dGVzXFxcXGluZGV4LmpzXCIsXCIvcm91dGVzXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfREIgPSByZXF1aXJlKFwiLi9EQlwiKTtcblxudmFyIF9EQjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9EQik7XG5cbnZhciBfU29ydEFyciA9IHJlcXVpcmUoXCIuLy4uL2NvbXBvbmVudHMvU29ydEFyclwiKTtcblxudmFyIF9Tb3J0QXJyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1NvcnRBcnIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgZGIgPSBuZXcgX0RCMi5kZWZhdWx0KCk7XG52YXIgc29ydEFyciA9IG5ldyBfU29ydEFycjIuZGVmYXVsdCgpO1xuXG52YXIgQnVzaW5lc3NSZXF1aXJlbWVudHMgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEJ1c2luZXNzUmVxdWlyZW1lbnRzKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCdXNpbmVzc1JlcXVpcmVtZW50cyk7XG5cbiAgICB0aGlzLmFyckVtcGxveWVlcyA9IFtdO1xuICAgIHRoaXMuYXJyRGF0ZSA9IFtdO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEJ1c2luZXNzUmVxdWlyZW1lbnRzLCBbe1xuICAgIGtleTogXCJjaGVja2luZ0RhdGFcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2hlY2tpbmdEYXRhKGNvdW50RGF5cywgZGF0ZUZyb20sIGRhdGVUbywgaWRFbXBsb3llZSwgcG9zaXRpb25FbXBsb3llZSwgYXJyRGF0ZSkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgaWYgKCFkYXRlRnJvbSB8fCAhZGF0ZVRvKSByZXR1cm4gUHJvbWlzZS5yZWplY3QoXCLQktGL0LHQtdGA0LjRgtC1INC00LDRgtGDXCIpO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMudG9Db3VudERpZmZCZXR3ZWVuRGF0ZXMoZGF0ZUZyb20sIGRhdGVUbyk7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uIChkaWZmQmV0d2VlbkRhdGVzKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5jaGVja2luZ01heENvdW50RGF5KGNvdW50RGF5cywgZGlmZkJldHdlZW5EYXRlcyk7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uIChkaWZmQmV0d2VlbkRhdGVzKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5jaGVja2luZ01pbkRheXNPbkhvbGlkYXkoZGlmZkJldHdlZW5EYXRlcyk7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uIChkaWZmQmV0d2VlbkRhdGVzKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5jaGVja2luZ01heERheXNPbkhvbGlkYXkoZGlmZkJldHdlZW5EYXRlcyk7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmZpbHRlckJ5UG9zaXRpb24oaWRFbXBsb3llZSwgcG9zaXRpb25FbXBsb3llZSwgYXJyRGF0ZSk7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmZpbHRlckJ5RGF0ZVJhbmdlKGRhdGVGcm9tLCBkYXRlVG8pO1xuICAgICAgfSkudGhlbihmdW5jdGlvbiAoZmlsdGVyZWRBcnIpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmNoYWNraW5nQ291bnRFbXBsb3llZUluSG9saShmaWx0ZXJlZEFycik7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmZpbHRlckJ5SWQoaWRFbXBsb3llZSk7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uIChmaWx0ZXJBcnIpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmNoYWNraW5nRGF0ZVdpdGhDdXJyZW50KGZpbHRlckFyciwgZGF0ZUZyb20pO1xuICAgICAgfSkudGhlbihmdW5jdGlvbiAoZmlsdGVyQXJyKSB7XG4gICAgICAgIHJldHVybiBzb3J0QXJyLnNvcnQoZmlsdGVyQXJyLCBcInNvcnRCeURhdGVUb0Rlc2NlbmRpbmdcIik7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uIChzb3J0ZWRBcnIpIHtcbiAgICAgICAgcmV0dXJuIHNvcnRlZEFyci5maW5kKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgaWYgKGl0ZW0uZGF0ZVRvIDw9IGRhdGVGcm9tKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSkudGhlbihmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIGlmICghb2JqKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkaWZmQmV0d2VlbkRhdGVMYXN0SG9saSA9IF90aGlzLnRvQ291bnREaWZmQmV0d2VlbkRhdGVzKG9iai5kYXRlRnJvbSwgb2JqLmRhdGVUbyk7XG4gICAgICAgIHZhciBkaWZmQmV0d2VlbkRhdGVzV2l0aExIID0gX3RoaXMudG9Db3VudERpZmZCZXR3ZWVuRGF0ZXMob2JqLmRhdGVUbywgZGF0ZUZyb20pO1xuICAgICAgICByZXR1cm4gX3RoaXMuY2hlY2tpbmdSYW5nZURhdGVzKGRpZmZCZXR3ZWVuRGF0ZXNXaXRoTEgsIGRpZmZCZXR3ZWVuRGF0ZUxhc3RIb2xpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjaGVja2luZ01heENvdW50RGF5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNoZWNraW5nTWF4Q291bnREYXkoY291bnREYXlzLCBkaWZmQmV0d2VlbkRhdGVzKSB7XG4gICAgICBpZiAoY291bnREYXlzIDw9IDEpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFwi0JTQsNC90L3Ri9C5INGB0L7RgtGA0YPQtNC90LjQuiDQvdC10LzQvtC20LXRgiDQsdC+0LvRjNGI0LUg0LLRi9GF0L7QtNC40YLRjCDQsiDQvtGC0L/Rg9GB0Log0LIg0LTQsNC90L3QvtC8INCz0L7QtNGDXCIpO1xuICAgICAgfSBlbHNlIGlmIChkaWZmQmV0d2VlbkRhdGVzID4gY291bnREYXlzKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcIlxcdTA0MUZcXHUwNDM1XFx1MDQ0MFxcdTA0MzhcXHUwNDNFXFx1MDQzNCBcXHUwNDNFXFx1MDQ0MlxcdTA0M0ZcXHUwNDQzXFx1MDQ0MVxcdTA0M0FcXHUwNDMwIFxcdTA0NDFcXHUwNDNFXFx1MDQ0MVxcdTA0NDJcXHUwNDMwXFx1MDQzMlxcdTA0M0JcXHUwNDRGXFx1MDQzNVxcdTA0NDIgXCIgKyBkaWZmQmV0d2VlbkRhdGVzICsgXCIgXFx1MDQzNFxcdTA0M0QuLCBcXHUwNDMwIFxcdTA0NDMgXFx1MDQzNFxcdTA0MzBcXHUwNDNEXFx1MDQzRFxcdTA0M0VcXHUwNDMzXFx1MDQzRSBcXHUwNDQxXFx1MDQzRVxcdTA0NDJcXHUwNDQwXFx1MDQ0M1xcdTA0MzRcXHUwNDNEXFx1MDQzOFxcdTA0M0FcXHUwNDMwIFxcdTA0M0VcXHUwNDQxXFx1MDQ0MlxcdTA0MzBcXHUwNDNCXFx1MDQzRVxcdTA0NDFcXHUwNDRDIFwiICsgY291bnREYXlzICsgXCIgXFx1MDQzNFxcdTA0M0QuXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShkaWZmQmV0d2VlbkRhdGVzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY2hlY2tpbmdNaW5EYXlzT25Ib2xpZGF5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNoZWNraW5nTWluRGF5c09uSG9saWRheShkaWZmQmV0d2VlbkRhdGVzKSB7XG4gICAgICBpZiAoZGlmZkJldHdlZW5EYXRlcyA8IDIpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFwi0JLRi9Cx0YDQsNC90L3Ri9C5INC00LjQsNC/0LDQt9C+0L0g0LTQsNGCINC90LUg0YHQvtC+0YLQstC10YLRgdCy0YPRjtGCINC/0YDQsNCy0LjQu9GDICjQvNC40L3QuNC80LDQu9GM0L3QvtC1INC60L7Quy4g0LTQvdC10Lkg0LIg0L7RgtC/0YPRgdC60LUgPSAyKVwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZGlmZkJldHdlZW5EYXRlcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNoZWNraW5nTWF4RGF5c09uSG9saWRheVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjaGVja2luZ01heERheXNPbkhvbGlkYXkoZGlmZkJldHdlZW5EYXRlcykge1xuICAgICAgaWYgKGRpZmZCZXR3ZWVuRGF0ZXMgPiAxNSkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXCJcXHUwNDEyXFx1MDQ0QlxcdTA0MzFcXHUwNDQwXFx1MDQzMFxcdTA0M0RcXHUwNDNEXFx1MDQ0QlxcdTA0MzkgXFx1MDQzNFxcdTA0MzhcXHUwNDMwXFx1MDQzRlxcdTA0MzBcXHUwNDM3XFx1MDQzRVxcdTA0M0QgXFx1MDQzNFxcdTA0MzBcXHUwNDQyIFxcdTA0M0RcXHUwNDM1IFxcdTA0NDFcXHUwNDNFXFx1MDQzRVxcdTA0NDJcXHUwNDMyXFx1MDQzNVxcdTA0NDJcXHUwNDQxXFx1MDQzMlxcdTA0NDNcXHUwNDRFXFx1MDQ0MiBcXHUwNDNGXFx1MDQ0MFxcdTA0MzBcXHUwNDMyXFx1MDQzOFxcdTA0M0JcXHUwNDQzIChcXHUwNDNDXFx1MDQzMFxcdTA0M0FcXHUwNDQxXFx1MDQzOFxcdTA0M0NcXHUwNDMwXFx1MDQzQlxcdTA0NENcXHUwNDNEXFx1MDQzRVxcdTA0MzUgXFx1MDQzQVxcdTA0M0VcXHUwNDNCLiBcXHUwNDM0XFx1MDQzRFxcdTA0MzVcXHUwNDM5IFxcdTA0MzIgXFx1MDQzRVxcdTA0NDJcXHUwNDNGXFx1MDQ0M1xcdTA0NDFcXHUwNDNBXFx1MDQzNSA9IDE1KSwgXFx1MDQzMCBcXHUwNDMyXFx1MDQ0QlxcdTA0MzFcXHUwNDQwXFx1MDQzMFxcdTA0M0RcXHUwNDNEXFx1MDQzRSBcIiArIGRpZmZCZXR3ZWVuRGF0ZXMgKyBcIiBcXHUwNDM0XFx1MDQzRC5cIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGRpZmZCZXR3ZWVuRGF0ZXMpO1xuICAgIH1cbiAgICAvL9CSINC30LDQtNCw0L3QuNC4INC90LUg0YHQutCw0LfQsNC90LAsINGH0YLQviDQtNC10LvQsNGC0Ywg0LXRgdC70Lgg0YfQtdC70L7QstC10Log0L7QtNC40L0g0L3QsCDQtNC+0LvQttC90L7RgdGC0LgsINC/0L7RjdGC0L7QvNGDINGA0LXRiNC40Lsg0LXQs9C+INC90LUg0L7RgtC/0YDQsNCy0LvRj9GC0Ywg0LIg0L7RgtC/0YPRgSwg0YIu0LouINCyINGC0YDQtdCx0L7QuNCy0LDQvdC40Lgg0L3QtSDQsdC+0LvQtdC1IDUwJSwg0LAg0Y3RgtC+IDEwMCVcblxuICB9LCB7XG4gICAga2V5OiBcImNoYWNraW5nQ291bnRFbXBsb3llZUluSG9saVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjaGFja2luZ0NvdW50RW1wbG95ZWVJbkhvbGkoZmlsdGVyZWRBcnIpIHtcbiAgICAgIHZhciByZXMgPSAoZmlsdGVyZWRBcnIubGVuZ3RoICsgMSkgKiAxMDAgLyB0aGlzLmFyckVtcGxveWVlcy5sZW5ndGg7XG4gICAgICBpZiAocmVzID4gNTApIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFwi0J/QviDQtNCw0L3QvdC+0Lkg0YHQv9C10YbQuNCw0LvRjNC90L7RgdGC0Lgg0L3QtdC70YzQt9GPINGD0YXQvtC00LjRgtGMINCyINC+0YLQv9GD0YHQuiAo0LIg0L7RgtC/0YPRgdC60LUg0LjQvNC10Y7RgiDQv9GA0LDQstC+INC90LDRhdC+0LTQuNGC0YzRgdGPINC90LUg0LHQvtC70LXQtSA1MCUg0YHQvtGC0YDRg9C00L3QuNC60L7QsiDQvtC00L3QvtC5INC00L7Qu9C20L3QvtGB0YLQuClcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNoYWNraW5nRGF0ZVdpdGhDdXJyZW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNoYWNraW5nRGF0ZVdpdGhDdXJyZW50KGFyciwgZGF0ZUZyb20pIHtcbiAgICAgIHZhciB0bXAgPSBhcnIuZmluZChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICBpZiAoaXRlbS5kYXRlRnJvbSA9PSBkYXRlRnJvbSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmICh0bXApIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFwi0JTQsNC90L3Ri9C1INC00LDRgtGLINGD0LbQtSDQuNC80LXRjtGC0YHRj1wiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoYXJyKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY2hlY2tpbmdSYW5nZURhdGVzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNoZWNraW5nUmFuZ2VEYXRlcyhkaWZmQmV0d2VlbkRhdGVzV2l0aExILCBkaWZmQmV0d2VlbkRhdGVMYXN0SG9saSkge1xuICAgICAgZGlmZkJldHdlZW5EYXRlTGFzdEhvbGkgPSBkaWZmQmV0d2VlbkRhdGVMYXN0SG9saSArIDI7XG4gICAgICBpZiAoZGlmZkJldHdlZW5EYXRlTGFzdEhvbGkgPiBkaWZmQmV0d2VlbkRhdGVzV2l0aExIKSB7XG4gICAgICAgIHZhciBpbmZvRXJyb3IgPSBkaWZmQmV0d2VlbkRhdGVMYXN0SG9saSAtIGRpZmZCZXR3ZWVuRGF0ZXNXaXRoTEg7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcIlxcdTA0MTJcXHUwNDRCXFx1MDQzMVxcdTA0NDBcXHUwNDMwXFx1MDQzRFxcdTA0M0RcXHUwNDRCXFx1MDQzOSBcXHUwNDM0XFx1MDQzOFxcdTA0MzBcXHUwNDNGXFx1MDQzMFxcdTA0MzdcXHUwNDNFXFx1MDQzRCBcXHUwNDM0XFx1MDQzMFxcdTA0NDIgXFx1MDQzRFxcdTA0MzUgXFx1MDQ0MVxcdTA0M0VcXHUwNDNFXFx1MDQ0MlxcdTA0MzJcXHUwNDM1XFx1MDQ0MlxcdTA0NDFcXHUwNDMyXFx1MDQ0M1xcdTA0NEVcXHUwNDQyIFxcdTA0M0ZcXHUwNDQwXFx1MDQzMFxcdTA0MzJcXHUwNDM4XFx1MDQzQlxcdTA0NDMgKFxcdTA0M0NcXHUwNDM4XFx1MDQzRFxcdTA0MzhcXHUwNDNDXFx1MDQzMFxcdTA0M0JcXHUwNDRDXFx1MDQzRFxcdTA0NEJcXHUwNDM5IFxcdTA0M0ZcXHUwNDM1XFx1MDQ0MFxcdTA0MzhcXHUwNDNFXFx1MDQzNCBcXHUwNDNDXFx1MDQzNVxcdTA0MzZcXHUwNDM0XFx1MDQ0MyBcXHUwNDNGXFx1MDQzNVxcdTA0NDBcXHUwNDM4XFx1MDQzRVxcdTA0MzRcXHUwNDMwXFx1MDQzQ1xcdTA0MzggXFx1MDQzRVxcdTA0NDJcXHUwNDNGXFx1MDQ0M1xcdTA0NDFcXHUwNDNBXFx1MDQzMCBcXHUwNDQwXFx1MDQzMFxcdTA0MzJcXHUwNDM1XFx1MDQzRCBcXHUwNDQwXFx1MDQzMFxcdTA0MzdcXHUwNDNDXFx1MDQzNVxcdTA0NDBcXHUwNDQzIFxcdTA0M0ZcXHUwNDQwXFx1MDQzRVxcdTA0NDhcXHUwNDNCXFx1MDQzRVxcdTA0MzNcXHUwNDNFIFxcdTA0M0VcXHUwNDQyXFx1MDQzRlxcdTA0NDNcXHUwNDQxXFx1MDQzQVxcdTA0MzApLCBcXHUwNDEyXFx1MDQ0QiBcXHUwNDM1XFx1MDQ0OVxcdTA0MzUgXFx1MDQzNFxcdTA0M0VcXHUwNDNCXFx1MDQzNlxcdTA0M0RcXHUwNDRCIFxcdTA0M0ZcXHUwNDQwXFx1MDQzRVxcdTA0NDBcXHUwNDMwXFx1MDQzMVxcdTA0M0VcXHUwNDQyXFx1MDQzMFxcdTA0NDJcXHUwNDRDIFwiICsgaW5mb0Vycm9yICsgXCIgXFx1MDQzNFxcdTA0M0QuXCIpO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImZpbHRlckJ5UG9zaXRpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZmlsdGVyQnlQb3NpdGlvbihpZEVtcGxveWVlLCBwb3NpdGlvbkVtcGxveWVlLCBhcnJEYXRlKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZGIuZmV0Y2goXCJob2xpZGF5c1wiKTtcbiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfSkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICByZXR1cm4gX3RoaXMyLmFyckRhdGUgPSBhcnJEYXRlIHx8IGRhdGE7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGRiLmZldGNoKFwiZW1wbG95ZWVzXCIpO1xuICAgICAgfSkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICByZXR1cm4gX3RoaXMyLmFyckVtcGxveWVlcyA9IGRhdGE7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLmFyckVtcGxveWVlcyA9IF90aGlzMi5maWx0ZXJVc2VyQnlQb3NpdGlvbShwb3NpdGlvbkVtcGxveWVlLCBfdGhpczIuYXJyRW1wbG95ZWVzKTtcblxuICAgICAgICBfdGhpczIuYXJyRGF0ZSA9IF90aGlzMi5hcnJEYXRlLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgIHZhciB0bXAgPSBzb3J0QXJyLmdldFVzZXJCeUlkKGl0ZW0uaWQsIF90aGlzMi5hcnJFbXBsb3llZXMpO1xuICAgICAgICAgIGlmICh0bXAgJiYgaXRlbS5pZCA9PT0gdG1wLmlkKSB7XG4gICAgICAgICAgICByZXR1cm4gaXRlbS5pZDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImZpbHRlckJ5RGF0ZVJhbmdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZpbHRlckJ5RGF0ZVJhbmdlKGRhdGVGcm9tKSB7XG4gICAgICB2YXIgbmV3QXJyID0gdGhpcy5hcnJEYXRlLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gZGF0ZUZyb20gPj0gaXRlbS5kYXRlRnJvbSAmJiBkYXRlRnJvbSA8PSBpdGVtLmRhdGVUbztcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG5ld0FycjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZmlsdGVyQnlJZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmaWx0ZXJCeUlkKGlkRW1wbG95ZWUpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBmaWx0ZXJBcnIgPSBfdGhpczMuYXJyRGF0ZS5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICBpZiAoaXRlbS5pZCA9PT0gaWRFbXBsb3llZSkge1xuICAgICAgICAgICAgcmV0dXJuIGl0ZW0uaWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZpbHRlckFycjtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJmaWx0ZXJVc2VyQnlQb3NpdGlvbVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmaWx0ZXJVc2VyQnlQb3NpdGlvbSh1c2VyUG9zaSwgdXNlcnMpIHtcbiAgICAgIHJldHVybiB1c2Vycy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIHVzZXJQb3NpID09PSBpdGVtLnBvc2l0aW9uO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInRvQ291bnREaWZmQmV0d2VlbkRhdGVzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvQ291bnREaWZmQmV0d2VlbkRhdGVzKGRhdGVGcm9tLCBkYXRlVG8pIHtcbiAgICAgIGRhdGVGcm9tID0gbmV3IERhdGUoZGF0ZUZyb20pO1xuICAgICAgZGF0ZVRvID0gbmV3IERhdGUoZGF0ZVRvKTtcbiAgICAgIHJldHVybiAoZGF0ZVRvIC0gZGF0ZUZyb20pIC8gMTAwMCAvIDYwIC8gNjAgLyAyNCArIDE7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEJ1c2luZXNzUmVxdWlyZW1lbnRzO1xufSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBCdXNpbmVzc1JlcXVpcmVtZW50cztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrSjFjMmx1WlhOelVtVnhkV2x5WlcxbGJuUnpMbXB6SWwwc0ltNWhiV1Z6SWpwYkltUmlJaXdpYzI5eWRFRnljaUlzSWtKMWMybHVaWE56VW1WeGRXbHlaVzFsYm5Seklpd2lZWEp5Ulcxd2JHOTVaV1Z6SWl3aVlYSnlSR0YwWlNJc0ltTnZkVzUwUkdGNWN5SXNJbVJoZEdWR2NtOXRJaXdpWkdGMFpWUnZJaXdpYVdSRmJYQnNiM2xsWlNJc0luQnZjMmwwYVc5dVJXMXdiRzk1WldVaUxDSlFjbTl0YVhObElpd2ljbVZxWldOMElpd2ljbVZ6YjJ4MlpTSXNJblJvWlc0aUxDSjBiME52ZFc1MFJHbG1aa0psZEhkbFpXNUVZWFJsY3lJc0ltTm9aV05yYVc1blRXRjRRMjkxYm5SRVlYa2lMQ0prYVdabVFtVjBkMlZsYmtSaGRHVnpJaXdpWTJobFkydHBibWROYVc1RVlYbHpUMjVJYjJ4cFpHRjVJaXdpWTJobFkydHBibWROWVhoRVlYbHpUMjVJYjJ4cFpHRjVJaXdpWm1sc2RHVnlRbmxRYjNOcGRHbHZiaUlzSW1acGJIUmxja0o1UkdGMFpWSmhibWRsSWl3aVkyaGhZMnRwYm1kRGIzVnVkRVZ0Y0d4dmVXVmxTVzVJYjJ4cElpd2labWxzZEdWeVpXUkJjbklpTENKbWFXeDBaWEpDZVVsa0lpd2lZMmhoWTJ0cGJtZEVZWFJsVjJsMGFFTjFjbkpsYm5RaUxDSm1hV3gwWlhKQmNuSWlMQ0p6YjNKMElpd2ljMjl5ZEdWa1FYSnlJaXdpWm1sdVpDSXNJbWwwWlcwaUxDSnZZbW9pTENKa2FXWm1RbVYwZDJWbGJrUmhkR1ZNWVhOMFNHOXNhU0lzSW1ScFptWkNaWFIzWldWdVJHRjBaWE5YYVhSb1RFZ2lMQ0pqYUdWamEybHVaMUpoYm1kbFJHRjBaWE1pTENKeVpYTWlMQ0pzWlc1bmRHZ2lMQ0poY25JaUxDSjBiWEFpTENKcGJtWnZSWEp5YjNJaUxDSm1aWFJqYUNJc0ltTmhkR05vSWl3aVpHRjBZU0lzSW1acGJIUmxjbFZ6WlhKQ2VWQnZjMmwwYVc5dElpd2labWxzZEdWeUlpd2laMlYwVlhObGNrSjVTV1FpTENKcFpDSXNJbTVsZDBGeWNpSXNJblZ6WlhKUWIzTnBJaXdpZFhObGNuTWlMQ0p3YjNOcGRHbHZiaUlzSWtSaGRHVWlYU3dpYldGd2NHbHVaM01pT2lJN096czdPenM3TzBGQlFVRTdPenM3UVVGRFFUczdPenM3T3pzN1FVRkRRU3hKUVVGSlFTeExRVUZMTEd0Q1FVRlVPMEZCUTBFc1NVRkJTVU1zVlVGQlZTeDFRa0ZCWkRzN1NVRkZUVU1zYjBJN1FVRkRTaXhyUTBGQll6dEJRVUZCT3p0QlFVTmFMRk5CUVV0RExGbEJRVXdzUjBGQmIwSXNSVUZCY0VJN1FVRkRRU3hUUVVGTFF5eFBRVUZNTEVkQlFXVXNSVUZCWmp0QlFVTkVPenM3TzJsRFFVVkRReXhUTEVWQlEwRkRMRkVzUlVGRFFVTXNUU3hGUVVOQlF5eFZMRVZCUTBGRExHZENMRVZCUTBGTUxFOHNSVUZEUVR0QlFVRkJPenRCUVVOQkxGVkJRVWtzUTBGQlEwVXNVVUZCUkN4SlFVRmhMRU5CUVVORExFMUJRV3hDTEVWQlFUQkNMRTlCUVU5SExGRkJRVkZETEUxQlFWSXNRMEZCWlN4bFFVRm1MRU5CUVZBN1FVRkRNVUlzWVVGQlQwUXNVVUZCVVVVc1QwRkJVaXhIUVVOS1F5eEpRVVJKTEVOQlEwTTdRVUZCUVN4bFFVRk5MRTFCUVV0RExIVkNRVUZNTEVOQlFUWkNVaXhSUVVFM1FpeEZRVUYxUTBNc1RVRkJka01zUTBGQlRqdEJRVUZCTEU5QlJFUXNSVUZGU2swc1NVRkdTU3hEUVVWRE8wRkJRVUVzWlVGRFNpeE5RVUZMUlN4dFFrRkJUQ3hEUVVGNVFsWXNVMEZCZWtJc1JVRkJiME5YTEdkQ1FVRndReXhEUVVSSk8wRkJRVUVzVDBGR1JDeEZRVXRLU0N4SlFVeEpMRU5CUzBNN1FVRkJRU3hsUVVGdlFpeE5RVUZMU1N4M1FrRkJUQ3hEUVVFNFFrUXNaMEpCUVRsQ0xFTkJRWEJDTzBGQlFVRXNUMEZNUkN4RlFVMUtTQ3hKUVU1SkxFTkJUVU03UVVGQlFTeGxRVUZ2UWl4TlFVRkxTeXgzUWtGQlRDeERRVUU0UWtZc1owSkJRVGxDTEVOQlFYQkNPMEZCUVVFc1QwRk9SQ3hGUVU5S1NDeEpRVkJKTEVOQlQwTTdRVUZCUVN4bFFVRk5MRTFCUVV0TkxHZENRVUZNTEVOQlFYTkNXQ3hWUVVGMFFpeEZRVUZyUTBNc1owSkJRV3hETEVWQlFXOUVUQ3hQUVVGd1JDeERRVUZPTzBGQlFVRXNUMEZRUkN4RlFWRktVeXhKUVZKSkxFTkJVVU03UVVGQlFTeGxRVUZOTEUxQlFVdFBMR2xDUVVGTUxFTkJRWFZDWkN4UlFVRjJRaXhGUVVGcFEwTXNUVUZCYWtNc1EwRkJUanRCUVVGQkxFOUJVa1FzUlVGVFNrMHNTVUZVU1N4RFFWTkRPMEZCUVVFc1pVRkJaU3hOUVVGTFVTd3lRa0ZCVEN4RFFVRnBRME1zVjBGQmFrTXNRMEZCWmp0QlFVRkJMRTlCVkVRc1JVRlZTbFFzU1VGV1NTeERRVlZETzBGQlFVRXNaVUZCVFN4TlFVRkxWU3hWUVVGTUxFTkJRV2RDWml4VlFVRm9RaXhEUVVGT08wRkJRVUVzVDBGV1JDeEZRVmRLU3l4SlFWaEpMRU5CVjBNN1FVRkJRU3hsUVVGaExFMUJRVXRYTEhWQ1FVRk1MRU5CUVRaQ1F5eFRRVUUzUWl4RlFVRjNRMjVDTEZGQlFYaERMRU5CUVdJN1FVRkJRU3hQUVZoRUxFVkJXVXBQTEVsQldra3NRMEZaUXp0QlFVRkJMR1ZCUVdGYUxGRkJRVkY1UWl4SlFVRlNMRU5CUVdGRUxGTkJRV0lzUlVGQmQwSXNkMEpCUVhoQ0xFTkJRV0k3UVVGQlFTeFBRVnBFTEVWQllVcGFMRWxCWWtrc1EwRmhReXh4UWtGQllUdEJRVU5xUWl4bFFVRlBZeXhWUVVGVlF5eEpRVUZXTEVOQlFXVXNaMEpCUVZFN1FVRkROVUlzWTBGQlNVTXNTMEZCUzNSQ0xFMUJRVXdzU1VGQlpVUXNVVUZCYmtJc1JVRkJOa0k3UVVGRE0wSXNiVUpCUVU4c1NVRkJVRHRCUVVORU8wRkJRMFlzVTBGS1RTeERRVUZRTzBGQlMwUXNUMEZ1UWtrc1JVRnZRa3BQTEVsQmNFSkpMRU5CYjBKRExHVkJRVTg3UVVGRFdDeFpRVUZKTEVOQlFVTnBRaXhIUVVGTUxFVkJRVlU3UVVGRFVpeHBRa0ZCVDNCQ0xGRkJRVkZGTEU5QlFWSXNSVUZCVUR0QlFVTkVPMEZCUTBRc1dVRkJTVzFDTERCQ1FVRXdRaXhOUVVGTGFrSXNkVUpCUVV3c1EwRkROVUpuUWl4SlFVRkplRUlzVVVGRWQwSXNSVUZGTlVKM1FpeEpRVUZKZGtJc1RVRkdkMElzUTBGQk9VSTdRVUZKUVN4WlFVRkplVUlzZVVKQlFYbENMRTFCUVV0c1FpeDFRa0ZCVEN4RFFVTXpRbWRDTEVsQlFVbDJRaXhOUVVSMVFpeEZRVVV6UWtRc1VVRkdNa0lzUTBGQk4wSTdRVUZKUVN4bFFVRlBMRTFCUVVzeVFpeHJRa0ZCVEN4RFFVTk1SQ3h6UWtGRVN5eEZRVVZNUkN4MVFrRkdTeXhEUVVGUU8wRkJTVVFzVDBGd1Ewa3NRMEZCVUR0QlFYRkRSRHM3TzNkRFFVVnRRakZDTEZNc1JVRkJWMWNzWjBJc1JVRkJhMEk3UVVGREwwTXNWVUZCU1Znc1lVRkJZU3hEUVVGcVFpeEZRVUZ2UWp0QlFVTnNRaXhsUVVGUFN5eFJRVUZSUXl4TlFVRlNMRU5CUTB3c2FVVkJSRXNzUTBGQlVEdEJRVWRFTEU5QlNrUXNUVUZKVHl4SlFVRkpTeXh0UWtGQmJVSllMRk5CUVhaQ0xFVkJRV3RETzBGQlEzWkRMR1ZCUVU5TExGRkJRVkZETEUxQlFWSXNiVXBCUTNkQ1N5eG5Ra0ZFZUVJc0sweEJRMmxHV0N4VFFVUnFSaXh2UWtGQlVEdEJRVWRFTzBGQlEwUXNZVUZCVDBzc1VVRkJVVVVzVDBGQlVpeERRVUZuUWtrc1owSkJRV2hDTEVOQlFWQTdRVUZEUkRzN096WkRRVU4zUWtFc1owSXNSVUZCYTBJN1FVRkRla01zVlVGQlNVRXNiVUpCUVcxQ0xFTkJRWFpDTEVWQlFUQkNPMEZCUTNoQ0xHVkJRVTlPTEZGQlFWRkRMRTFCUVZJc1EwRkRUQ3h6UmtGRVN5eERRVUZRTzBGQlIwUTdRVUZEUkN4aFFVRlBSQ3hSUVVGUlJTeFBRVUZTTEVOQlFXZENTU3huUWtGQmFFSXNRMEZCVUR0QlFVTkVPenM3TmtOQlEzZENRU3huUWl4RlFVRnJRanRCUVVONlF5eFZRVUZKUVN4dFFrRkJiVUlzUlVGQmRrSXNSVUZCTWtJN1FVRkRla0lzWlVGQlQwNHNVVUZCVVVNc1RVRkJVaXd3WlVGRGFVZExMR2RDUVVScVJ5eHZRa0ZCVUR0QlFVZEVPMEZCUTBRc1lVRkJUMDRzVVVGQlVVVXNUMEZCVWl4RFFVRm5Ra2tzWjBKQlFXaENMRU5CUVZBN1FVRkRSRHRCUVVORU96czdPMmRFUVVNMFFrMHNWeXhGUVVGaE8wRkJRM1pETEZWQlFVbFpMRTFCUVUwc1EwRkJRMW9zV1VGQldXRXNUVUZCV2l4SFFVRnhRaXhEUVVGMFFpeEpRVUV5UWl4SFFVRXpRaXhIUVVGcFF5eExRVUZMYUVNc1dVRkJUQ3hEUVVGclFtZERMRTFCUVRkRU8wRkJRMEVzVlVGQlNVUXNUVUZCVFN4RlFVRldMRVZCUVdNN1FVRkRXaXhsUVVGUGVFSXNVVUZCVVVNc1RVRkJVaXhEUVVOTUxEWklRVVJMTEVOQlFWQTdRVUZIUkR0QlFVTkVMR0ZCUVU5RUxGRkJRVkZGTEU5QlFWSXNSVUZCVUR0QlFVTkVPenM3TkVOQlEzVkNkMElzUnl4RlFVRkxPVUlzVVN4RlFVRlZPMEZCUTNKRExGVkJRVWtyUWl4TlFVRk5SQ3hKUVVGSlVpeEpRVUZLTEVOQlFWTXNaMEpCUVZFN1FVRkRla0lzV1VGQlNVTXNTMEZCUzNaQ0xGRkJRVXdzU1VGQmFVSkJMRkZCUVhKQ0xFVkJRU3RDTzBGQlF6ZENMR2xDUVVGUExFbEJRVkE3UVVGRFJEdEJRVU5HTEU5QlNsTXNRMEZCVmp0QlFVdEJMRlZCUVVrclFpeEhRVUZLTEVWQlFWTTdRVUZEVUN4bFFVRlBNMElzVVVGQlVVTXNUVUZCVWl4RFFVRmxMSGxDUVVGbUxFTkJRVkE3UVVGRFJEdEJRVU5FTEdGQlFVOUVMRkZCUVZGRkxFOUJRVklzUTBGQlowSjNRaXhIUVVGb1FpeERRVUZRTzBGQlEwUTdPenQxUTBGRGEwSktMSE5DTEVWQlFYZENSQ3gxUWl4RlFVRjVRanRCUVVOc1JVRXNaME5CUVRCQ1FTd3dRa0ZCTUVJc1EwRkJjRVE3UVVGRFFTeFZRVUZKUVN3d1FrRkJNRUpETEhOQ1FVRTVRaXhGUVVGelJEdEJRVU53UkN4WlFVRkpUU3haUVVGWlVDd3dRa0ZCTUVKRExITkNRVUV4UXp0QlFVTkJMR1ZCUVU5MFFpeFJRVUZSUXl4TlFVRlNMRFI0UWtGRGIwb3lRaXhUUVVSd1NpeHZRa0ZCVUR0QlFVZEJMR1ZCUVU4MVFpeFJRVUZSUlN4UFFVRlNMRVZCUVZBN1FVRkRSRHRCUVVOR096czdjVU5CUldkQ1NpeFZMRVZCUVZsRExHZENMRVZCUVd0Q1RDeFBMRVZCUVZNN1FVRkJRVHM3UVVGRGRFUXNZVUZCVDAwc1VVRkJVVVVzVDBGQlVpeEhRVU5LUXl4SlFVUkpMRU5CUTBNN1FVRkJRU3hsUVVGTllpeEhRVUZIZFVNc1MwRkJTQ3hEUVVGVExGVkJRVlFzUTBGQlRqdEJRVUZCTEU5QlJFUXNSVUZGU2tNc1MwRkdTU3hEUVVWRk8wRkJRVUVzWlVGQlRTeEZRVUZPTzBGQlFVRXNUMEZHUml4RlFVZEtNMElzU1VGSVNTeERRVWRETzBGQlFVRXNaVUZCVXl4UFFVRkxWQ3hQUVVGTUxFZEJRV1ZCTEZkQlFWZHhReXhKUVVGdVF6dEJRVUZCTEU5QlNFUXNSVUZKU2pWQ0xFbEJTa2tzUTBGSlF6dEJRVUZCTEdWQlFVMWlMRWRCUVVkMVF5eExRVUZJTEVOQlFWTXNWMEZCVkN4RFFVRk9PMEZCUVVFc1QwRktSQ3hGUVV0S01VSXNTVUZNU1N4RFFVdERPMEZCUVVFc1pVRkJVeXhQUVVGTFZpeFpRVUZNTEVkQlFXOUNjME1zU1VGQk4wSTdRVUZCUVN4UFFVeEVMRVZCVFVvMVFpeEpRVTVKTEVOQlRVTXNXVUZCVFR0QlFVTldMR1ZCUVV0V0xGbEJRVXdzUjBGQmIwSXNUMEZCUzNWRExHOUNRVUZNTEVOQlEyeENha01zWjBKQlJHdENMRVZCUld4Q0xFOUJRVXRPTEZsQlJtRXNRMEZCY0VJN08wRkJTMEVzWlVGQlMwTXNUMEZCVEN4SFFVRmxMRTlCUVV0QkxFOUJRVXdzUTBGQllYVkRMRTFCUVdJc1EwRkJiMElzWjBKQlFWRTdRVUZEZWtNc1kwRkJTVTRzVFVGQlRYQkRMRkZCUVZFeVF5eFhRVUZTTEVOQlFXOUNaaXhMUVVGTFowSXNSVUZCZWtJc1JVRkJOa0lzVDBGQlN6RkRMRmxCUVd4RExFTkJRVlk3UVVGRFFTeGpRVUZKYTBNc1QwRkJUMUlzUzBGQlMyZENMRVZCUVV3c1MwRkJXVklzU1VGQlNWRXNSVUZCTTBJc1JVRkJLMEk3UVVGRE4wSXNiVUpCUVU5b1FpeExRVUZMWjBJc1JVRkJXanRCUVVORU8wRkJRMFlzVTBGTVl5eERRVUZtTzBGQlRVUXNUMEZzUWtrc1EwRkJVRHRCUVcxQ1JEczdPM05EUVVOcFFuWkRMRkVzUlVGQlZUdEJRVU14UWl4VlFVRkpkME1zVTBGQlV5eExRVUZMTVVNc1QwRkJUQ3hEUVVGaGRVTXNUVUZCWWl4RFFVRnZRaXhuUWtGQlVUdEJRVU4yUXl4bFFVRlBja01zV1VGQldYVkNMRXRCUVV0MlFpeFJRVUZxUWl4SlFVRTJRa0VzV1VGQldYVkNMRXRCUVV0MFFpeE5RVUZ5UkR0QlFVTkVMRTlCUmxrc1EwRkJZanRCUVVkQkxHRkJRVTkxUXl4TlFVRlFPMEZCUTBRN096c3JRa0ZEVlhSRExGVXNSVUZCV1R0QlFVRkJPenRCUVVOeVFpeGhRVUZQUlN4UlFVRlJSU3hQUVVGU0xFZEJRV3RDUXl4SlFVRnNRaXhEUVVGMVFpeFpRVUZOTzBGQlEyeERMRmxCUVVsWkxGbEJRVmtzVDBGQlMzSkNMRTlCUVV3c1EwRkJZWFZETEUxQlFXSXNRMEZCYjBJc1owSkJRVkU3UVVGRE1VTXNZMEZCU1dRc1MwRkJTMmRDTEVWQlFVd3NTMEZCV1hKRExGVkJRV2hDTEVWQlFUUkNPMEZCUXpGQ0xHMUNRVUZQY1VJc1MwRkJTMmRDTEVWQlFWbzdRVUZEUkR0QlFVTkdMRk5CU21Vc1EwRkJhRUk3UVVGTFFTeGxRVUZQY0VJc1UwRkJVRHRCUVVORUxFOUJVRTBzUTBGQlVEdEJRVkZFT3pzN2VVTkJRMjlDYzBJc1VTeEZRVUZWUXl4TExFVkJRVTg3UVVGRGNFTXNZVUZCVDBFc1RVRkJUVXdzVFVGQlRpeERRVUZoTzBGQlFVRXNaVUZCVVVrc1lVRkJZV3hDTEV0QlFVdHZRaXhSUVVFeFFqdEJRVUZCTEU5QlFXSXNRMEZCVUR0QlFVTkVPenM3TkVOQlEzVkNNME1zVVN4RlFVRlZReXhOTEVWQlFWRTdRVUZEZUVORUxHbENRVUZYTEVsQlFVazBReXhKUVVGS0xFTkJRVk0xUXl4UlFVRlVMRU5CUVZnN1FVRkRRVU1zWlVGQlV5eEpRVUZKTWtNc1NVRkJTaXhEUVVGVE0wTXNUVUZCVkN4RFFVRlVPMEZCUTBFc1lVRkJUeXhEUVVGRFFTeFRRVUZUUkN4UlFVRldMRWxCUVhOQ0xFbEJRWFJDTEVkQlFUWkNMRVZCUVRkQ0xFZEJRV3RETEVWQlFXeERMRWRCUVhWRExFVkJRWFpETEVkQlFUUkRMRU5CUVc1RU8wRkJRMFE3T3pzN096dHJRa0ZIV1Vvc2IwSWlMQ0ptYVd4bElqb2lRblZ6YVc1bGMzTlNaWEYxYVhKbGJXVnVkSE11YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnBiWEJ2Y25RZ1JFSWdabkp2YlNCY0lpNHZSRUpjSWp0Y2JtbHRjRzl5ZENCVGIzSjBRWEp5SUdaeWIyMGdYQ0l1THk0dUwyTnZiWEJ2Ym1WdWRITXZVMjl5ZEVGeWNsd2lPMXh1YkdWMElHUmlJRDBnYm1WM0lFUkNLQ2s3WEc1c1pYUWdjMjl5ZEVGeWNpQTlJRzVsZHlCVGIzSjBRWEp5S0NrN1hHNWNibU5zWVhOeklFSjFjMmx1WlhOelVtVnhkV2x5WlcxbGJuUnpJSHRjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9LU0I3WEc0Z0lDQWdkR2hwY3k1aGNuSkZiWEJzYjNsbFpYTWdQU0JiWFR0Y2JpQWdJQ0IwYUdsekxtRnlja1JoZEdVZ1BTQmJYVHRjYmlBZ2ZWeHVJQ0JqYUdWamEybHVaMFJoZEdFb1hHNGdJQ0FnWTI5MWJuUkVZWGx6TEZ4dUlDQWdJR1JoZEdWR2NtOXRMRnh1SUNBZ0lHUmhkR1ZVYnl4Y2JpQWdJQ0JwWkVWdGNHeHZlV1ZsTEZ4dUlDQWdJSEJ2YzJsMGFXOXVSVzF3Ykc5NVpXVXNYRzRnSUNBZ1lYSnlSR0YwWlZ4dUlDQXBJSHRjYmlBZ0lDQnBaaUFvSVdSaGRHVkdjbTl0SUh4OElDRmtZWFJsVkc4cElISmxkSFZ5YmlCUWNtOXRhWE5sTG5KbGFtVmpkQ2hjSXRDUzBZdlFzZEMxMFlEUXVOR0MwTFVnMExUUXNOR0MwWU5jSWlrN1hHNGdJQ0FnY21WMGRYSnVJRkJ5YjIxcGMyVXVjbVZ6YjJ4MlpTZ3BYRzRnSUNBZ0lDQXVkR2hsYmlnb0tTQTlQaUIwYUdsekxuUnZRMjkxYm5SRWFXWm1RbVYwZDJWbGJrUmhkR1Z6S0dSaGRHVkdjbTl0TENCa1lYUmxWRzhwS1Z4dUlDQWdJQ0FnTG5Sb1pXNG9aR2xtWmtKbGRIZGxaVzVFWVhSbGN5QTlQbHh1SUNBZ0lDQWdJQ0IwYUdsekxtTm9aV05yYVc1blRXRjRRMjkxYm5SRVlYa29ZMjkxYm5SRVlYbHpMQ0JrYVdabVFtVjBkMlZsYmtSaGRHVnpLVnh1SUNBZ0lDQWdLVnh1SUNBZ0lDQWdMblJvWlc0b1pHbG1aa0psZEhkbFpXNUVZWFJsY3lBOVBpQjBhR2x6TG1Ob1pXTnJhVzVuVFdsdVJHRjVjMDl1U0c5c2FXUmhlU2hrYVdabVFtVjBkMlZsYmtSaGRHVnpLU2xjYmlBZ0lDQWdJQzUwYUdWdUtHUnBabVpDWlhSM1pXVnVSR0YwWlhNZ1BUNGdkR2hwY3k1amFHVmphMmx1WjAxaGVFUmhlWE5QYmtodmJHbGtZWGtvWkdsbVprSmxkSGRsWlc1RVlYUmxjeWtwWEc0Z0lDQWdJQ0F1ZEdobGJpZ29LU0E5UGlCMGFHbHpMbVpwYkhSbGNrSjVVRzl6YVhScGIyNG9hV1JGYlhCc2IzbGxaU3dnY0c5emFYUnBiMjVGYlhCc2IzbGxaU3dnWVhKeVJHRjBaU2twWEc0Z0lDQWdJQ0F1ZEdobGJpZ29LU0E5UGlCMGFHbHpMbVpwYkhSbGNrSjVSR0YwWlZKaGJtZGxLR1JoZEdWR2NtOXRMQ0JrWVhSbFZHOHBLVnh1SUNBZ0lDQWdMblJvWlc0b1ptbHNkR1Z5WldSQmNuSWdQVDRnZEdocGN5NWphR0ZqYTJsdVowTnZkVzUwUlcxd2JHOTVaV1ZKYmtodmJHa29abWxzZEdWeVpXUkJjbklwS1Z4dUlDQWdJQ0FnTG5Sb1pXNG9LQ2tnUFQ0Z2RHaHBjeTVtYVd4MFpYSkNlVWxrS0dsa1JXMXdiRzk1WldVcEtWeHVJQ0FnSUNBZ0xuUm9aVzRvWm1sc2RHVnlRWEp5SUQwK0lIUm9hWE11WTJoaFkydHBibWRFWVhSbFYybDBhRU4xY25KbGJuUW9abWxzZEdWeVFYSnlMQ0JrWVhSbFJuSnZiU2twWEc0Z0lDQWdJQ0F1ZEdobGJpaG1hV3gwWlhKQmNuSWdQVDRnYzI5eWRFRnljaTV6YjNKMEtHWnBiSFJsY2tGeWNpd2dYQ0p6YjNKMFFubEVZWFJsVkc5RVpYTmpaVzVrYVc1blhDSXBLVnh1SUNBZ0lDQWdMblJvWlc0b2MyOXlkR1ZrUVhKeUlEMCtJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSE52Y25SbFpFRnljaTVtYVc1a0tHbDBaVzBnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJR2xtSUNocGRHVnRMbVJoZEdWVWJ5QThQU0JrWVhSbFJuSnZiU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0F1ZEdobGJpaHZZbW9nUFQ0Z2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVc5aWFpa2dlMXh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJRY205dGFYTmxMbkpsYzI5c2RtVW9LVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCc1pYUWdaR2xtWmtKbGRIZGxaVzVFWVhSbFRHRnpkRWh2YkdrZ1BTQjBhR2x6TG5SdlEyOTFiblJFYVdabVFtVjBkMlZsYmtSaGRHVnpLRnh1SUNBZ0lDQWdJQ0FnSUc5aWFpNWtZWFJsUm5KdmJTeGNiaUFnSUNBZ0lDQWdJQ0J2WW1vdVpHRjBaVlJ2WEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JrYVdabVFtVjBkMlZsYmtSaGRHVnpWMmwwYUV4SUlEMGdkR2hwY3k1MGIwTnZkVzUwUkdsbVprSmxkSGRsWlc1RVlYUmxjeWhjYmlBZ0lDQWdJQ0FnSUNCdlltb3VaR0YwWlZSdkxGeHVJQ0FnSUNBZ0lDQWdJR1JoZEdWR2NtOXRYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtTm9aV05yYVc1blVtRnVaMlZFWVhSbGN5aGNiaUFnSUNBZ0lDQWdJQ0JrYVdabVFtVjBkMlZsYmtSaGRHVnpWMmwwYUV4SUxGeHVJQ0FnSUNBZ0lDQWdJR1JwWm1aQ1pYUjNaV1Z1UkdGMFpVeGhjM1JJYjJ4cFhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUdOb1pXTnJhVzVuVFdGNFEyOTFiblJFWVhrb1kyOTFiblJFWVhsekxDQmthV1ptUW1WMGQyVmxia1JoZEdWektTQjdYRzRnSUNBZ2FXWWdLR052ZFc1MFJHRjVjeUE4UFNBeEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1VISnZiV2x6WlM1eVpXcGxZM1FvWEc0Z0lDQWdJQ0FnSUZ3aTBKVFFzTkM5MEwzUmk5QzVJTkdCMEw3Umd0R0EwWVBRdE5DOTBMalF1aURRdmRDMTBMelF2dEMyMExYUmdpRFFzZEMrMEx2UmpOR0kwTFVnMExMUmk5R0YwTDdRdE5DNDBZTFJqQ0RRc2lEUXZ0R0MwTC9SZzlHQjBMb2cwTElnMExUUXNOQzkwTDNRdnRDOElOQ3owTDdRdE5HRFhDSmNiaUFnSUNBZ0lDazdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaGthV1ptUW1WMGQyVmxia1JoZEdWeklENGdZMjkxYm5SRVlYbHpLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdVSEp2YldselpTNXlaV3BsWTNRb1hHNGdJQ0FnSUNBZ0lHRFFuOUMxMFlEUXVOQyswTFFnMEw3Umd0Qy8wWVBSZ2RDNjBMQWcwWUhRdnRHQjBZTFFzTkN5MEx2Umo5QzEwWUlnSkh0a2FXWm1RbVYwZDJWbGJrUmhkR1Z6ZlNEUXROQzlMaXdnMExBZzBZTWcwTFRRc05DOTBMM1F2dEN6MEw0ZzBZSFF2dEdDMFlEUmc5QzAwTDNRdU5DNjBMQWcwTDdSZ2RHQzBMRFF1OUMrMFlIUmpDQWtlMk52ZFc1MFJHRjVjMzBnMExUUXZTNWdYRzRnSUNBZ0lDQXBPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnVUhKdmJXbHpaUzV5WlhOdmJIWmxLR1JwWm1aQ1pYUjNaV1Z1UkdGMFpYTXBPMXh1SUNCOVhHNGdJR05vWldOcmFXNW5UV2x1UkdGNWMwOXVTRzlzYVdSaGVTaGthV1ptUW1WMGQyVmxia1JoZEdWektTQjdYRzRnSUNBZ2FXWWdLR1JwWm1aQ1pYUjNaV1Z1UkdGMFpYTWdQQ0F5S1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnVUhKdmJXbHpaUzV5WldwbFkzUW9YRzRnSUNBZ0lDQWdJRndpMEpMUmk5Q3gwWURRc05DOTBMM1JpOUM1SU5DMDBMalFzTkMvMExEUXQ5QyswTDBnMExUUXNOR0NJTkM5MExVZzBZSFF2dEMrMFlMUXN0QzEwWUxSZ2RDeTBZUFJqdEdDSU5DLzBZRFFzTkN5MExqUXU5R0RJQ2pRdk5DNDBMM1F1TkM4MExEUXU5R00wTDNRdnRDMUlOQzYwTDdRdXk0ZzBMVFF2ZEMxMExrZzBMSWcwTDdSZ3RDLzBZUFJnZEM2MExVZ1BTQXlLVndpWEc0Z0lDQWdJQ0FwTzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z1VISnZiV2x6WlM1eVpYTnZiSFpsS0dScFptWkNaWFIzWldWdVJHRjBaWE1wTzF4dUlDQjlYRzRnSUdOb1pXTnJhVzVuVFdGNFJHRjVjMDl1U0c5c2FXUmhlU2hrYVdabVFtVjBkMlZsYmtSaGRHVnpLU0I3WEc0Z0lDQWdhV1lnS0dScFptWkNaWFIzWldWdVJHRjBaWE1nUGlBeE5Ta2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlGQnliMjFwYzJVdWNtVnFaV04wS0Z4dUlDQWdJQ0FnSUNCZzBKTFJpOUN4MFlEUXNOQzkwTDNSaTlDNUlOQzAwTGpRc05DLzBMRFF0OUMrMEwwZzBMVFFzTkdDSU5DOTBMVWcwWUhRdnRDKzBZTFFzdEMxMFlMUmdkQ3kwWVBSanRHQ0lOQy8wWURRc05DeTBMalF1OUdESUNqUXZOQ3cwTHJSZ2RDNDBMelFzTkM3MFl6UXZkQyswTFVnMExyUXZ0QzdMaURRdE5DOTBMWFF1U0RRc2lEUXZ0R0MwTC9SZzlHQjBMclF0U0E5SURFMUtTd2cwTEFnMExMUmk5Q3gwWURRc05DOTBMM1F2aUFrZTJScFptWkNaWFIzWldWdVJHRjBaWE45SU5DMDBMMHVZRnh1SUNBZ0lDQWdLVHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUZCeWIyMXBjMlV1Y21WemIyeDJaU2hrYVdabVFtVjBkMlZsYmtSaGRHVnpLVHRjYmlBZ2ZWeHVJQ0F2TDlDU0lOQzMwTERRdE5DdzBMM1F1TkM0SU5DOTBMVWcwWUhRdXRDdzBMZlFzTkM5MExBc0lOR0gwWUxRdmlEUXROQzEwTHZRc05HQzBZd2cwTFhSZ2RDNzBMZ2cwWWZRdGRDNzBMN1FzdEMxMExvZzBMN1F0TkM0MEwwZzBMM1FzQ0RRdE5DKzBMdlF0dEM5MEw3UmdkR0MwTGdzSU5DLzBMN1JqZEdDMEw3UXZOR0RJTkdBMExYUmlOQzQwTHNnMExYUXM5QytJTkM5MExVZzBMN1JndEMvMFlEUXNOQ3kwTHZSajlHQzBZd2cwTElnMEw3Umd0Qy8wWVBSZ1N3ZzBZSXUwTG91SU5DeUlOR0MwWURRdGRDeDBMN1F1TkN5MExEUXZkQzQwTGdnMEwzUXRTRFFzZEMrMEx2UXRkQzFJRFV3SlN3ZzBMQWcwWTNSZ3RDK0lERXdNQ1ZjYmlBZ1kyaGhZMnRwYm1kRGIzVnVkRVZ0Y0d4dmVXVmxTVzVJYjJ4cEtHWnBiSFJsY21Wa1FYSnlLU0I3WEc0Z0lDQWdiR1YwSUhKbGN5QTlJQ2htYVd4MFpYSmxaRUZ5Y2k1c1pXNW5kR2dnS3lBeEtTQXFJREV3TUNBdklIUm9hWE11WVhKeVJXMXdiRzk1WldWekxteGxibWQwYUR0Y2JpQWdJQ0JwWmlBb2NtVnpJRDRnTlRBcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCUWNtOXRhWE5sTG5KbGFtVmpkQ2hjYmlBZ0lDQWdJQ0FnWENMUW45QytJTkMwMExEUXZkQzkwTDdRdVNEUmdkQy8wTFhSaHRDNDBMRFF1OUdNMEwzUXZ0R0IwWUxRdUNEUXZkQzEwTHZSak5DMzBZOGcwWVBSaGRDKzBMVFF1TkdDMFl3ZzBMSWcwTDdSZ3RDLzBZUFJnZEM2SUNqUXNpRFF2dEdDMEwvUmc5R0IwTHJRdFNEUXVOQzgwTFhSanRHQ0lOQy8wWURRc05DeTBMNGcwTDNRc05HRjBMN1F0TkM0MFlMUmpOR0IwWThnMEwzUXRTRFFzZEMrMEx2UXRkQzFJRFV3SlNEUmdkQyswWUxSZ05HRDBMVFF2ZEM0MExyUXZ0Q3lJTkMrMExUUXZkQyswTGtnMExUUXZ0QzcwTGJRdmRDKzBZSFJndEM0S1Z3aVhHNGdJQ0FnSUNBcE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdVSEp2YldselpTNXlaWE52YkhabEtDazdYRzRnSUgxY2JpQWdZMmhoWTJ0cGJtZEVZWFJsVjJsMGFFTjFjbkpsYm5Rb1lYSnlMQ0JrWVhSbFJuSnZiU2tnZTF4dUlDQWdJR3hsZENCMGJYQWdQU0JoY25JdVptbHVaQ2hwZEdWdElEMCtJSHRjYmlBZ0lDQWdJR2xtSUNocGRHVnRMbVJoZEdWR2NtOXRJRDA5SUdSaGRHVkdjbTl0S1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHBPMXh1SUNBZ0lHbG1JQ2gwYlhBcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCUWNtOXRhWE5sTG5KbGFtVmpkQ2hjSXRDVTBMRFF2ZEM5MFl2UXRTRFF0TkN3MFlMUml5RFJnOUMyMExVZzBMalF2TkMxMFk3Umd0R0IwWTljSWlrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQlFjbTl0YVhObExuSmxjMjlzZG1Vb1lYSnlLVHRjYmlBZ2ZWeHVJQ0JqYUdWamEybHVaMUpoYm1kbFJHRjBaWE1vWkdsbVprSmxkSGRsWlc1RVlYUmxjMWRwZEdoTVNDd2daR2xtWmtKbGRIZGxaVzVFWVhSbFRHRnpkRWh2YkdrcElIdGNiaUFnSUNCa2FXWm1RbVYwZDJWbGJrUmhkR1ZNWVhOMFNHOXNhU0E5SUdScFptWkNaWFIzWldWdVJHRjBaVXhoYzNSSWIyeHBJQ3NnTWp0Y2JpQWdJQ0JwWmlBb1pHbG1aa0psZEhkbFpXNUVZWFJsVEdGemRFaHZiR2tnUGlCa2FXWm1RbVYwZDJWbGJrUmhkR1Z6VjJsMGFFeElLU0I3WEc0Z0lDQWdJQ0JzWlhRZ2FXNW1iMFZ5Y205eUlEMGdaR2xtWmtKbGRIZGxaVzVFWVhSbFRHRnpkRWh2YkdrZ0xTQmthV1ptUW1WMGQyVmxia1JoZEdWelYybDBhRXhJTzF4dUlDQWdJQ0FnY21WMGRYSnVJRkJ5YjIxcGMyVXVjbVZxWldOMEtGeHVJQ0FnSUNBZ0lDQmcwSkxSaTlDeDBZRFFzTkM5MEwzUmk5QzVJTkMwMExqUXNOQy8wTERRdDlDKzBMMGcwTFRRc05HQ0lOQzkwTFVnMFlIUXZ0QyswWUxRc3RDMTBZTFJnZEN5MFlQUmp0R0NJTkMvMFlEUXNOQ3kwTGpRdTlHRElDalF2TkM0MEwzUXVOQzgwTERRdTlHTTBMM1JpOUM1SU5DLzBMWFJnTkM0MEw3UXRDRFF2TkMxMExiUXROR0RJTkMvMExYUmdOQzQwTDdRdE5DdzBMelF1Q0RRdnRHQzBML1JnOUdCMExyUXNDRFJnTkN3MExMUXRkQzlJTkdBMExEUXQ5QzgwTFhSZ05HRElOQy8wWURRdnRHSTBMdlF2dEN6MEw0ZzBMN1JndEMvMFlQUmdkQzYwTEFwTENEUWt0R0xJTkMxMFluUXRTRFF0TkMrMEx2UXR0QzkwWXNnMEwvUmdOQyswWURRc05DeDBMN1JndEN3MFlMUmpDQWtlMmx1Wm05RmNuSnZjbjBnMExUUXZTNWdYRzRnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdjbVYwZFhKdUlGQnliMjFwYzJVdWNtVnpiMngyWlNncE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lHWnBiSFJsY2tKNVVHOXphWFJwYjI0b2FXUkZiWEJzYjNsbFpTd2djRzl6YVhScGIyNUZiWEJzYjNsbFpTd2dZWEp5UkdGMFpTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCUWNtOXRhWE5sTG5KbGMyOXNkbVVvS1Z4dUlDQWdJQ0FnTG5Sb1pXNG9LQ2tnUFQ0Z1pHSXVabVYwWTJnb1hDSm9iMnhwWkdGNWMxd2lLU2xjYmlBZ0lDQWdJQzVqWVhSamFDZ29LU0E5UGlCYlhTbGNiaUFnSUNBZ0lDNTBhR1Z1S0dSaGRHRWdQVDRnS0hSb2FYTXVZWEp5UkdGMFpTQTlJR0Z5Y2tSaGRHVWdmSHdnWkdGMFlTa3BYRzRnSUNBZ0lDQXVkR2hsYmlnb0tTQTlQaUJrWWk1bVpYUmphQ2hjSW1WdGNHeHZlV1ZsYzF3aUtTbGNiaUFnSUNBZ0lDNTBhR1Z1S0dSaGRHRWdQVDRnS0hSb2FYTXVZWEp5Ulcxd2JHOTVaV1Z6SUQwZ1pHRjBZU2twWEc0Z0lDQWdJQ0F1ZEdobGJpZ29LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WVhKeVJXMXdiRzk1WldWeklEMGdkR2hwY3k1bWFXeDBaWEpWYzJWeVFubFFiM05wZEdsdmJTaGNiaUFnSUNBZ0lDQWdJQ0J3YjNOcGRHbHZia1Z0Y0d4dmVXVmxMRnh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVZWEp5Ulcxd2JHOTVaV1Z6WEc0Z0lDQWdJQ0FnSUNrN1hHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1aGNuSkVZWFJsSUQwZ2RHaHBjeTVoY25KRVlYUmxMbVpwYkhSbGNpaHBkR1Z0SUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ2RHMXdJRDBnYzI5eWRFRnljaTVuWlhSVmMyVnlRbmxKWkNocGRHVnRMbWxrTENCMGFHbHpMbUZ5Y2tWdGNHeHZlV1ZsY3lrN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0hSdGNDQW1KaUJwZEdWdExtbGtJRDA5UFNCMGJYQXVhV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnBkR1Z0TG1sa08xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNCOUtUdGNiaUFnZlZ4dUlDQm1hV3gwWlhKQ2VVUmhkR1ZTWVc1blpTaGtZWFJsUm5KdmJTa2dlMXh1SUNBZ0lHeGxkQ0J1WlhkQmNuSWdQU0IwYUdsekxtRnlja1JoZEdVdVptbHNkR1Z5S0dsMFpXMGdQVDRnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR1JoZEdWR2NtOXRJRDQ5SUdsMFpXMHVaR0YwWlVaeWIyMGdKaVlnWkdGMFpVWnliMjBnUEQwZ2FYUmxiUzVrWVhSbFZHODdYRzRnSUNBZ2ZTazdYRzRnSUNBZ2NtVjBkWEp1SUc1bGQwRnljanRjYmlBZ2ZWeHVJQ0JtYVd4MFpYSkNlVWxrS0dsa1JXMXdiRzk1WldVcElIdGNiaUFnSUNCeVpYUjFjbTRnVUhKdmJXbHpaUzV5WlhOdmJIWmxLQ2t1ZEdobGJpZ29LU0E5UGlCN1hHNGdJQ0FnSUNCc1pYUWdabWxzZEdWeVFYSnlJRDBnZEdocGN5NWhjbkpFWVhSbExtWnBiSFJsY2locGRHVnRJRDArSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR2wwWlcwdWFXUWdQVDA5SUdsa1JXMXdiRzk1WldVcElIdGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdhWFJsYlM1cFpEdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdabWxzZEdWeVFYSnlPMXh1SUNBZ0lIMHBPMXh1SUNCOVhHNGdJR1pwYkhSbGNsVnpaWEpDZVZCdmMybDBhVzl0S0hWelpYSlFiM05wTENCMWMyVnljeWtnZTF4dUlDQWdJSEpsZEhWeWJpQjFjMlZ5Y3k1bWFXeDBaWElvYVhSbGJTQTlQaUIxYzJWeVVHOXphU0E5UFQwZ2FYUmxiUzV3YjNOcGRHbHZiaWs3WEc0Z0lIMWNiaUFnZEc5RGIzVnVkRVJwWm1aQ1pYUjNaV1Z1UkdGMFpYTW9aR0YwWlVaeWIyMHNJR1JoZEdWVWJ5a2dlMXh1SUNBZ0lHUmhkR1ZHY205dElEMGdibVYzSUVSaGRHVW9aR0YwWlVaeWIyMHBPMXh1SUNBZ0lHUmhkR1ZVYnlBOUlHNWxkeUJFWVhSbEtHUmhkR1ZVYnlrN1hHNGdJQ0FnY21WMGRYSnVJQ2hrWVhSbFZHOGdMU0JrWVhSbFJuSnZiU2tnTHlBeE1EQXdJQzhnTmpBZ0x5QTJNQ0F2SURJMElDc2dNVHRjYmlBZ2ZWeHVmVnh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JDZFhOcGJtVnpjMUpsY1hWcGNtVnRaVzUwY3p0Y2JpSmRmUT09XG59KS5jYWxsKHRoaXMscmVxdWlyZShcImUvVSs5N1wiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIsYXJndW1lbnRzWzNdLGFyZ3VtZW50c1s0XSxhcmd1bWVudHNbNV0sYXJndW1lbnRzWzZdLFwiL3V0aWxzXFxcXEJ1c2luZXNzUmVxdWlyZW1lbnRzLmpzXCIsXCIvdXRpbHNcIikiLCIoZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsLEJ1ZmZlcixfX2FyZ3VtZW50MCxfX2FyZ3VtZW50MSxfX2FyZ3VtZW50MixfX2FyZ3VtZW50MyxfX2ZpbGVuYW1lLF9fZGlybmFtZSl7XG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIERCID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBEQigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgREIpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKERCLCBbe1xuICAgIGtleTogXCJzZXRJdGVtXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldEl0ZW0oa2V5LCBkYXRhKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgSlNPTi5zdHJpbmdpZnkoZGF0YSkpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZmV0Y2hcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZmV0Y2goa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KSk7XG4gICAgICBpZiAoZGF0YSkgcmV0dXJuIFByb21pc2UucmVzb2x2ZShkYXRhKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBEQjtcbn0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gREI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa1JDTG1weklsMHNJbTVoYldWeklqcGJJa1JDSWl3aWEyVjVJaXdpWkdGMFlTSXNJbEJ5YjIxcGMyVWlMQ0p5WlhOdmJIWmxJaXdpYkc5allXeFRkRzl5WVdkbElpd2ljMlYwU1hSbGJTSXNJa3BUVDA0aUxDSnpkSEpwYm1kcFpua2lMQ0p3WVhKelpTSXNJbWRsZEVsMFpXMGlMQ0p5WldwbFkzUWlYU3dpYldGd2NHbHVaM01pT2lJN096czdPenM3T3pzN1NVRkJUVUVzUlRzN096czdPenMwUWtGRFNVTXNSeXhGUVVGTFF5eEpMRVZCUVUwN1FVRkRha0lzWVVGQlQwTXNVVUZCVVVNc1QwRkJVaXhEUVVGblFrTXNZVUZCWVVNc1QwRkJZaXhEUVVGeFFrd3NSMEZCY2tJc1JVRkJNRUpOTEV0QlFVdERMRk5CUVV3c1EwRkJaVTRzU1VGQlppeERRVUV4UWl4RFFVRm9RaXhEUVVGUU8wRkJRMFE3T3pzd1FrRkRTMFFzUnl4RlFVRkxPMEZCUTFRc1ZVRkJTVU1zVDBGQlQwc3NTMEZCUzBVc1MwRkJUQ3hEUVVGWFNpeGhRVUZoU3l4UFFVRmlMRU5CUVhGQ1ZDeEhRVUZ5UWl4RFFVRllMRU5CUVZnN1FVRkRRU3hWUVVGSlF5eEpRVUZLTEVWQlFWVXNUMEZCVDBNc1VVRkJVVU1zVDBGQlVpeERRVUZuUWtZc1NVRkJhRUlzUTBGQlVEdEJRVU5XTEdGQlFVOURMRkZCUVZGUkxFMUJRVklzUlVGQlVEdEJRVU5FT3pzN096czdhMEpCUjFsWUxFVWlMQ0ptYVd4bElqb2lSRUl1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SmpiR0Z6Y3lCRVFpQjdYRzRnSUhObGRFbDBaVzBvYTJWNUxDQmtZWFJoS1NCN1hHNGdJQ0FnY21WMGRYSnVJRkJ5YjIxcGMyVXVjbVZ6YjJ4MlpTaHNiMk5oYkZOMGIzSmhaMlV1YzJWMFNYUmxiU2hyWlhrc0lFcFRUMDR1YzNSeWFXNW5hV1o1S0dSaGRHRXBLU2s3WEc0Z0lIMWNiaUFnWm1WMFkyZ29hMlY1S1NCN1hHNGdJQ0FnYkdWMElHUmhkR0VnUFNCS1UwOU9MbkJoY25ObEtHeHZZMkZzVTNSdmNtRm5aUzVuWlhSSmRHVnRLR3RsZVNrcE8xeHVJQ0FnSUdsbUlDaGtZWFJoS1NCeVpYUjFjbTRnVUhKdmJXbHpaUzV5WlhOdmJIWmxLR1JoZEdFcE8xeHVJQ0FnSUhKbGRIVnliaUJRY205dGFYTmxMbkpsYW1WamRDZ3BPMXh1SUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRVJDTzF4dUlsMTlcbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiZS9VKzk3XCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvdXRpbHNcXFxcREIuanNcIixcIi91dGlsc1wiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xudmFyIFJvdXRlciA9IGZ1bmN0aW9uIFJvdXRlcihvcHRpb25zLCBldmVudEJ1cykge1xuICB0aGlzLnJvdXRlcyA9IG9wdGlvbnMucm91dGVzO1xuICB0aGlzLmV2ZW50QnVzID0gZXZlbnRCdXM7XG4gIHRoaXMuaW5pdCgpO1xufTtcblJvdXRlci5wcm90b3R5cGUgPSB7XG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiaGFzaGNoYW5nZVwiLCBmdW5jdGlvbiAoZXYpIHtcbiAgICAgIHJldHVybiBfdGhpcy5oYW5kbGVVcmwoZXYub2xkVVJMLnNwbGl0KFwiI1wiKVsxXSB8fCBcIlwiLCBldi5uZXdVUkwuc3BsaXQoXCIjXCIpWzFdKTtcbiAgICB9KTtcbiAgICB0aGlzLmhhbmRsZVVybCh1bmRlZmluZWQsIHdpbmRvdy5sb2NhdGlvbi5oYXNoLnNsaWNlKDEpKTtcbiAgfSxcbiAgZ2V0UGFyYW06IGZ1bmN0aW9uIGdldFBhcmFtKG5ld1JvdXRlLCBjdXJyZW50Um91dGUpIHtcbiAgICB2YXIgcGFyYW0gPSBuZXdSb3V0ZS5tYXRjaChjdXJyZW50Um91dGUubWF0Y2gpIHx8IFtdO1xuICAgIHJldHVybiBwYXJhbVsxXTtcbiAgfSxcbiAgaGFuZGxlVXJsOiBmdW5jdGlvbiBoYW5kbGVVcmwob2xkUm91dGUsIG5ld1JvdXRlKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgY3VycmVudFJvdXRlID0gdGhpcy5yb3V0ZXMuZmluZChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgaWYgKHR5cGVvZiBpdGVtLm1hdGNoID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIG5ld1JvdXRlID0gbmV3Um91dGUuc3BsaXQoXCI/XCIpWzBdO1xuICAgICAgICByZXR1cm4gbmV3Um91dGUgPT09IGl0ZW0ubWF0Y2g7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpdGVtLm1hdGNoID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0ubWF0Y2gobmV3Um91dGUpO1xuICAgICAgfSBlbHNlIGlmIChpdGVtLm1hdGNoIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICAgIHJldHVybiBuZXdSb3V0ZS5tYXRjaChpdGVtLm1hdGNoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAob2xkUm91dGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIHByZXZpb3VzUm91dGUgPSB0aGlzLnJvdXRlcy5maW5kKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbS5tYXRjaCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIHJldHVybiBvbGRSb3V0ZSA9PT0gaXRlbS5tYXRjaDtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaXRlbS5tYXRjaCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgcmV0dXJuIGl0ZW0ubWF0Y2gob2xkUm91dGUpO1xuICAgICAgICB9IGVsc2UgaWYgKGl0ZW0ubWF0Y2ggaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgICAgICByZXR1cm4gb2xkUm91dGUubWF0Y2goaXRlbS5tYXRjaCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICB2YXIgY3VycmVudFBhcmFtID0gdGhpcy5nZXRQYXJhbShuZXdSb3V0ZSwgY3VycmVudFJvdXRlKTtcblxuICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHByZXZpb3VzUm91dGUgJiYgcHJldmlvdXNSb3V0ZS5vbkxlYXZlICYmIHByZXZpb3VzUm91dGUub25MZWF2ZShvbGRSb3V0ZS5zcGxpdChcIj1cIilbMV0pO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGN1cnJlbnRSb3V0ZSAmJiBjdXJyZW50Um91dGUub25CZWZvcmVFbnRlciAmJiBjdXJyZW50Um91dGUub25CZWZvcmVFbnRlcihjdXJyZW50UGFyYW0pO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGN1cnJlbnRSb3V0ZSAmJiBjdXJyZW50Um91dGUub25FbnRlciAmJiBjdXJyZW50Um91dGUub25FbnRlcihfdGhpczIuZXZlbnRCdXMsIGN1cnJlbnRQYXJhbSk7XG4gICAgfSk7XG4gIH1cbn07XG5leHBvcnRzLmRlZmF1bHQgPSBSb3V0ZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbEp2ZFhSbGNpNXFjeUpkTENKdVlXMWxjeUk2V3lKU2IzVjBaWElpTENKdmNIUnBiMjV6SWl3aVpYWmxiblJDZFhNaUxDSnliM1YwWlhNaUxDSnBibWwwSWl3aWNISnZkRzkwZVhCbElpd2lkMmx1Wkc5M0lpd2lZV1JrUlhabGJuUk1hWE4wWlc1bGNpSXNJbWhoYm1Sc1pWVnliQ0lzSW1WMklpd2liMnhrVlZKTUlpd2ljM0JzYVhRaUxDSnVaWGRWVWt3aUxDSjFibVJsWm1sdVpXUWlMQ0pzYjJOaGRHbHZiaUlzSW1oaGMyZ2lMQ0p6YkdsalpTSXNJbWRsZEZCaGNtRnRJaXdpYm1WM1VtOTFkR1VpTENKamRYSnlaVzUwVW05MWRHVWlMQ0p3WVhKaGJTSXNJbTFoZEdOb0lpd2liMnhrVW05MWRHVWlMQ0ptYVc1a0lpd2lhWFJsYlNJc0lsSmxaMFY0Y0NJc0luQnlaWFpwYjNWelVtOTFkR1VpTENKamRYSnlaVzUwVUdGeVlXMGlMQ0pRY205dGFYTmxJaXdpY21WemIyeDJaU0lzSW5Sb1pXNGlMQ0p2Ymt4bFlYWmxJaXdpYjI1Q1pXWnZjbVZGYm5SbGNpSXNJbTl1Ulc1MFpYSWlYU3dpYldGd2NHbHVaM01pT2lJN096czdPMEZCUVVFc1NVRkJTVUVzVTBGQlV5eFRRVUZVUVN4TlFVRlRMRU5CUVZORExFOUJRVlFzUlVGQmEwSkRMRkZCUVd4Q0xFVkJRVFJDTzBGQlEzWkRMRTlCUVV0RExFMUJRVXdzUjBGQlkwWXNVVUZCVVVVc1RVRkJkRUk3UVVGRFFTeFBRVUZMUkN4UlFVRk1MRWRCUVdkQ1FTeFJRVUZvUWp0QlFVTkJMRTlCUVV0RkxFbEJRVXc3UVVGRFJDeERRVXBFTzBGQlMwRktMRTlCUVU5TExGTkJRVkFzUjBGQmJVSTdRVUZEYWtKRUxGRkJRVTBzWjBKQlFWYzdRVUZCUVRzN1FVRkRaa1VzVjBGQlQwTXNaMEpCUVZBc1EwRkJkMElzV1VGQmVFSXNSVUZCYzBNN1FVRkJRU3hoUVVOd1F5eE5RVUZMUXl4VFFVRk1MRU5CUVdWRExFZEJRVWRETEUxQlFVZ3NRMEZCVlVNc1MwRkJWaXhEUVVGblFpeEhRVUZvUWl4RlFVRnhRaXhEUVVGeVFpeExRVUV5UWl4RlFVRXhReXhGUVVFNFEwWXNSMEZCUjBjc1RVRkJTQ3hEUVVGVlJDeExRVUZXTEVOQlFXZENMRWRCUVdoQ0xFVkJRWEZDTEVOQlFYSkNMRU5CUVRsRExFTkJSRzlETzBGQlFVRXNTMEZCZEVNN1FVRkhRU3hUUVVGTFNDeFRRVUZNTEVOQlFXVkxMRk5CUVdZc1JVRkJNRUpRTEU5QlFVOVJMRkZCUVZBc1EwRkJaMEpETEVsQlFXaENMRU5CUVhGQ1F5eExRVUZ5UWl4RFFVRXlRaXhEUVVFelFpeERRVUV4UWp0QlFVTkVMRWRCVG1kQ08wRkJUMnBDUXl4WlFVRlZMR3RDUVVGVFF5eFJRVUZVTEVWQlFXMUNReXhaUVVGdVFpeEZRVUZwUXp0QlFVTjZReXhSUVVGSlF5eFJRVUZSUml4VFFVRlRSeXhMUVVGVUxFTkJRV1ZHTEdGQlFXRkZMRXRCUVRWQ0xFdEJRWE5ETEVWQlFXeEVPMEZCUTBFc1YwRkJUMFFzVFVGQlRTeERRVUZPTEVOQlFWQTdRVUZEUkN4SFFWWm5RanRCUVZkcVFsb3NZVUZCVnl4dFFrRkJVMk1zVVVGQlZDeEZRVUZ0UWtvc1VVRkJia0lzUlVGQk5rSTdRVUZCUVRzN1FVRkRkRU1zVVVGQlNVTXNaVUZCWlN4TFFVRkxhRUlzVFVGQlRDeERRVUZaYjBJc1NVRkJXaXhEUVVGcFFpeG5Ra0ZCVVR0QlFVTXhReXhWUVVGSkxFOUJRVTlETEV0QlFVdElMRXRCUVZvc1MwRkJjMElzVVVGQk1VSXNSVUZCYjBNN1FVRkRiRU5JTEcxQ1FVRlhRU3hUUVVGVFVDeExRVUZVTEVOQlFXVXNSMEZCWml4RlFVRnZRaXhEUVVGd1FpeERRVUZZTzBGQlEwRXNaVUZCVDA4c1lVRkJZVTBzUzBGQlMwZ3NTMEZCZWtJN1FVRkRSQ3hQUVVoRUxFMUJSMDhzU1VGQlNTeFBRVUZQUnl4TFFVRkxTQ3hMUVVGYUxFdEJRWE5DTEZWQlFURkNMRVZCUVhORE8wRkJRek5ETEdWQlFVOUhMRXRCUVV0SUxFdEJRVXdzUTBGQlYwZ3NVVUZCV0N4RFFVRlFPMEZCUTBRc1QwRkdUU3hOUVVWQkxFbEJRVWxOTEV0QlFVdElMRXRCUVV3c1dVRkJjMEpKTEUxQlFURkNMRVZCUVd0RE8wRkJRM1pETEdWQlFVOVFMRk5CUVZOSExFdEJRVlFzUTBGQlpVY3NTMEZCUzBnc1MwRkJjRUlzUTBGQlVEdEJRVU5FTzBGQlEwWXNTMEZVYTBJc1EwRkJia0k3UVVGVlFTeFJRVUZKUXl4aFFVRmhWQ3hUUVVGcVFpeEZRVUUwUWp0QlFVTXhRaXhWUVVGSllTeG5Ra0ZCWjBJc1MwRkJTM1pDTEUxQlFVd3NRMEZCV1c5Q0xFbEJRVm9zUTBGQmFVSXNaMEpCUVZFN1FVRkRNME1zV1VGQlNTeFBRVUZQUXl4TFFVRkxTQ3hMUVVGYUxFdEJRWE5DTEZGQlFURkNMRVZCUVc5RE8wRkJRMnhETEdsQ1FVRlBReXhoUVVGaFJTeExRVUZMU0N4TFFVRjZRanRCUVVORUxGTkJSa1FzVFVGRlR5eEpRVUZKTEU5QlFVOUhMRXRCUVV0SUxFdEJRVm9zUzBGQmMwSXNWVUZCTVVJc1JVRkJjME03UVVGRE0wTXNhVUpCUVU5SExFdEJRVXRJTEV0QlFVd3NRMEZCVjBNc1VVRkJXQ3hEUVVGUU8wRkJRMFFzVTBGR1RTeE5RVVZCTEVsQlFVbEZMRXRCUVV0SUxFdEJRVXdzV1VGQmMwSkpMRTFCUVRGQ0xFVkJRV3RETzBGQlEzWkRMR2xDUVVGUFNDeFRRVUZUUkN4TFFVRlVMRU5CUVdWSExFdEJRVXRJTEV0QlFYQkNMRU5CUVZBN1FVRkRSRHRCUVVOR0xFOUJVbTFDTEVOQlFYQkNPMEZCVTBRN1FVRkRSQ3hSUVVGSlRTeGxRVUZsTEV0QlFVdFdMRkZCUVV3c1EwRkJZME1zVVVGQlpDeEZRVUYzUWtNc1dVRkJlRUlzUTBGQmJrSTdPMEZCUlVGVExGbEJRVkZETEU5QlFWSXNSMEZEUjBNc1NVRkVTQ3hEUVVWSk8wRkJRVUVzWVVGRFJVb3NhVUpCUTBGQkxHTkJRV05MTEU5QlJHUXNTVUZGUVV3c1kwRkJZMHNzVDBGQlpDeERRVUZ6UWxRc1UwRkJVMWdzUzBGQlZDeERRVUZsTEVkQlFXWXNSVUZCYjBJc1EwRkJjRUlzUTBGQmRFSXNRMEZJUmp0QlFVRkJMRXRCUmtvc1JVRlBSMjFDTEVsQlVFZ3NRMEZSU1R0QlFVRkJMR0ZCUTBWWUxHZENRVU5CUVN4aFFVRmhZU3hoUVVSaUxFbEJSVUZpTEdGQlFXRmhMR0ZCUVdJc1EwRkJNa0pNTEZsQlFUTkNMRU5CU0VZN1FVRkJRU3hMUVZKS0xFVkJZVWRITEVsQllrZ3NRMEZqU1R0QlFVRkJMR0ZCUTBWWUxHZENRVU5CUVN4aFFVRmhZeXhQUVVSaUxFbEJSVUZrTEdGQlFXRmpMRTlCUVdJc1EwRkJjVUlzVDBGQlN5OUNMRkZCUVRGQ0xFVkJRVzlEZVVJc1dVRkJjRU1zUTBGSVJqdEJRVUZCTEV0QlpFbzdRVUZ0UWtRN1FVRjBSR2RDTEVOQlFXNUNPMnRDUVhkRVpUTkNMRTBpTENKbWFXeGxJam9pVW05MWRHVnlMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWRtRnlJRkp2ZFhSbGNpQTlJR1oxYm1OMGFXOXVLRzl3ZEdsdmJuTXNJR1YyWlc1MFFuVnpLU0I3WEc0Z0lIUm9hWE11Y205MWRHVnpJRDBnYjNCMGFXOXVjeTV5YjNWMFpYTTdYRzRnSUhSb2FYTXVaWFpsYm5SQ2RYTWdQU0JsZG1WdWRFSjFjenRjYmlBZ2RHaHBjeTVwYm1sMEtDazdYRzU5TzF4dVVtOTFkR1Z5TG5CeWIzUnZkSGx3WlNBOUlIdGNiaUFnYVc1cGREb2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdkMmx1Wkc5M0xtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb1hDSm9ZWE5vWTJoaGJtZGxYQ0lzSUdWMklEMCtYRzRnSUNBZ0lDQjBhR2x6TG1oaGJtUnNaVlZ5YkNobGRpNXZiR1JWVWt3dWMzQnNhWFFvWENJalhDSXBXekZkSUh4OElGd2lYQ0lzSUdWMkxtNWxkMVZTVEM1emNHeHBkQ2hjSWlOY0lpbGJNVjBwWEc0Z0lDQWdLVHRjYmlBZ0lDQjBhR2x6TG1oaGJtUnNaVlZ5YkNoMWJtUmxabWx1WldRc0lIZHBibVJ2ZHk1c2IyTmhkR2x2Ymk1b1lYTm9Mbk5zYVdObEtERXBLVHRjYmlBZ2ZTeGNiaUFnWjJWMFVHRnlZVzA2SUdaMWJtTjBhVzl1S0c1bGQxSnZkWFJsTENCamRYSnlaVzUwVW05MWRHVXBJSHRjYmlBZ0lDQjJZWElnY0dGeVlXMGdQU0J1WlhkU2IzVjBaUzV0WVhSamFDaGpkWEp5Wlc1MFVtOTFkR1V1YldGMFkyZ3BJSHg4SUZ0ZE8xeHVJQ0FnSUhKbGRIVnliaUJ3WVhKaGJWc3hYVHRjYmlBZ2ZTeGNiaUFnYUdGdVpHeGxWWEpzT2lCbWRXNWpkR2x2YmlodmJHUlNiM1YwWlN3Z2JtVjNVbTkxZEdVcElIdGNiaUFnSUNCMllYSWdZM1Z5Y21WdWRGSnZkWFJsSUQwZ2RHaHBjeTV5YjNWMFpYTXVabWx1WkNocGRHVnRJRDArSUh0Y2JpQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2FYUmxiUzV0WVhSamFDQTlQVDBnWENKemRISnBibWRjSWlrZ2UxeHVJQ0FnSUNBZ0lDQnVaWGRTYjNWMFpTQTlJRzVsZDFKdmRYUmxMbk53YkdsMEtGd2lQMXdpS1Zzd1hUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkMUp2ZFhSbElEMDlQU0JwZEdWdExtMWhkR05vTzF4dUlDQWdJQ0FnZlNCbGJITmxJR2xtSUNoMGVYQmxiMllnYVhSbGJTNXRZWFJqYUNBOVBUMGdYQ0ptZFc1amRHbHZibHdpS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCcGRHVnRMbTFoZEdOb0tHNWxkMUp2ZFhSbEtUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9hWFJsYlM1dFlYUmphQ0JwYm5OMFlXNWpaVzltSUZKbFowVjRjQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM1VtOTFkR1V1YldGMFkyZ29hWFJsYlM1dFlYUmphQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2s3WEc0Z0lDQWdhV1lnS0c5c1pGSnZkWFJsSUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJSFpoY2lCd2NtVjJhVzkxYzFKdmRYUmxJRDBnZEdocGN5NXliM1YwWlhNdVptbHVaQ2hwZEdWdElEMCtJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCcGRHVnRMbTFoZEdOb0lEMDlQU0JjSW5OMGNtbHVaMXdpS1NCN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHOXNaRkp2ZFhSbElEMDlQU0JwZEdWdExtMWhkR05vTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tIUjVjR1Z2WmlCcGRHVnRMbTFoZEdOb0lEMDlQU0JjSW1aMWJtTjBhVzl1WENJcElIdGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdhWFJsYlM1dFlYUmphQ2h2YkdSU2IzVjBaU2s3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2FYUmxiUzV0WVhSamFDQnBibk4wWVc1alpXOW1JRkpsWjBWNGNDa2dlMXh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ2YkdSU2IzVjBaUzV0WVhSamFDaHBkR1Z0TG0xaGRHTm9LVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnZlZ4dUlDQWdJSFpoY2lCamRYSnlaVzUwVUdGeVlXMGdQU0IwYUdsekxtZGxkRkJoY21GdEtHNWxkMUp2ZFhSbExDQmpkWEp5Wlc1MFVtOTFkR1VwTzF4dVhHNGdJQ0FnVUhKdmJXbHpaUzV5WlhOdmJIWmxLQ2xjYmlBZ0lDQWdJQzUwYUdWdUtGeHVJQ0FnSUNBZ0lDQW9LU0E5UGx4dUlDQWdJQ0FnSUNBZ0lIQnlaWFpwYjNWelVtOTFkR1VnSmlaY2JpQWdJQ0FnSUNBZ0lDQndjbVYyYVc5MWMxSnZkWFJsTG05dVRHVmhkbVVnSmlaY2JpQWdJQ0FnSUNBZ0lDQndjbVYyYVc5MWMxSnZkWFJsTG05dVRHVmhkbVVvYjJ4a1VtOTFkR1V1YzNCc2FYUW9YQ0k5WENJcFd6RmRLVnh1SUNBZ0lDQWdLVnh1SUNBZ0lDQWdMblJvWlc0b1hHNGdJQ0FnSUNBZ0lDZ3BJRDArWEc0Z0lDQWdJQ0FnSUNBZ1kzVnljbVZ1ZEZKdmRYUmxJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ1kzVnljbVZ1ZEZKdmRYUmxMbTl1UW1WbWIzSmxSVzUwWlhJZ0ppWmNiaUFnSUNBZ0lDQWdJQ0JqZFhKeVpXNTBVbTkxZEdVdWIyNUNaV1p2Y21WRmJuUmxjaWhqZFhKeVpXNTBVR0Z5WVcwcFhHNGdJQ0FnSUNBcFhHNGdJQ0FnSUNBdWRHaGxiaWhjYmlBZ0lDQWdJQ0FnS0NrZ1BUNWNiaUFnSUNBZ0lDQWdJQ0JqZFhKeVpXNTBVbTkxZEdVZ0ppWmNiaUFnSUNBZ0lDQWdJQ0JqZFhKeVpXNTBVbTkxZEdVdWIyNUZiblJsY2lBbUpseHVJQ0FnSUNBZ0lDQWdJR04xY25KbGJuUlNiM1YwWlM1dmJrVnVkR1Z5S0hSb2FYTXVaWFpsYm5SQ2RYTXNJR04xY25KbGJuUlFZWEpoYlNsY2JpQWdJQ0FnSUNrN1hHNGdJSDFjYm4wN1hHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCU2IzVjBaWEk3WEc0aVhYMD1cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiZS9VKzk3XCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvdXRpbHNcXFxcUm91dGVyLmpzXCIsXCIvdXRpbHNcIikiXX0=
